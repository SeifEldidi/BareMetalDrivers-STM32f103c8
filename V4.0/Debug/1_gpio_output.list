
1_gpio_output.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000400c  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  0800413c  0800413c  0001413c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004210  08004210  000200a4  2**0
                  CONTENTS
  4 .ARM          00000000  08004210  08004210  000200a4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004210  08004210  000200a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004210  08004210  00014210  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004214  08004214  00014214  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a4  20000000  08004218  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000070  200000a4  080042bc  000200a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000114  080042bc  00020114  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006279  00000000  00000000  000200cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000159c  00000000  00000000  00026346  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000003f0  00000000  00000000  000278e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000370  00000000  00000000  00027cd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000137ec  00000000  00000000  00028048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00004dd9  00000000  00000000  0003b834  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005e437  00000000  00000000  0004060d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0009ea44  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001658  00000000  00000000  0009ea98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	200000a4 	.word	0x200000a4
 800014c:	00000000 	.word	0x00000000
 8000150:	08004124 	.word	0x08004124

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	200000a8 	.word	0x200000a8
 800016c:	08004124 	.word	0x08004124

08000170 <SYSTICK_INIT>:
#if SYSTICK_INTERRUPT_EN == EN
void (*SYS_CALLBACK_)(void) =NULL;
#endif

void SYSTICK_INIT(void (*SYS_CALLBACK)(void),int32_t Base_Delay_Us)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	b084      	sub	sp, #16
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
 8000178:	6039      	str	r1, [r7, #0]
	int32_t LOAD_VAL;
	/*Simple Function to calculate SYSCLK*/
	switch ((RCC->CFGR & (0x00000003 << RCC_SL_SWS_POS)) >> RCC_SL_SWS_POS) {
 800017a:	4b1e      	ldr	r3, [pc, #120]	; (80001f4 <SYSTICK_INIT+0x84>)
 800017c:	685b      	ldr	r3, [r3, #4]
 800017e:	089b      	lsrs	r3, r3, #2
 8000180:	f003 0303 	and.w	r3, r3, #3
 8000184:	2b01      	cmp	r3, #1
 8000186:	d902      	bls.n	800018e <SYSTICK_INIT+0x1e>
 8000188:	2b02      	cmp	r3, #2
 800018a:	d004      	beq.n	8000196 <SYSTICK_INIT+0x26>
 800018c:	e009      	b.n	80001a2 <SYSTICK_INIT+0x32>
		case 0x00000000UL:/*----HSI----*/
		case 0x00000001UL:/*---HSR----*/
			SYS_CLK = 8000000UL;
 800018e:	4b1a      	ldr	r3, [pc, #104]	; (80001f8 <SYSTICK_INIT+0x88>)
 8000190:	4a1a      	ldr	r2, [pc, #104]	; (80001fc <SYSTICK_INIT+0x8c>)
 8000192:	601a      	str	r2, [r3, #0]
			break;
 8000194:	e005      	b.n	80001a2 <SYSTICK_INIT+0x32>
		case 0x00000002UL:/*---PLL----*/
			SYS_CLK = PLL_CLK_CALC();
 8000196:	f002 fb45 	bl	8002824 <PLL_CLK_CALC>
 800019a:	4603      	mov	r3, r0
 800019c:	4a16      	ldr	r2, [pc, #88]	; (80001f8 <SYSTICK_INIT+0x88>)
 800019e:	6013      	str	r3, [r2, #0]
			break;
 80001a0:	bf00      	nop
	}
#if SYSTICK_INTERRUPT_EN == EN
	SYS_CALLBACK_=SYS_CALLBACK;
 80001a2:	4a17      	ldr	r2, [pc, #92]	; (8000200 <SYSTICK_INIT+0x90>)
 80001a4:	687b      	ldr	r3, [r7, #4]
 80001a6:	6013      	str	r3, [r2, #0]
	LOAD_VAL = (Base_Delay_Us*((SYS_CLK)/(1000000)));
 80001a8:	4b13      	ldr	r3, [pc, #76]	; (80001f8 <SYSTICK_INIT+0x88>)
 80001aa:	681b      	ldr	r3, [r3, #0]
 80001ac:	4a15      	ldr	r2, [pc, #84]	; (8000204 <SYSTICK_INIT+0x94>)
 80001ae:	fba2 2303 	umull	r2, r3, r2, r3
 80001b2:	0c9b      	lsrs	r3, r3, #18
 80001b4:	683a      	ldr	r2, [r7, #0]
 80001b6:	fb02 f303 	mul.w	r3, r2, r3
 80001ba:	60fb      	str	r3, [r7, #12]
	if(LOAD_VAL > SYSTICK_MAX_VAL)
 80001bc:	68fb      	ldr	r3, [r7, #12]
 80001be:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80001c2:	d306      	bcc.n	80001d2 <SYSTICK_INIT+0x62>
		LOAD_VAL = ((SYS_CLK)/1000);
 80001c4:	4b0c      	ldr	r3, [pc, #48]	; (80001f8 <SYSTICK_INIT+0x88>)
 80001c6:	681b      	ldr	r3, [r3, #0]
 80001c8:	4a0f      	ldr	r2, [pc, #60]	; (8000208 <SYSTICK_INIT+0x98>)
 80001ca:	fba2 2303 	umull	r2, r3, r2, r3
 80001ce:	099b      	lsrs	r3, r3, #6
 80001d0:	60fb      	str	r3, [r7, #12]
	SYSTICK->RVR = LOAD_VAL; /*---Reload---*/
 80001d2:	4a0e      	ldr	r2, [pc, #56]	; (800020c <SYSTICK_INIT+0x9c>)
 80001d4:	68fb      	ldr	r3, [r7, #12]
 80001d6:	6053      	str	r3, [r2, #4]
	SYSTICK->CVR = SYSTICK_CLEAR_VAL; /*----Clear Current---*/
 80001d8:	4b0c      	ldr	r3, [pc, #48]	; (800020c <SYSTICK_INIT+0x9c>)
 80001da:	2200      	movs	r2, #0
 80001dc:	609a      	str	r2, [r3, #8]
	SYSTICK->CSR  |= SYSTICK_CNT_EN |SYSTICK_CLKSRC_PROC |SYSTICK_INT_EN;  /*------Enable ------*/
 80001de:	4b0b      	ldr	r3, [pc, #44]	; (800020c <SYSTICK_INIT+0x9c>)
 80001e0:	681b      	ldr	r3, [r3, #0]
 80001e2:	4a0a      	ldr	r2, [pc, #40]	; (800020c <SYSTICK_INIT+0x9c>)
 80001e4:	f043 0307 	orr.w	r3, r3, #7
 80001e8:	6013      	str	r3, [r2, #0]
#endif
}
 80001ea:	bf00      	nop
 80001ec:	3710      	adds	r7, #16
 80001ee:	46bd      	mov	sp, r7
 80001f0:	bd80      	pop	{r7, pc}
 80001f2:	bf00      	nop
 80001f4:	40021000 	.word	0x40021000
 80001f8:	200000f0 	.word	0x200000f0
 80001fc:	007a1200 	.word	0x007a1200
 8000200:	200000c0 	.word	0x200000c0
 8000204:	431bde83 	.word	0x431bde83
 8000208:	10624dd3 	.word	0x10624dd3
 800020c:	e000e010 	.word	0xe000e010

08000210 <SysTick_Handler>:
	return SYSTICK->CVR;
}

#if SYSTICK_INTERRUPT_EN == EN
void SysTick_Handler(void)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	af00      	add	r7, sp, #0
	if(SYS_CALLBACK_)
 8000214:	4b04      	ldr	r3, [pc, #16]	; (8000228 <SysTick_Handler+0x18>)
 8000216:	681b      	ldr	r3, [r3, #0]
 8000218:	2b00      	cmp	r3, #0
 800021a:	d002      	beq.n	8000222 <SysTick_Handler+0x12>
		SYS_CALLBACK_();
 800021c:	4b02      	ldr	r3, [pc, #8]	; (8000228 <SysTick_Handler+0x18>)
 800021e:	681b      	ldr	r3, [r3, #0]
 8000220:	4798      	blx	r3
}
 8000222:	bf00      	nop
 8000224:	bd80      	pop	{r7, pc}
 8000226:	bf00      	nop
 8000228:	200000c0 	.word	0x200000c0

0800022c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800022c:	b480      	push	{r7}
 800022e:	b083      	sub	sp, #12
 8000230:	af00      	add	r7, sp, #0
 8000232:	4603      	mov	r3, r0
 8000234:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000236:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800023a:	2b00      	cmp	r3, #0
 800023c:	db0b      	blt.n	8000256 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800023e:	79fb      	ldrb	r3, [r7, #7]
 8000240:	f003 021f 	and.w	r2, r3, #31
 8000244:	4906      	ldr	r1, [pc, #24]	; (8000260 <__NVIC_EnableIRQ+0x34>)
 8000246:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800024a:	095b      	lsrs	r3, r3, #5
 800024c:	2001      	movs	r0, #1
 800024e:	fa00 f202 	lsl.w	r2, r0, r2
 8000252:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000256:	bf00      	nop
 8000258:	370c      	adds	r7, #12
 800025a:	46bd      	mov	sp, r7
 800025c:	bc80      	pop	{r7}
 800025e:	4770      	bx	lr
 8000260:	e000e100 	.word	0xe000e100

08000264 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000264:	b480      	push	{r7}
 8000266:	b083      	sub	sp, #12
 8000268:	af00      	add	r7, sp, #0
 800026a:	4603      	mov	r3, r0
 800026c:	6039      	str	r1, [r7, #0]
 800026e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000270:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000274:	2b00      	cmp	r3, #0
 8000276:	db0a      	blt.n	800028e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000278:	683b      	ldr	r3, [r7, #0]
 800027a:	b2da      	uxtb	r2, r3
 800027c:	490c      	ldr	r1, [pc, #48]	; (80002b0 <__NVIC_SetPriority+0x4c>)
 800027e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000282:	0112      	lsls	r2, r2, #4
 8000284:	b2d2      	uxtb	r2, r2
 8000286:	440b      	add	r3, r1
 8000288:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800028c:	e00a      	b.n	80002a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800028e:	683b      	ldr	r3, [r7, #0]
 8000290:	b2da      	uxtb	r2, r3
 8000292:	4908      	ldr	r1, [pc, #32]	; (80002b4 <__NVIC_SetPriority+0x50>)
 8000294:	79fb      	ldrb	r3, [r7, #7]
 8000296:	f003 030f 	and.w	r3, r3, #15
 800029a:	3b04      	subs	r3, #4
 800029c:	0112      	lsls	r2, r2, #4
 800029e:	b2d2      	uxtb	r2, r2
 80002a0:	440b      	add	r3, r1
 80002a2:	761a      	strb	r2, [r3, #24]
}
 80002a4:	bf00      	nop
 80002a6:	370c      	adds	r7, #12
 80002a8:	46bd      	mov	sp, r7
 80002aa:	bc80      	pop	{r7}
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop
 80002b0:	e000e100 	.word	0xe000e100
 80002b4:	e000ed00 	.word	0xe000ed00

080002b8 <HAL_EDGE_INT_init>:
	static void (*ADC_CALLBACK_)(void)= NULL;
#endif


static void HAL_EDGE_INT_init(ADC_init_t *ADC)
{
 80002b8:	b580      	push	{r7, lr}
 80002ba:	b082      	sub	sp, #8
 80002bc:	af00      	add	r7, sp, #0
 80002be:	6078      	str	r0, [r7, #4]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80002c0:	b672      	cpsid	i
}
 80002c2:	bf00      	nop
#if HAL_ADC_INT_EN == EN
	__disable_irq();
	ADC->Init.Instance->CR1 |= (1<<5);
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80002ca:	685a      	ldr	r2, [r3, #4]
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80002d2:	f042 0220 	orr.w	r2, r2, #32
 80002d6:	605a      	str	r2, [r3, #4]
	ADC_CALLBACK_=ADC->ADC_Callback;
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80002de:	4a07      	ldr	r2, [pc, #28]	; (80002fc <HAL_EDGE_INT_init+0x44>)
 80002e0:	6013      	str	r3, [r2, #0]
	NVIC_SetPriority(ADC1_2_IRQn,0b0100);// group priority =1 sub =0
 80002e2:	2104      	movs	r1, #4
 80002e4:	2012      	movs	r0, #18
 80002e6:	f7ff ffbd 	bl	8000264 <__NVIC_SetPriority>
	NVIC_EnableIRQ(ADC1_2_IRQn);
 80002ea:	2012      	movs	r0, #18
 80002ec:	f7ff ff9e 	bl	800022c <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 80002f0:	b662      	cpsie	i
}
 80002f2:	bf00      	nop
	__enable_irq();
#endif
}
 80002f4:	bf00      	nop
 80002f6:	3708      	adds	r7, #8
 80002f8:	46bd      	mov	sp, r7
 80002fa:	bd80      	pop	{r7, pc}
 80002fc:	200000c4 	.word	0x200000c4

08000300 <HAL_ADC_Init>:

void HAL_ADC_Init(ADC_init_t *ADC)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	b082      	sub	sp, #8
 8000304:	af00      	add	r7, sp, #0
 8000306:	6078      	str	r0, [r7, #4]
	if(ADC != NULL)
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	2b00      	cmp	r3, #0
 800030c:	d03c      	beq.n	8000388 <HAL_ADC_Init+0x88>
	{
		switch(ADC->ADC_Mode)
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	681b      	ldr	r3, [r3, #0]
 8000312:	2b03      	cmp	r3, #3
 8000314:	d838      	bhi.n	8000388 <HAL_ADC_Init+0x88>
 8000316:	a201      	add	r2, pc, #4	; (adr r2, 800031c <HAL_ADC_Init+0x1c>)
 8000318:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800031c:	0800032d 	.word	0x0800032d
 8000320:	08000349 	.word	0x08000349
 8000324:	08000379 	.word	0x08000379
 8000328:	08000387 	.word	0x08000387
		{
			case HAL_ADC_SCHN_SN_CONV:
				HAL_SHN_Init(&ADC->Init);
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	339c      	adds	r3, #156	; 0x9c
 8000330:	4618      	mov	r0, r3
 8000332:	f000 fcbb 	bl	8000cac <HAL_SHN_Init>
				ADC->Init.Sample_Time=ADC->Sample_Time[0];
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	689a      	ldr	r2, [r3, #8]
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
				HAL_EDGE_INT_init(ADC);
 8000340:	6878      	ldr	r0, [r7, #4]
 8000342:	f7ff ffb9 	bl	80002b8 <HAL_EDGE_INT_init>
				break;
 8000346:	e01f      	b.n	8000388 <HAL_ADC_Init+0x88>
			case HAL_ADC_SCHN_AUTO_CONV:
				ADC->Init.Sample_Time=ADC->Sample_Time[0];
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	689a      	ldr	r2, [r3, #8]
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
				HAL_SHN_Init(&ADC->Init);
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	339c      	adds	r3, #156	; 0x9c
 8000356:	4618      	mov	r0, r3
 8000358:	f000 fca8 	bl	8000cac <HAL_SHN_Init>
				ADC->Init.Instance->CR2 |= CONTINOUS_CONV;
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000362:	689a      	ldr	r2, [r3, #8]
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800036a:	f042 0202 	orr.w	r2, r2, #2
 800036e:	609a      	str	r2, [r3, #8]
				HAL_EDGE_INT_init(ADC);
 8000370:	6878      	ldr	r0, [r7, #4]
 8000372:	f7ff ffa1 	bl	80002b8 <HAL_EDGE_INT_init>
				break;
 8000376:	e007      	b.n	8000388 <HAL_ADC_Init+0x88>
			case HAL_ADC_MCHN_SN_CONV:
				HAL_MULT_SING_Init(ADC);
 8000378:	6878      	ldr	r0, [r7, #4]
 800037a:	f000 fce1 	bl	8000d40 <HAL_MULT_SING_Init>
				HAL_EDGE_INT_init(ADC);
 800037e:	6878      	ldr	r0, [r7, #4]
 8000380:	f7ff ff9a 	bl	80002b8 <HAL_EDGE_INT_init>
				break;
 8000384:	e000      	b.n	8000388 <HAL_ADC_Init+0x88>
			case HAL_ADC_MCHN_AUTO_CONV:

				break;
 8000386:	bf00      	nop
		}
	}else{

	}
}
 8000388:	bf00      	nop
 800038a:	3708      	adds	r7, #8
 800038c:	46bd      	mov	sp, r7
 800038e:	bd80      	pop	{r7, pc}

08000390 <HAL_ADC_WTD_EN>:

static void HAL_ADC_WTD_EN(ADC_CH_t *Channel,uint32_t Channel_NO)
{
 8000390:	b480      	push	{r7}
 8000392:	b083      	sub	sp, #12
 8000394:	af00      	add	r7, sp, #0
 8000396:	6078      	str	r0, [r7, #4]
 8000398:	6039      	str	r1, [r7, #0]
	switch (Channel->Watchdog_EN) {
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	68db      	ldr	r3, [r3, #12]
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d002      	beq.n	80003a8 <HAL_ADC_WTD_EN+0x18>
 80003a2:	2b01      	cmp	r3, #1
 80003a4:	d01b      	beq.n	80003de <HAL_ADC_WTD_EN+0x4e>
			break;
		case HAL_WATCHDOG_DISABLE:
			Channel->Instance->CR1 &= AWDEN_DIS_MSK;
			break;
		default:
			break;
 80003a6:	e023      	b.n	80003f0 <HAL_ADC_WTD_EN+0x60>
			Channel->Instance->CR1 |= AWDEN_EN_MSK;
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	685a      	ldr	r2, [r3, #4]
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	681b      	ldr	r3, [r3, #0]
 80003b2:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80003b6:	605a      	str	r2, [r3, #4]
			Channel->Instance->CR1 |= Channel_NO;
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	6859      	ldr	r1, [r3, #4]
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	681b      	ldr	r3, [r3, #0]
 80003c2:	683a      	ldr	r2, [r7, #0]
 80003c4:	430a      	orrs	r2, r1
 80003c6:	605a      	str	r2, [r3, #4]
			Channel->Instance->HTR =Channel->Watchog_High;
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	687a      	ldr	r2, [r7, #4]
 80003ce:	6912      	ldr	r2, [r2, #16]
 80003d0:	625a      	str	r2, [r3, #36]	; 0x24
			Channel->Instance->LTR =Channel->Watchdog_LOW;
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	681b      	ldr	r3, [r3, #0]
 80003d6:	687a      	ldr	r2, [r7, #4]
 80003d8:	6952      	ldr	r2, [r2, #20]
 80003da:	629a      	str	r2, [r3, #40]	; 0x28
			break;
 80003dc:	e008      	b.n	80003f0 <HAL_ADC_WTD_EN+0x60>
			Channel->Instance->CR1 &= AWDEN_DIS_MSK;
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	681b      	ldr	r3, [r3, #0]
 80003e2:	685a      	ldr	r2, [r3, #4]
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	681b      	ldr	r3, [r3, #0]
 80003e8:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 80003ec:	605a      	str	r2, [r3, #4]
			break;
 80003ee:	bf00      	nop
	}
}
 80003f0:	bf00      	nop
 80003f2:	370c      	adds	r7, #12
 80003f4:	46bd      	mov	sp, r7
 80003f6:	bc80      	pop	{r7}
 80003f8:	4770      	bx	lr
	...

080003fc <HAL_ADC_CHN_SET>:

static void HAL_ADC_CHN_SET(ADC_CH_t *Channel) {
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b08a      	sub	sp, #40	; 0x28
 8000400:	af00      	add	r7, sp, #0
 8000402:	6078      	str	r0, [r7, #4]
	GPIO_t GPIO_IN;
	GPIO_IN.Mode=HAL_GPIO_IN_AN;
 8000404:	2306      	movs	r3, #6
 8000406:	60fb      	str	r3, [r7, #12]

	switch (Channel->Channel_NO) {
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	685b      	ldr	r3, [r3, #4]
 800040c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000410:	f000 81c1 	beq.w	8000796 <HAL_ADC_CHN_SET+0x39a>
 8000414:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000418:	f200 81cc 	bhi.w	80007b4 <HAL_ADC_CHN_SET+0x3b8>
 800041c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000420:	f000 81aa 	beq.w	8000778 <HAL_ADC_CHN_SET+0x37c>
 8000424:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000428:	f200 81c4 	bhi.w	80007b4 <HAL_ADC_CHN_SET+0x3b8>
 800042c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000430:	f000 8193 	beq.w	800075a <HAL_ADC_CHN_SET+0x35e>
 8000434:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000438:	f200 81bc 	bhi.w	80007b4 <HAL_ADC_CHN_SET+0x3b8>
 800043c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000440:	f000 817c 	beq.w	800073c <HAL_ADC_CHN_SET+0x340>
 8000444:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000448:	f200 81b4 	bhi.w	80007b4 <HAL_ADC_CHN_SET+0x3b8>
 800044c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000450:	f000 8165 	beq.w	800071e <HAL_ADC_CHN_SET+0x322>
 8000454:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000458:	f200 81ac 	bhi.w	80007b4 <HAL_ADC_CHN_SET+0x3b8>
 800045c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000460:	f000 814f 	beq.w	8000702 <HAL_ADC_CHN_SET+0x306>
 8000464:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000468:	f200 81a4 	bhi.w	80007b4 <HAL_ADC_CHN_SET+0x3b8>
 800046c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000470:	f000 8130 	beq.w	80006d4 <HAL_ADC_CHN_SET+0x2d8>
 8000474:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000478:	f200 819c 	bhi.w	80007b4 <HAL_ADC_CHN_SET+0x3b8>
 800047c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000480:	f000 8111 	beq.w	80006a6 <HAL_ADC_CHN_SET+0x2aa>
 8000484:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000488:	f200 8194 	bhi.w	80007b4 <HAL_ADC_CHN_SET+0x3b8>
 800048c:	2b80      	cmp	r3, #128	; 0x80
 800048e:	f000 80f3 	beq.w	8000678 <HAL_ADC_CHN_SET+0x27c>
 8000492:	2b80      	cmp	r3, #128	; 0x80
 8000494:	f200 818e 	bhi.w	80007b4 <HAL_ADC_CHN_SET+0x3b8>
 8000498:	2b20      	cmp	r3, #32
 800049a:	d849      	bhi.n	8000530 <HAL_ADC_CHN_SET+0x134>
 800049c:	2b00      	cmp	r3, #0
 800049e:	f000 8189 	beq.w	80007b4 <HAL_ADC_CHN_SET+0x3b8>
 80004a2:	3b01      	subs	r3, #1
 80004a4:	2b1f      	cmp	r3, #31
 80004a6:	f200 8185 	bhi.w	80007b4 <HAL_ADC_CHN_SET+0x3b8>
 80004aa:	a201      	add	r2, pc, #4	; (adr r2, 80004b0 <HAL_ADC_CHN_SET+0xb4>)
 80004ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004b0:	08000539 	.word	0x08000539
 80004b4:	08000565 	.word	0x08000565
 80004b8:	080007b5 	.word	0x080007b5
 80004bc:	08000593 	.word	0x08000593
 80004c0:	080007b5 	.word	0x080007b5
 80004c4:	080007b5 	.word	0x080007b5
 80004c8:	080007b5 	.word	0x080007b5
 80004cc:	080005c1 	.word	0x080005c1
 80004d0:	080007b5 	.word	0x080007b5
 80004d4:	080007b5 	.word	0x080007b5
 80004d8:	080007b5 	.word	0x080007b5
 80004dc:	080007b5 	.word	0x080007b5
 80004e0:	080007b5 	.word	0x080007b5
 80004e4:	080007b5 	.word	0x080007b5
 80004e8:	080007b5 	.word	0x080007b5
 80004ec:	080005ef 	.word	0x080005ef
 80004f0:	080007b5 	.word	0x080007b5
 80004f4:	080007b5 	.word	0x080007b5
 80004f8:	080007b5 	.word	0x080007b5
 80004fc:	080007b5 	.word	0x080007b5
 8000500:	080007b5 	.word	0x080007b5
 8000504:	080007b5 	.word	0x080007b5
 8000508:	080007b5 	.word	0x080007b5
 800050c:	080007b5 	.word	0x080007b5
 8000510:	080007b5 	.word	0x080007b5
 8000514:	080007b5 	.word	0x080007b5
 8000518:	080007b5 	.word	0x080007b5
 800051c:	080007b5 	.word	0x080007b5
 8000520:	080007b5 	.word	0x080007b5
 8000524:	080007b5 	.word	0x080007b5
 8000528:	080007b5 	.word	0x080007b5
 800052c:	0800061d 	.word	0x0800061d
 8000530:	2b40      	cmp	r3, #64	; 0x40
 8000532:	f000 808a 	beq.w	800064a <HAL_ADC_CHN_SET+0x24e>
			HAL_ADC_WTD_EN(Channel, AWDCH_CHN_15);
			Channel->Instance->SQR3  = AWDCH_CHN_15;
			Channel->Instance->SMPR1 = (Channel->Sample_Time<<15);
			break;
	}
}
 8000536:	e13d      	b.n	80007b4 <HAL_ADC_CHN_SET+0x3b8>
			HAL_ADC_WTD_EN(Channel, AWDCH_CHN_0);
 8000538:	2100      	movs	r1, #0
 800053a:	6878      	ldr	r0, [r7, #4]
 800053c:	f7ff ff28 	bl	8000390 <HAL_ADC_WTD_EN>
			Channel->Instance->SQR3 = AWDCH_CHN_0;
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	2200      	movs	r2, #0
 8000546:	635a      	str	r2, [r3, #52]	; 0x34
			Channel->Instance->SMPR2 = (Channel->Sample_Time<<0);
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	687a      	ldr	r2, [r7, #4]
 800054e:	6992      	ldr	r2, [r2, #24]
 8000550:	611a      	str	r2, [r3, #16]
			GPIO_IN.PIN = GPIO_PIN_0;
 8000552:	2300      	movs	r3, #0
 8000554:	617b      	str	r3, [r7, #20]
			HAL_Init_PIN(GPIOA,&GPIO_IN);
 8000556:	f107 030c 	add.w	r3, r7, #12
 800055a:	4619      	mov	r1, r3
 800055c:	4897      	ldr	r0, [pc, #604]	; (80007bc <HAL_ADC_CHN_SET+0x3c0>)
 800055e:	f000 fd17 	bl	8000f90 <HAL_Init_PIN>
			break;
 8000562:	e127      	b.n	80007b4 <HAL_ADC_CHN_SET+0x3b8>
			HAL_ADC_WTD_EN(Channel, AWDCH_CHN_1);
 8000564:	2101      	movs	r1, #1
 8000566:	6878      	ldr	r0, [r7, #4]
 8000568:	f7ff ff12 	bl	8000390 <HAL_ADC_WTD_EN>
			Channel->Instance->SQR3 = AWDCH_CHN_1;
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	2201      	movs	r2, #1
 8000572:	635a      	str	r2, [r3, #52]	; 0x34
			Channel->Instance->SMPR2 = (Channel->Sample_Time<<3);
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	699a      	ldr	r2, [r3, #24]
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	00d2      	lsls	r2, r2, #3
 800057e:	611a      	str	r2, [r3, #16]
			GPIO_IN.PIN = GPIO_PIN_1;
 8000580:	2301      	movs	r3, #1
 8000582:	617b      	str	r3, [r7, #20]
			HAL_Init_PIN(GPIOA,&GPIO_IN);
 8000584:	f107 030c 	add.w	r3, r7, #12
 8000588:	4619      	mov	r1, r3
 800058a:	488c      	ldr	r0, [pc, #560]	; (80007bc <HAL_ADC_CHN_SET+0x3c0>)
 800058c:	f000 fd00 	bl	8000f90 <HAL_Init_PIN>
			break;
 8000590:	e110      	b.n	80007b4 <HAL_ADC_CHN_SET+0x3b8>
			HAL_ADC_WTD_EN(Channel, AWDCH_CHN_2);
 8000592:	2102      	movs	r1, #2
 8000594:	6878      	ldr	r0, [r7, #4]
 8000596:	f7ff fefb 	bl	8000390 <HAL_ADC_WTD_EN>
			Channel->Instance->SQR3 = AWDCH_CHN_2;
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	2202      	movs	r2, #2
 80005a0:	635a      	str	r2, [r3, #52]	; 0x34
			Channel->Instance->SMPR2 = (Channel->Sample_Time<<6);
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	699a      	ldr	r2, [r3, #24]
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	0192      	lsls	r2, r2, #6
 80005ac:	611a      	str	r2, [r3, #16]
			GPIO_IN.PIN = GPIO_PIN_2;
 80005ae:	2302      	movs	r3, #2
 80005b0:	617b      	str	r3, [r7, #20]
			HAL_Init_PIN(GPIOA,&GPIO_IN);
 80005b2:	f107 030c 	add.w	r3, r7, #12
 80005b6:	4619      	mov	r1, r3
 80005b8:	4880      	ldr	r0, [pc, #512]	; (80007bc <HAL_ADC_CHN_SET+0x3c0>)
 80005ba:	f000 fce9 	bl	8000f90 <HAL_Init_PIN>
			break;
 80005be:	e0f9      	b.n	80007b4 <HAL_ADC_CHN_SET+0x3b8>
			HAL_ADC_WTD_EN(Channel, AWDCH_CHN_3);
 80005c0:	2103      	movs	r1, #3
 80005c2:	6878      	ldr	r0, [r7, #4]
 80005c4:	f7ff fee4 	bl	8000390 <HAL_ADC_WTD_EN>
			Channel->Instance->SQR3 = AWDCH_CHN_3;
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	2203      	movs	r2, #3
 80005ce:	635a      	str	r2, [r3, #52]	; 0x34
			Channel->Instance->SMPR2 = (Channel->Sample_Time<<9);
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	699a      	ldr	r2, [r3, #24]
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	0252      	lsls	r2, r2, #9
 80005da:	611a      	str	r2, [r3, #16]
			GPIO_IN.PIN = GPIO_PIN_3;
 80005dc:	2303      	movs	r3, #3
 80005de:	617b      	str	r3, [r7, #20]
			HAL_Init_PIN(GPIOA,&GPIO_IN);
 80005e0:	f107 030c 	add.w	r3, r7, #12
 80005e4:	4619      	mov	r1, r3
 80005e6:	4875      	ldr	r0, [pc, #468]	; (80007bc <HAL_ADC_CHN_SET+0x3c0>)
 80005e8:	f000 fcd2 	bl	8000f90 <HAL_Init_PIN>
			break;
 80005ec:	e0e2      	b.n	80007b4 <HAL_ADC_CHN_SET+0x3b8>
			HAL_ADC_WTD_EN(Channel, AWDCH_CHN_4);
 80005ee:	2104      	movs	r1, #4
 80005f0:	6878      	ldr	r0, [r7, #4]
 80005f2:	f7ff fecd 	bl	8000390 <HAL_ADC_WTD_EN>
			Channel->Instance->SQR3 = AWDCH_CHN_4;
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	2204      	movs	r2, #4
 80005fc:	635a      	str	r2, [r3, #52]	; 0x34
			Channel->Instance->SMPR2 = (Channel->Sample_Time<<12);
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	699a      	ldr	r2, [r3, #24]
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	0312      	lsls	r2, r2, #12
 8000608:	611a      	str	r2, [r3, #16]
			GPIO_IN.PIN = GPIO_PIN_4;
 800060a:	2304      	movs	r3, #4
 800060c:	617b      	str	r3, [r7, #20]
			HAL_Init_PIN(GPIOA,&GPIO_IN);
 800060e:	f107 030c 	add.w	r3, r7, #12
 8000612:	4619      	mov	r1, r3
 8000614:	4869      	ldr	r0, [pc, #420]	; (80007bc <HAL_ADC_CHN_SET+0x3c0>)
 8000616:	f000 fcbb 	bl	8000f90 <HAL_Init_PIN>
			break;
 800061a:	e0cb      	b.n	80007b4 <HAL_ADC_CHN_SET+0x3b8>
			HAL_ADC_WTD_EN(Channel, AWDCH_CHN_5);
 800061c:	2105      	movs	r1, #5
 800061e:	6878      	ldr	r0, [r7, #4]
 8000620:	f7ff feb6 	bl	8000390 <HAL_ADC_WTD_EN>
			Channel->Instance->SQR3 = AWDCH_CHN_5;
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	2205      	movs	r2, #5
 800062a:	635a      	str	r2, [r3, #52]	; 0x34
			Channel->Instance->SMPR2 = (Channel->Sample_Time<<15);
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	699a      	ldr	r2, [r3, #24]
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	03d2      	lsls	r2, r2, #15
 8000636:	611a      	str	r2, [r3, #16]
			GPIO_IN.PIN = GPIO_PIN_5;
 8000638:	2305      	movs	r3, #5
 800063a:	617b      	str	r3, [r7, #20]
			HAL_Init_PIN(GPIOA,&GPIO_IN);
 800063c:	f107 030c 	add.w	r3, r7, #12
 8000640:	4619      	mov	r1, r3
 8000642:	485e      	ldr	r0, [pc, #376]	; (80007bc <HAL_ADC_CHN_SET+0x3c0>)
 8000644:	f000 fca4 	bl	8000f90 <HAL_Init_PIN>
			break;
 8000648:	e0b4      	b.n	80007b4 <HAL_ADC_CHN_SET+0x3b8>
			HAL_ADC_WTD_EN(Channel, AWDCH_CHN_6);
 800064a:	2106      	movs	r1, #6
 800064c:	6878      	ldr	r0, [r7, #4]
 800064e:	f7ff fe9f 	bl	8000390 <HAL_ADC_WTD_EN>
			Channel->Instance->SQR3 = AWDCH_CHN_6;
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	2206      	movs	r2, #6
 8000658:	635a      	str	r2, [r3, #52]	; 0x34
			Channel->Instance->SMPR2 = (Channel->Sample_Time<<18);
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	699a      	ldr	r2, [r3, #24]
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	0492      	lsls	r2, r2, #18
 8000664:	611a      	str	r2, [r3, #16]
			GPIO_IN.PIN = GPIO_PIN_6;
 8000666:	2306      	movs	r3, #6
 8000668:	617b      	str	r3, [r7, #20]
			HAL_Init_PIN(GPIOA,&GPIO_IN);
 800066a:	f107 030c 	add.w	r3, r7, #12
 800066e:	4619      	mov	r1, r3
 8000670:	4852      	ldr	r0, [pc, #328]	; (80007bc <HAL_ADC_CHN_SET+0x3c0>)
 8000672:	f000 fc8d 	bl	8000f90 <HAL_Init_PIN>
			break;
 8000676:	e09d      	b.n	80007b4 <HAL_ADC_CHN_SET+0x3b8>
			HAL_ADC_WTD_EN(Channel, AWDCH_CHN_7);
 8000678:	2107      	movs	r1, #7
 800067a:	6878      	ldr	r0, [r7, #4]
 800067c:	f7ff fe88 	bl	8000390 <HAL_ADC_WTD_EN>
			Channel->Instance->SQR3 = AWDCH_CHN_7;
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	2207      	movs	r2, #7
 8000686:	635a      	str	r2, [r3, #52]	; 0x34
			Channel->Instance->SMPR2 = (Channel->Sample_Time<<21);
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	699a      	ldr	r2, [r3, #24]
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	0552      	lsls	r2, r2, #21
 8000692:	611a      	str	r2, [r3, #16]
			GPIO_IN.PIN = GPIO_PIN_7;
 8000694:	2307      	movs	r3, #7
 8000696:	617b      	str	r3, [r7, #20]
			HAL_Init_PIN(GPIOA,&GPIO_IN);
 8000698:	f107 030c 	add.w	r3, r7, #12
 800069c:	4619      	mov	r1, r3
 800069e:	4847      	ldr	r0, [pc, #284]	; (80007bc <HAL_ADC_CHN_SET+0x3c0>)
 80006a0:	f000 fc76 	bl	8000f90 <HAL_Init_PIN>
			break;
 80006a4:	e086      	b.n	80007b4 <HAL_ADC_CHN_SET+0x3b8>
			HAL_ADC_WTD_EN(Channel, AWDCH_CHN_8);
 80006a6:	2108      	movs	r1, #8
 80006a8:	6878      	ldr	r0, [r7, #4]
 80006aa:	f7ff fe71 	bl	8000390 <HAL_ADC_WTD_EN>
			Channel->Instance->SQR3 = AWDCH_CHN_8;
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	2208      	movs	r2, #8
 80006b4:	635a      	str	r2, [r3, #52]	; 0x34
			Channel->Instance->SMPR2 = (Channel->Sample_Time<<24);
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	699a      	ldr	r2, [r3, #24]
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	0612      	lsls	r2, r2, #24
 80006c0:	611a      	str	r2, [r3, #16]
			GPIO_IN.PIN = GPIO_PIN_0;
 80006c2:	2300      	movs	r3, #0
 80006c4:	617b      	str	r3, [r7, #20]
			HAL_Init_PIN(GPIOB,&GPIO_IN);
 80006c6:	f107 030c 	add.w	r3, r7, #12
 80006ca:	4619      	mov	r1, r3
 80006cc:	483c      	ldr	r0, [pc, #240]	; (80007c0 <HAL_ADC_CHN_SET+0x3c4>)
 80006ce:	f000 fc5f 	bl	8000f90 <HAL_Init_PIN>
			break;
 80006d2:	e06f      	b.n	80007b4 <HAL_ADC_CHN_SET+0x3b8>
			HAL_ADC_WTD_EN(Channel, AWDCH_CHN_9);
 80006d4:	2109      	movs	r1, #9
 80006d6:	6878      	ldr	r0, [r7, #4]
 80006d8:	f7ff fe5a 	bl	8000390 <HAL_ADC_WTD_EN>
			Channel->Instance->SQR3 = AWDCH_CHN_9;
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	2209      	movs	r2, #9
 80006e2:	635a      	str	r2, [r3, #52]	; 0x34
			Channel->Instance->SMPR2 = (Channel->Sample_Time<<27);
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	699a      	ldr	r2, [r3, #24]
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	06d2      	lsls	r2, r2, #27
 80006ee:	611a      	str	r2, [r3, #16]
			GPIO_IN.PIN = GPIO_PIN_1;
 80006f0:	2301      	movs	r3, #1
 80006f2:	617b      	str	r3, [r7, #20]
			HAL_Init_PIN(GPIOB,&GPIO_IN);
 80006f4:	f107 030c 	add.w	r3, r7, #12
 80006f8:	4619      	mov	r1, r3
 80006fa:	4831      	ldr	r0, [pc, #196]	; (80007c0 <HAL_ADC_CHN_SET+0x3c4>)
 80006fc:	f000 fc48 	bl	8000f90 <HAL_Init_PIN>
			break;
 8000700:	e058      	b.n	80007b4 <HAL_ADC_CHN_SET+0x3b8>
			HAL_ADC_WTD_EN(Channel, AWDCH_CHN_10);
 8000702:	210a      	movs	r1, #10
 8000704:	6878      	ldr	r0, [r7, #4]
 8000706:	f7ff fe43 	bl	8000390 <HAL_ADC_WTD_EN>
			Channel->Instance->SQR3 = AWDCH_CHN_10;
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	220a      	movs	r2, #10
 8000710:	635a      	str	r2, [r3, #52]	; 0x34
			Channel->Instance->SMPR1 = (Channel->Sample_Time<<0);
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	687a      	ldr	r2, [r7, #4]
 8000718:	6992      	ldr	r2, [r2, #24]
 800071a:	60da      	str	r2, [r3, #12]
			break;
 800071c:	e04a      	b.n	80007b4 <HAL_ADC_CHN_SET+0x3b8>
			HAL_ADC_WTD_EN(Channel, AWDCH_CHN_11);
 800071e:	210b      	movs	r1, #11
 8000720:	6878      	ldr	r0, [r7, #4]
 8000722:	f7ff fe35 	bl	8000390 <HAL_ADC_WTD_EN>
			Channel->Instance->SQR3 = AWDCH_CHN_11;
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	220b      	movs	r2, #11
 800072c:	635a      	str	r2, [r3, #52]	; 0x34
			Channel->Instance->SMPR1 = (Channel->Sample_Time<<3);
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	699a      	ldr	r2, [r3, #24]
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	00d2      	lsls	r2, r2, #3
 8000738:	60da      	str	r2, [r3, #12]
			break;
 800073a:	e03b      	b.n	80007b4 <HAL_ADC_CHN_SET+0x3b8>
			HAL_ADC_WTD_EN(Channel, AWDCH_CHN_12);
 800073c:	210c      	movs	r1, #12
 800073e:	6878      	ldr	r0, [r7, #4]
 8000740:	f7ff fe26 	bl	8000390 <HAL_ADC_WTD_EN>
			Channel->Instance->SQR3 = AWDCH_CHN_12;
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	220c      	movs	r2, #12
 800074a:	635a      	str	r2, [r3, #52]	; 0x34
			Channel->Instance->SMPR1 = (Channel->Sample_Time<<6);
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	699a      	ldr	r2, [r3, #24]
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	0192      	lsls	r2, r2, #6
 8000756:	60da      	str	r2, [r3, #12]
			break;
 8000758:	e02c      	b.n	80007b4 <HAL_ADC_CHN_SET+0x3b8>
			HAL_ADC_WTD_EN(Channel, AWDCH_CHN_13);
 800075a:	210d      	movs	r1, #13
 800075c:	6878      	ldr	r0, [r7, #4]
 800075e:	f7ff fe17 	bl	8000390 <HAL_ADC_WTD_EN>
			Channel->Instance->SQR3 = AWDCH_CHN_13;
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	220d      	movs	r2, #13
 8000768:	635a      	str	r2, [r3, #52]	; 0x34
			Channel->Instance->SMPR1 = (Channel->Sample_Time<<9);
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	699a      	ldr	r2, [r3, #24]
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	0252      	lsls	r2, r2, #9
 8000774:	60da      	str	r2, [r3, #12]
			break;
 8000776:	e01d      	b.n	80007b4 <HAL_ADC_CHN_SET+0x3b8>
			HAL_ADC_WTD_EN(Channel, AWDCH_CHN_14);
 8000778:	210e      	movs	r1, #14
 800077a:	6878      	ldr	r0, [r7, #4]
 800077c:	f7ff fe08 	bl	8000390 <HAL_ADC_WTD_EN>
			Channel->Instance->SQR3 = AWDCH_CHN_14;
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	220e      	movs	r2, #14
 8000786:	635a      	str	r2, [r3, #52]	; 0x34
			Channel->Instance->SMPR1 = (Channel->Sample_Time<<12);
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	699a      	ldr	r2, [r3, #24]
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	0312      	lsls	r2, r2, #12
 8000792:	60da      	str	r2, [r3, #12]
			break;
 8000794:	e00e      	b.n	80007b4 <HAL_ADC_CHN_SET+0x3b8>
			HAL_ADC_WTD_EN(Channel, AWDCH_CHN_15);
 8000796:	210f      	movs	r1, #15
 8000798:	6878      	ldr	r0, [r7, #4]
 800079a:	f7ff fdf9 	bl	8000390 <HAL_ADC_WTD_EN>
			Channel->Instance->SQR3  = AWDCH_CHN_15;
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	220f      	movs	r2, #15
 80007a4:	635a      	str	r2, [r3, #52]	; 0x34
			Channel->Instance->SMPR1 = (Channel->Sample_Time<<15);
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	699a      	ldr	r2, [r3, #24]
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	03d2      	lsls	r2, r2, #15
 80007b0:	60da      	str	r2, [r3, #12]
			break;
 80007b2:	bf00      	nop
}
 80007b4:	bf00      	nop
 80007b6:	3728      	adds	r7, #40	; 0x28
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	40010800 	.word	0x40010800
 80007c0:	40010c00 	.word	0x40010c00

080007c4 <HAL_SHN_ALLGN_SET>:

static void HAL_SHN_ALLGN_SET(ADC_CH_t *Channel)
{
 80007c4:	b480      	push	{r7}
 80007c6:	b083      	sub	sp, #12
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
	switch (Channel->Alignment) {
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	689b      	ldr	r3, [r3, #8]
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d002      	beq.n	80007da <HAL_SHN_ALLGN_SET+0x16>
 80007d4:	2b01      	cmp	r3, #1
 80007d6:	d009      	beq.n	80007ec <HAL_SHN_ALLGN_SET+0x28>
			break;
		case HAL_ADC_ALLIGNMENT_RIGHT:
			Channel->Instance->CR2 &= ALLIGN_RIGH_MSK;
			break;
	}
}
 80007d8:	e011      	b.n	80007fe <HAL_SHN_ALLGN_SET+0x3a>
			Channel->Instance->CR2 |= ALLIGN_LEFT_MSK;
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	689a      	ldr	r2, [r3, #8]
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80007e8:	609a      	str	r2, [r3, #8]
			break;
 80007ea:	e008      	b.n	80007fe <HAL_SHN_ALLGN_SET+0x3a>
			Channel->Instance->CR2 &= ALLIGN_RIGH_MSK;
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	689a      	ldr	r2, [r3, #8]
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80007fa:	609a      	str	r2, [r3, #8]
			break;
 80007fc:	bf00      	nop
}
 80007fe:	bf00      	nop
 8000800:	370c      	adds	r7, #12
 8000802:	46bd      	mov	sp, r7
 8000804:	bc80      	pop	{r7}
 8000806:	4770      	bx	lr

08000808 <HAL_ADC_MULTCHN_SET>:

static void HAL_ADC_MULTCHN_SET(ADC_init_t *Channel,uint8_t POS) {
 8000808:	b580      	push	{r7, lr}
 800080a:	b08c      	sub	sp, #48	; 0x30
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
 8000810:	460b      	mov	r3, r1
 8000812:	70fb      	strb	r3, [r7, #3]

	GPIO_t GPIO_IN;
	GPIO_IN.Mode=HAL_GPIO_IN_AN;
 8000814:	2306      	movs	r3, #6
 8000816:	60fb      	str	r3, [r7, #12]
	volatile uint32_t *CONFIG_REG=NULL;
 8000818:	2300      	movs	r3, #0
 800081a:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t OFFSET=0;
 800081c:	2300      	movs	r3, #0
 800081e:	62bb      	str	r3, [r7, #40]	; 0x28
	CONFIG_REG=(POS<=6)?&Channel->Init.Instance->SQR3:(POS>6 && POS<=12)?&Channel->Init.Instance->SQR2:&Channel->Init.Instance->SQR1;
 8000820:	78fb      	ldrb	r3, [r7, #3]
 8000822:	2b06      	cmp	r3, #6
 8000824:	d804      	bhi.n	8000830 <HAL_ADC_MULTCHN_SET+0x28>
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800082c:	3334      	adds	r3, #52	; 0x34
 800082e:	e00e      	b.n	800084e <HAL_ADC_MULTCHN_SET+0x46>
 8000830:	78fb      	ldrb	r3, [r7, #3]
 8000832:	2b06      	cmp	r3, #6
 8000834:	d907      	bls.n	8000846 <HAL_ADC_MULTCHN_SET+0x3e>
 8000836:	78fb      	ldrb	r3, [r7, #3]
 8000838:	2b0c      	cmp	r3, #12
 800083a:	d804      	bhi.n	8000846 <HAL_ADC_MULTCHN_SET+0x3e>
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000842:	3330      	adds	r3, #48	; 0x30
 8000844:	e003      	b.n	800084e <HAL_ADC_MULTCHN_SET+0x46>
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800084c:	332c      	adds	r3, #44	; 0x2c
 800084e:	62fb      	str	r3, [r7, #44]	; 0x2c
	OFFSET=(POS<=6)?POS:(POS>6 && POS<=12)?POS-6:POS-13;
 8000850:	78fb      	ldrb	r3, [r7, #3]
 8000852:	2b06      	cmp	r3, #6
 8000854:	d801      	bhi.n	800085a <HAL_ADC_MULTCHN_SET+0x52>
 8000856:	78fb      	ldrb	r3, [r7, #3]
 8000858:	e00a      	b.n	8000870 <HAL_ADC_MULTCHN_SET+0x68>
 800085a:	78fb      	ldrb	r3, [r7, #3]
 800085c:	2b06      	cmp	r3, #6
 800085e:	d905      	bls.n	800086c <HAL_ADC_MULTCHN_SET+0x64>
 8000860:	78fb      	ldrb	r3, [r7, #3]
 8000862:	2b0c      	cmp	r3, #12
 8000864:	d802      	bhi.n	800086c <HAL_ADC_MULTCHN_SET+0x64>
 8000866:	78fb      	ldrb	r3, [r7, #3]
 8000868:	3b06      	subs	r3, #6
 800086a:	e001      	b.n	8000870 <HAL_ADC_MULTCHN_SET+0x68>
 800086c:	78fb      	ldrb	r3, [r7, #3]
 800086e:	3b0d      	subs	r3, #13
 8000870:	62bb      	str	r3, [r7, #40]	; 0x28

	switch (Channel->CHANNEL_POS[POS]) {
 8000872:	78fa      	ldrb	r2, [r7, #3]
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	3214      	adds	r2, #20
 8000878:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800087c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000880:	f000 81f8 	beq.w	8000c74 <HAL_ADC_MULTCHN_SET+0x46c>
 8000884:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000888:	f200 8207 	bhi.w	8000c9a <HAL_ADC_MULTCHN_SET+0x492>
 800088c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000890:	f000 81dd 	beq.w	8000c4e <HAL_ADC_MULTCHN_SET+0x446>
 8000894:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000898:	f200 81ff 	bhi.w	8000c9a <HAL_ADC_MULTCHN_SET+0x492>
 800089c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80008a0:	f000 81c2 	beq.w	8000c28 <HAL_ADC_MULTCHN_SET+0x420>
 80008a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80008a8:	f200 81f7 	bhi.w	8000c9a <HAL_ADC_MULTCHN_SET+0x492>
 80008ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80008b0:	f000 81a7 	beq.w	8000c02 <HAL_ADC_MULTCHN_SET+0x3fa>
 80008b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80008b8:	f200 81ef 	bhi.w	8000c9a <HAL_ADC_MULTCHN_SET+0x492>
 80008bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80008c0:	f000 818c 	beq.w	8000bdc <HAL_ADC_MULTCHN_SET+0x3d4>
 80008c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80008c8:	f200 81e7 	bhi.w	8000c9a <HAL_ADC_MULTCHN_SET+0x492>
 80008cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80008d0:	f000 8172 	beq.w	8000bb8 <HAL_ADC_MULTCHN_SET+0x3b0>
 80008d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80008d8:	f200 81df 	bhi.w	8000c9a <HAL_ADC_MULTCHN_SET+0x492>
 80008dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80008e0:	f000 814f 	beq.w	8000b82 <HAL_ADC_MULTCHN_SET+0x37a>
 80008e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80008e8:	f200 81d7 	bhi.w	8000c9a <HAL_ADC_MULTCHN_SET+0x492>
 80008ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80008f0:	f000 812c 	beq.w	8000b4c <HAL_ADC_MULTCHN_SET+0x344>
 80008f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80008f8:	f200 81cf 	bhi.w	8000c9a <HAL_ADC_MULTCHN_SET+0x492>
 80008fc:	2b80      	cmp	r3, #128	; 0x80
 80008fe:	f000 810a 	beq.w	8000b16 <HAL_ADC_MULTCHN_SET+0x30e>
 8000902:	2b80      	cmp	r3, #128	; 0x80
 8000904:	f200 81c9 	bhi.w	8000c9a <HAL_ADC_MULTCHN_SET+0x492>
 8000908:	2b20      	cmp	r3, #32
 800090a:	d849      	bhi.n	80009a0 <HAL_ADC_MULTCHN_SET+0x198>
 800090c:	2b00      	cmp	r3, #0
 800090e:	f000 81c4 	beq.w	8000c9a <HAL_ADC_MULTCHN_SET+0x492>
 8000912:	3b01      	subs	r3, #1
 8000914:	2b1f      	cmp	r3, #31
 8000916:	f200 81c0 	bhi.w	8000c9a <HAL_ADC_MULTCHN_SET+0x492>
 800091a:	a201      	add	r2, pc, #4	; (adr r2, 8000920 <HAL_ADC_MULTCHN_SET+0x118>)
 800091c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000920:	080009a9 	.word	0x080009a9
 8000924:	080009d3 	.word	0x080009d3
 8000928:	08000c9b 	.word	0x08000c9b
 800092c:	08000a09 	.word	0x08000a09
 8000930:	08000c9b 	.word	0x08000c9b
 8000934:	08000c9b 	.word	0x08000c9b
 8000938:	08000c9b 	.word	0x08000c9b
 800093c:	08000a3f 	.word	0x08000a3f
 8000940:	08000c9b 	.word	0x08000c9b
 8000944:	08000c9b 	.word	0x08000c9b
 8000948:	08000c9b 	.word	0x08000c9b
 800094c:	08000c9b 	.word	0x08000c9b
 8000950:	08000c9b 	.word	0x08000c9b
 8000954:	08000c9b 	.word	0x08000c9b
 8000958:	08000c9b 	.word	0x08000c9b
 800095c:	08000a75 	.word	0x08000a75
 8000960:	08000c9b 	.word	0x08000c9b
 8000964:	08000c9b 	.word	0x08000c9b
 8000968:	08000c9b 	.word	0x08000c9b
 800096c:	08000c9b 	.word	0x08000c9b
 8000970:	08000c9b 	.word	0x08000c9b
 8000974:	08000c9b 	.word	0x08000c9b
 8000978:	08000c9b 	.word	0x08000c9b
 800097c:	08000c9b 	.word	0x08000c9b
 8000980:	08000c9b 	.word	0x08000c9b
 8000984:	08000c9b 	.word	0x08000c9b
 8000988:	08000c9b 	.word	0x08000c9b
 800098c:	08000c9b 	.word	0x08000c9b
 8000990:	08000c9b 	.word	0x08000c9b
 8000994:	08000c9b 	.word	0x08000c9b
 8000998:	08000c9b 	.word	0x08000c9b
 800099c:	08000aab 	.word	0x08000aab
 80009a0:	2b40      	cmp	r3, #64	; 0x40
 80009a2:	f000 809d 	beq.w	8000ae0 <HAL_ADC_MULTCHN_SET+0x2d8>

			*CONFIG_REG  = AWDCH_CHN_15<<5*OFFSET;
			Channel->Init.Instance->SMPR1 = (Channel->Sample_Time[POS]<<15);
			break;
	}
}
 80009a6:	e178      	b.n	8000c9a <HAL_ADC_MULTCHN_SET+0x492>
			*CONFIG_REG = (AWDCH_CHN_0<<5*OFFSET);
 80009a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009aa:	2200      	movs	r2, #0
 80009ac:	601a      	str	r2, [r3, #0]
			Channel->Init.Instance->SMPR2 = (Channel->Sample_Time[POS]<<0);
 80009ae:	78f9      	ldrb	r1, [r7, #3]
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80009b6:	687a      	ldr	r2, [r7, #4]
 80009b8:	3102      	adds	r1, #2
 80009ba:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80009be:	611a      	str	r2, [r3, #16]
			GPIO_IN.PIN = GPIO_PIN_0;
 80009c0:	2300      	movs	r3, #0
 80009c2:	617b      	str	r3, [r7, #20]
			HAL_Init_PIN(GPIOA,&GPIO_IN);
 80009c4:	f107 030c 	add.w	r3, r7, #12
 80009c8:	4619      	mov	r1, r3
 80009ca:	48b6      	ldr	r0, [pc, #728]	; (8000ca4 <HAL_ADC_MULTCHN_SET+0x49c>)
 80009cc:	f000 fae0 	bl	8000f90 <HAL_Init_PIN>
			break;
 80009d0:	e163      	b.n	8000c9a <HAL_ADC_MULTCHN_SET+0x492>
			*CONFIG_REG = AWDCH_CHN_1<<5*OFFSET;
 80009d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80009d4:	4613      	mov	r3, r2
 80009d6:	009b      	lsls	r3, r3, #2
 80009d8:	4413      	add	r3, r2
 80009da:	2201      	movs	r2, #1
 80009dc:	409a      	lsls	r2, r3
 80009de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009e0:	601a      	str	r2, [r3, #0]
			Channel->Init.Instance->SMPR2 = (Channel->Sample_Time[POS]<<3);
 80009e2:	78fa      	ldrb	r2, [r7, #3]
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	3202      	adds	r2, #2
 80009e8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80009f2:	00d2      	lsls	r2, r2, #3
 80009f4:	611a      	str	r2, [r3, #16]
			GPIO_IN.PIN = GPIO_PIN_1;
 80009f6:	2301      	movs	r3, #1
 80009f8:	617b      	str	r3, [r7, #20]
			HAL_Init_PIN(GPIOA,&GPIO_IN);
 80009fa:	f107 030c 	add.w	r3, r7, #12
 80009fe:	4619      	mov	r1, r3
 8000a00:	48a8      	ldr	r0, [pc, #672]	; (8000ca4 <HAL_ADC_MULTCHN_SET+0x49c>)
 8000a02:	f000 fac5 	bl	8000f90 <HAL_Init_PIN>
			break;
 8000a06:	e148      	b.n	8000c9a <HAL_ADC_MULTCHN_SET+0x492>
			*CONFIG_REG = AWDCH_CHN_2<<5*OFFSET;
 8000a08:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000a0a:	4613      	mov	r3, r2
 8000a0c:	009b      	lsls	r3, r3, #2
 8000a0e:	4413      	add	r3, r2
 8000a10:	2202      	movs	r2, #2
 8000a12:	409a      	lsls	r2, r3
 8000a14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a16:	601a      	str	r2, [r3, #0]
			Channel->Init.Instance->SMPR2 = (Channel->Sample_Time[POS]<<6);
 8000a18:	78fa      	ldrb	r2, [r7, #3]
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	3202      	adds	r2, #2
 8000a1e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000a28:	0192      	lsls	r2, r2, #6
 8000a2a:	611a      	str	r2, [r3, #16]
			GPIO_IN.PIN = GPIO_PIN_2;
 8000a2c:	2302      	movs	r3, #2
 8000a2e:	617b      	str	r3, [r7, #20]
			HAL_Init_PIN(GPIOA,&GPIO_IN);
 8000a30:	f107 030c 	add.w	r3, r7, #12
 8000a34:	4619      	mov	r1, r3
 8000a36:	489b      	ldr	r0, [pc, #620]	; (8000ca4 <HAL_ADC_MULTCHN_SET+0x49c>)
 8000a38:	f000 faaa 	bl	8000f90 <HAL_Init_PIN>
			break;
 8000a3c:	e12d      	b.n	8000c9a <HAL_ADC_MULTCHN_SET+0x492>
			*CONFIG_REG = AWDCH_CHN_3<<5*OFFSET;
 8000a3e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000a40:	4613      	mov	r3, r2
 8000a42:	009b      	lsls	r3, r3, #2
 8000a44:	4413      	add	r3, r2
 8000a46:	2203      	movs	r2, #3
 8000a48:	409a      	lsls	r2, r3
 8000a4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a4c:	601a      	str	r2, [r3, #0]
			Channel->Init.Instance->SMPR2 = (Channel->Sample_Time[POS]<<9);
 8000a4e:	78fa      	ldrb	r2, [r7, #3]
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	3202      	adds	r2, #2
 8000a54:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000a5e:	0252      	lsls	r2, r2, #9
 8000a60:	611a      	str	r2, [r3, #16]
			GPIO_IN.PIN = GPIO_PIN_3;
 8000a62:	2303      	movs	r3, #3
 8000a64:	617b      	str	r3, [r7, #20]
			HAL_Init_PIN(GPIOA,&GPIO_IN);
 8000a66:	f107 030c 	add.w	r3, r7, #12
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	488d      	ldr	r0, [pc, #564]	; (8000ca4 <HAL_ADC_MULTCHN_SET+0x49c>)
 8000a6e:	f000 fa8f 	bl	8000f90 <HAL_Init_PIN>
			break;
 8000a72:	e112      	b.n	8000c9a <HAL_ADC_MULTCHN_SET+0x492>
			*CONFIG_REG = AWDCH_CHN_4<<5*OFFSET;
 8000a74:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000a76:	4613      	mov	r3, r2
 8000a78:	009b      	lsls	r3, r3, #2
 8000a7a:	4413      	add	r3, r2
 8000a7c:	2204      	movs	r2, #4
 8000a7e:	409a      	lsls	r2, r3
 8000a80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a82:	601a      	str	r2, [r3, #0]
			Channel->Init.Instance->SMPR2 = (Channel->Sample_Time[POS]<<12);
 8000a84:	78fa      	ldrb	r2, [r7, #3]
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	3202      	adds	r2, #2
 8000a8a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000a94:	0312      	lsls	r2, r2, #12
 8000a96:	611a      	str	r2, [r3, #16]
			GPIO_IN.PIN = GPIO_PIN_4;
 8000a98:	2304      	movs	r3, #4
 8000a9a:	617b      	str	r3, [r7, #20]
			HAL_Init_PIN(GPIOA,&GPIO_IN);
 8000a9c:	f107 030c 	add.w	r3, r7, #12
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4880      	ldr	r0, [pc, #512]	; (8000ca4 <HAL_ADC_MULTCHN_SET+0x49c>)
 8000aa4:	f000 fa74 	bl	8000f90 <HAL_Init_PIN>
			break;
 8000aa8:	e0f7      	b.n	8000c9a <HAL_ADC_MULTCHN_SET+0x492>
			*CONFIG_REG = AWDCH_CHN_5<<5*OFFSET;
 8000aaa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000aac:	4613      	mov	r3, r2
 8000aae:	009b      	lsls	r3, r3, #2
 8000ab0:	4413      	add	r3, r2
 8000ab2:	2205      	movs	r2, #5
 8000ab4:	409a      	lsls	r2, r3
 8000ab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ab8:	601a      	str	r2, [r3, #0]
			Channel->Init.Instance->SMPR2 = (Channel->Sample_Time[POS]<<15);
 8000aba:	78fa      	ldrb	r2, [r7, #3]
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	3202      	adds	r2, #2
 8000ac0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000aca:	03d2      	lsls	r2, r2, #15
 8000acc:	611a      	str	r2, [r3, #16]
			GPIO_IN.PIN = GPIO_PIN_5;
 8000ace:	2305      	movs	r3, #5
 8000ad0:	617b      	str	r3, [r7, #20]
			HAL_Init_PIN(GPIOA,&GPIO_IN);
 8000ad2:	f107 030c 	add.w	r3, r7, #12
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	4872      	ldr	r0, [pc, #456]	; (8000ca4 <HAL_ADC_MULTCHN_SET+0x49c>)
 8000ada:	f000 fa59 	bl	8000f90 <HAL_Init_PIN>
			break;
 8000ade:	e0dc      	b.n	8000c9a <HAL_ADC_MULTCHN_SET+0x492>
			*CONFIG_REG = AWDCH_CHN_6<<5*OFFSET;
 8000ae0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000ae2:	4613      	mov	r3, r2
 8000ae4:	009b      	lsls	r3, r3, #2
 8000ae6:	4413      	add	r3, r2
 8000ae8:	2206      	movs	r2, #6
 8000aea:	409a      	lsls	r2, r3
 8000aec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000aee:	601a      	str	r2, [r3, #0]
			Channel->Init.Instance->SMPR2 = (Channel->Sample_Time[POS]<<18);
 8000af0:	78fa      	ldrb	r2, [r7, #3]
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	3202      	adds	r2, #2
 8000af6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000b00:	0492      	lsls	r2, r2, #18
 8000b02:	611a      	str	r2, [r3, #16]
			GPIO_IN.PIN = GPIO_PIN_6;
 8000b04:	2306      	movs	r3, #6
 8000b06:	617b      	str	r3, [r7, #20]
			HAL_Init_PIN(GPIOA,&GPIO_IN);
 8000b08:	f107 030c 	add.w	r3, r7, #12
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	4865      	ldr	r0, [pc, #404]	; (8000ca4 <HAL_ADC_MULTCHN_SET+0x49c>)
 8000b10:	f000 fa3e 	bl	8000f90 <HAL_Init_PIN>
			break;
 8000b14:	e0c1      	b.n	8000c9a <HAL_ADC_MULTCHN_SET+0x492>
			*CONFIG_REG = AWDCH_CHN_7<<5*OFFSET;
 8000b16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000b18:	4613      	mov	r3, r2
 8000b1a:	009b      	lsls	r3, r3, #2
 8000b1c:	4413      	add	r3, r2
 8000b1e:	2207      	movs	r2, #7
 8000b20:	409a      	lsls	r2, r3
 8000b22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b24:	601a      	str	r2, [r3, #0]
			Channel->Init.Instance->SMPR2 = (Channel->Sample_Time[POS]<<21);
 8000b26:	78fa      	ldrb	r2, [r7, #3]
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	3202      	adds	r2, #2
 8000b2c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000b36:	0552      	lsls	r2, r2, #21
 8000b38:	611a      	str	r2, [r3, #16]
			GPIO_IN.PIN = GPIO_PIN_7;
 8000b3a:	2307      	movs	r3, #7
 8000b3c:	617b      	str	r3, [r7, #20]
			HAL_Init_PIN(GPIOA,&GPIO_IN);
 8000b3e:	f107 030c 	add.w	r3, r7, #12
 8000b42:	4619      	mov	r1, r3
 8000b44:	4857      	ldr	r0, [pc, #348]	; (8000ca4 <HAL_ADC_MULTCHN_SET+0x49c>)
 8000b46:	f000 fa23 	bl	8000f90 <HAL_Init_PIN>
			break;
 8000b4a:	e0a6      	b.n	8000c9a <HAL_ADC_MULTCHN_SET+0x492>
			*CONFIG_REG = AWDCH_CHN_8<<5*OFFSET;
 8000b4c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000b4e:	4613      	mov	r3, r2
 8000b50:	009b      	lsls	r3, r3, #2
 8000b52:	4413      	add	r3, r2
 8000b54:	2208      	movs	r2, #8
 8000b56:	409a      	lsls	r2, r3
 8000b58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b5a:	601a      	str	r2, [r3, #0]
			Channel->Init.Instance->SMPR2 = (Channel->Sample_Time[POS]<<24);
 8000b5c:	78fa      	ldrb	r2, [r7, #3]
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	3202      	adds	r2, #2
 8000b62:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000b6c:	0612      	lsls	r2, r2, #24
 8000b6e:	611a      	str	r2, [r3, #16]
			GPIO_IN.PIN = GPIO_PIN_0;
 8000b70:	2300      	movs	r3, #0
 8000b72:	617b      	str	r3, [r7, #20]
			HAL_Init_PIN(GPIOB,&GPIO_IN);
 8000b74:	f107 030c 	add.w	r3, r7, #12
 8000b78:	4619      	mov	r1, r3
 8000b7a:	484b      	ldr	r0, [pc, #300]	; (8000ca8 <HAL_ADC_MULTCHN_SET+0x4a0>)
 8000b7c:	f000 fa08 	bl	8000f90 <HAL_Init_PIN>
			break;
 8000b80:	e08b      	b.n	8000c9a <HAL_ADC_MULTCHN_SET+0x492>
			*CONFIG_REG = AWDCH_CHN_9<<5*OFFSET;
 8000b82:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000b84:	4613      	mov	r3, r2
 8000b86:	009b      	lsls	r3, r3, #2
 8000b88:	4413      	add	r3, r2
 8000b8a:	2209      	movs	r2, #9
 8000b8c:	409a      	lsls	r2, r3
 8000b8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b90:	601a      	str	r2, [r3, #0]
			Channel->Init.Instance->SMPR2 = (Channel->Sample_Time[POS]<<27);
 8000b92:	78fa      	ldrb	r2, [r7, #3]
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	3202      	adds	r2, #2
 8000b98:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000ba2:	06d2      	lsls	r2, r2, #27
 8000ba4:	611a      	str	r2, [r3, #16]
			GPIO_IN.PIN = GPIO_PIN_1;
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	617b      	str	r3, [r7, #20]
			HAL_Init_PIN(GPIOB,&GPIO_IN);
 8000baa:	f107 030c 	add.w	r3, r7, #12
 8000bae:	4619      	mov	r1, r3
 8000bb0:	483d      	ldr	r0, [pc, #244]	; (8000ca8 <HAL_ADC_MULTCHN_SET+0x4a0>)
 8000bb2:	f000 f9ed 	bl	8000f90 <HAL_Init_PIN>
			break;
 8000bb6:	e070      	b.n	8000c9a <HAL_ADC_MULTCHN_SET+0x492>
			*CONFIG_REG = AWDCH_CHN_10<<5*OFFSET;
 8000bb8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000bba:	4613      	mov	r3, r2
 8000bbc:	009b      	lsls	r3, r3, #2
 8000bbe:	4413      	add	r3, r2
 8000bc0:	220a      	movs	r2, #10
 8000bc2:	409a      	lsls	r2, r3
 8000bc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bc6:	601a      	str	r2, [r3, #0]
			Channel->Init.Instance->SMPR1 = (Channel->Sample_Time[POS]<<0);
 8000bc8:	78f9      	ldrb	r1, [r7, #3]
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000bd0:	687a      	ldr	r2, [r7, #4]
 8000bd2:	3102      	adds	r1, #2
 8000bd4:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8000bd8:	60da      	str	r2, [r3, #12]
			break;
 8000bda:	e05e      	b.n	8000c9a <HAL_ADC_MULTCHN_SET+0x492>
			*CONFIG_REG = AWDCH_CHN_11<<5*OFFSET;
 8000bdc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000bde:	4613      	mov	r3, r2
 8000be0:	009b      	lsls	r3, r3, #2
 8000be2:	4413      	add	r3, r2
 8000be4:	220b      	movs	r2, #11
 8000be6:	409a      	lsls	r2, r3
 8000be8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bea:	601a      	str	r2, [r3, #0]
			Channel->Init.Instance->SMPR1 = (Channel->Sample_Time[POS]<<3);
 8000bec:	78fa      	ldrb	r2, [r7, #3]
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	3202      	adds	r2, #2
 8000bf2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000bfc:	00d2      	lsls	r2, r2, #3
 8000bfe:	60da      	str	r2, [r3, #12]
			break;
 8000c00:	e04b      	b.n	8000c9a <HAL_ADC_MULTCHN_SET+0x492>
			*CONFIG_REG = AWDCH_CHN_12<<5*OFFSET;
 8000c02:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000c04:	4613      	mov	r3, r2
 8000c06:	009b      	lsls	r3, r3, #2
 8000c08:	4413      	add	r3, r2
 8000c0a:	220c      	movs	r2, #12
 8000c0c:	409a      	lsls	r2, r3
 8000c0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c10:	601a      	str	r2, [r3, #0]
			Channel->Init.Instance->SMPR1 = (Channel->Sample_Time[POS]<<6);
 8000c12:	78fa      	ldrb	r2, [r7, #3]
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	3202      	adds	r2, #2
 8000c18:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000c22:	0192      	lsls	r2, r2, #6
 8000c24:	60da      	str	r2, [r3, #12]
			break;
 8000c26:	e038      	b.n	8000c9a <HAL_ADC_MULTCHN_SET+0x492>
			*CONFIG_REG = AWDCH_CHN_13<<5*OFFSET;
 8000c28:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000c2a:	4613      	mov	r3, r2
 8000c2c:	009b      	lsls	r3, r3, #2
 8000c2e:	4413      	add	r3, r2
 8000c30:	220d      	movs	r2, #13
 8000c32:	409a      	lsls	r2, r3
 8000c34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c36:	601a      	str	r2, [r3, #0]
			Channel->Init.Instance->SMPR1 = (Channel->Sample_Time[POS]<<9);
 8000c38:	78fa      	ldrb	r2, [r7, #3]
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	3202      	adds	r2, #2
 8000c3e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000c48:	0252      	lsls	r2, r2, #9
 8000c4a:	60da      	str	r2, [r3, #12]
			break;
 8000c4c:	e025      	b.n	8000c9a <HAL_ADC_MULTCHN_SET+0x492>
			*CONFIG_REG = AWDCH_CHN_14<<5*OFFSET;
 8000c4e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000c50:	4613      	mov	r3, r2
 8000c52:	009b      	lsls	r3, r3, #2
 8000c54:	4413      	add	r3, r2
 8000c56:	220e      	movs	r2, #14
 8000c58:	409a      	lsls	r2, r3
 8000c5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c5c:	601a      	str	r2, [r3, #0]
			Channel->Init.Instance->SMPR1 = (Channel->Sample_Time[POS]<<12);
 8000c5e:	78fa      	ldrb	r2, [r7, #3]
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	3202      	adds	r2, #2
 8000c64:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000c6e:	0312      	lsls	r2, r2, #12
 8000c70:	60da      	str	r2, [r3, #12]
			break;
 8000c72:	e012      	b.n	8000c9a <HAL_ADC_MULTCHN_SET+0x492>
			*CONFIG_REG  = AWDCH_CHN_15<<5*OFFSET;
 8000c74:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000c76:	4613      	mov	r3, r2
 8000c78:	009b      	lsls	r3, r3, #2
 8000c7a:	4413      	add	r3, r2
 8000c7c:	220f      	movs	r2, #15
 8000c7e:	409a      	lsls	r2, r3
 8000c80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c82:	601a      	str	r2, [r3, #0]
			Channel->Init.Instance->SMPR1 = (Channel->Sample_Time[POS]<<15);
 8000c84:	78fa      	ldrb	r2, [r7, #3]
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	3202      	adds	r2, #2
 8000c8a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000c94:	03d2      	lsls	r2, r2, #15
 8000c96:	60da      	str	r2, [r3, #12]
			break;
 8000c98:	bf00      	nop
}
 8000c9a:	bf00      	nop
 8000c9c:	3730      	adds	r7, #48	; 0x30
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	40010800 	.word	0x40010800
 8000ca8:	40010c00 	.word	0x40010c00

08000cac <HAL_SHN_Init>:


static void HAL_SHN_Init(ADC_CH_t *Channel)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
	if( Channel != NULL)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d038      	beq.n	8000d2c <HAL_SHN_Init+0x80>
	{
		/**Single Channel Initilization **/
		if(Channel->Instance==ADC1)
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	4a1d      	ldr	r2, [pc, #116]	; (8000d34 <HAL_SHN_Init+0x88>)
 8000cc0:	4293      	cmp	r3, r2
 8000cc2:	d106      	bne.n	8000cd2 <HAL_SHN_Init+0x26>
			HAL_RCC_ADC1_EN();
 8000cc4:	4b1c      	ldr	r3, [pc, #112]	; (8000d38 <HAL_SHN_Init+0x8c>)
 8000cc6:	699b      	ldr	r3, [r3, #24]
 8000cc8:	4a1b      	ldr	r2, [pc, #108]	; (8000d38 <HAL_SHN_Init+0x8c>)
 8000cca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cce:	6193      	str	r3, [r2, #24]
 8000cd0:	e00a      	b.n	8000ce8 <HAL_SHN_Init+0x3c>
		else if(Channel->Instance==ADC2)
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	4a19      	ldr	r2, [pc, #100]	; (8000d3c <HAL_SHN_Init+0x90>)
 8000cd8:	4293      	cmp	r3, r2
 8000cda:	d105      	bne.n	8000ce8 <HAL_SHN_Init+0x3c>
			HAL_RCC_ADC2_EN();
 8000cdc:	4b16      	ldr	r3, [pc, #88]	; (8000d38 <HAL_SHN_Init+0x8c>)
 8000cde:	699b      	ldr	r3, [r3, #24]
 8000ce0:	4a15      	ldr	r2, [pc, #84]	; (8000d38 <HAL_SHN_Init+0x8c>)
 8000ce2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ce6:	6193      	str	r3, [r2, #24]

		/*Set the number of conversions to one */
		Channel->Instance->SQR1 = (0x00000000UL<<20);
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	2200      	movs	r2, #0
 8000cee:	62da      	str	r2, [r3, #44]	; 0x2c

		/*Select a certain channel */
		HAL_ADC_CHN_SET(Channel);
 8000cf0:	6878      	ldr	r0, [r7, #4]
 8000cf2:	f7ff fb83 	bl	80003fc <HAL_ADC_CHN_SET>
		/*Set up Allignment of channel*/
		HAL_SHN_ALLGN_SET(Channel);
 8000cf6:	6878      	ldr	r0, [r7, #4]
 8000cf8:	f7ff fd64 	bl	80007c4 <HAL_SHN_ALLGN_SET>

		/*Clear the Bit responsible for continous conv*/
		Channel->Instance->CR2 &= SINGLE_CONV;
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	689a      	ldr	r2, [r3, #8]
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	f022 0202 	bic.w	r2, r2, #2
 8000d0a:	609a      	str	r2, [r3, #8]
		/*Turn on ADC */
		Channel->Instance->CR2 |= ADON_ON;
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	689a      	ldr	r2, [r3, #8]
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	f042 0201 	orr.w	r2, r2, #1
 8000d1a:	609a      	str	r2, [r3, #8]
		/*Start Conversion */
		Channel->Instance->CR2 |= ADON_ON;
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	689a      	ldr	r2, [r3, #8]
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	f042 0201 	orr.w	r2, r2, #1
 8000d2a:	609a      	str	r2, [r3, #8]
	}
}
 8000d2c:	bf00      	nop
 8000d2e:	3708      	adds	r7, #8
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	40012400 	.word	0x40012400
 8000d38:	40021000 	.word	0x40021000
 8000d3c:	40012800 	.word	0x40012800

08000d40 <HAL_MULT_SING_Init>:


static void HAL_MULT_SING_Init(ADC_init_t *ADC)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b084      	sub	sp, #16
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
	if(ADC != NULL)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d05b      	beq.n	8000e06 <HAL_MULT_SING_Init+0xc6>
	{
		/*---------Enable RCC PERIPH CLK--------*/
		if (ADC->Init.Instance == ADC1)
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000d54:	4a2e      	ldr	r2, [pc, #184]	; (8000e10 <HAL_MULT_SING_Init+0xd0>)
 8000d56:	4293      	cmp	r3, r2
 8000d58:	d106      	bne.n	8000d68 <HAL_MULT_SING_Init+0x28>
			HAL_RCC_ADC1_EN();
 8000d5a:	4b2e      	ldr	r3, [pc, #184]	; (8000e14 <HAL_MULT_SING_Init+0xd4>)
 8000d5c:	699b      	ldr	r3, [r3, #24]
 8000d5e:	4a2d      	ldr	r2, [pc, #180]	; (8000e14 <HAL_MULT_SING_Init+0xd4>)
 8000d60:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d64:	6193      	str	r3, [r2, #24]
 8000d66:	e00b      	b.n	8000d80 <HAL_MULT_SING_Init+0x40>
		else if (ADC->Init.Instance == ADC2)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000d6e:	4a2a      	ldr	r2, [pc, #168]	; (8000e18 <HAL_MULT_SING_Init+0xd8>)
 8000d70:	4293      	cmp	r3, r2
 8000d72:	d105      	bne.n	8000d80 <HAL_MULT_SING_Init+0x40>
			HAL_RCC_ADC2_EN();
 8000d74:	4b27      	ldr	r3, [pc, #156]	; (8000e14 <HAL_MULT_SING_Init+0xd4>)
 8000d76:	699b      	ldr	r3, [r3, #24]
 8000d78:	4a26      	ldr	r2, [pc, #152]	; (8000e14 <HAL_MULT_SING_Init+0xd4>)
 8000d7a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d7e:	6193      	str	r3, [r2, #24]
		/*---------DMA Enable---------------*/
		ADC->Init.Instance->CR2 |= DMA_EN_MSK;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000d86:	689a      	ldr	r2, [r3, #8]
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000d8e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000d92:	609a      	str	r2, [r3, #8]

		/*----------Multiple Channels Selected Init-------*/
		uint8_t Channel_Cnt=0;
 8000d94:	2300      	movs	r3, #0
 8000d96:	73fb      	strb	r3, [r7, #15]
		for(Channel_Cnt=0;Channel_Cnt<=ADC->NO_channels-1;Channel_Cnt++)
 8000d98:	2300      	movs	r3, #0
 8000d9a:	73fb      	strb	r3, [r7, #15]
 8000d9c:	e007      	b.n	8000dae <HAL_MULT_SING_Init+0x6e>
		{
			HAL_ADC_MULTCHN_SET(ADC,Channel_Cnt);
 8000d9e:	7bfb      	ldrb	r3, [r7, #15]
 8000da0:	4619      	mov	r1, r3
 8000da2:	6878      	ldr	r0, [r7, #4]
 8000da4:	f7ff fd30 	bl	8000808 <HAL_ADC_MULTCHN_SET>
		for(Channel_Cnt=0;Channel_Cnt<=ADC->NO_channels-1;Channel_Cnt++)
 8000da8:	7bfb      	ldrb	r3, [r7, #15]
 8000daa:	3301      	adds	r3, #1
 8000dac:	73fb      	strb	r3, [r7, #15]
 8000dae:	7bfa      	ldrb	r2, [r7, #15]
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	685b      	ldr	r3, [r3, #4]
 8000db4:	3b01      	subs	r3, #1
 8000db6:	429a      	cmp	r2, r3
 8000db8:	d9f1      	bls.n	8000d9e <HAL_MULT_SING_Init+0x5e>
		}
		ADC->Init.Instance->SQR1=((ADC->NO_channels-1)<<20U);
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	685b      	ldr	r3, [r3, #4]
 8000dbe:	1e5a      	subs	r2, r3, #1
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000dc6:	0512      	lsls	r2, r2, #20
 8000dc8:	62da      	str	r2, [r3, #44]	; 0x2c
		/*Clear the Bit responsible for continous conv*/
		ADC->Init.Instance->CR2 &= SINGLE_CONV;
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000dd0:	689a      	ldr	r2, [r3, #8]
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000dd8:	f022 0202 	bic.w	r2, r2, #2
 8000ddc:	609a      	str	r2, [r3, #8]
		/*Turn on ADC */
		ADC->Init.Instance->CR2 |= ADON_ON;
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000de4:	689a      	ldr	r2, [r3, #8]
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000dec:	f042 0201 	orr.w	r2, r2, #1
 8000df0:	609a      	str	r2, [r3, #8]
		/*Start Conversion */
		ADC->Init.Instance->CR2|= ADON_ON;
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000df8:	689a      	ldr	r2, [r3, #8]
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000e00:	f042 0201 	orr.w	r2, r2, #1
 8000e04:	609a      	str	r2, [r3, #8]
	}
}
 8000e06:	bf00      	nop
 8000e08:	3710      	adds	r7, #16
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	40012400 	.word	0x40012400
 8000e14:	40021000 	.word	0x40021000
 8000e18:	40012800 	.word	0x40012800

08000e1c <HAL_ADC_READ_INT>:
	return RET;
}
#endif

uint16_t HAL_ADC_READ_INT(ADC_TypeDef *Instance,uint8_t Flag,uint32_t ALLIGN)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b087      	sub	sp, #28
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	60f8      	str	r0, [r7, #12]
 8000e24:	460b      	mov	r3, r1
 8000e26:	607a      	str	r2, [r7, #4]
 8000e28:	72fb      	strb	r3, [r7, #11]
	uint16_t RET=0;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	82fb      	strh	r3, [r7, #22]
	if (Flag == HAL_ADC_SING_FLAG)
 8000e2e:	7afb      	ldrb	r3, [r7, #11]
 8000e30:	2b01      	cmp	r3, #1
 8000e32:	d105      	bne.n	8000e40 <HAL_ADC_READ_INT+0x24>
		Instance->CR2 |= ADON_ON;
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	689b      	ldr	r3, [r3, #8]
 8000e38:	f043 0201 	orr.w	r2, r3, #1
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	609a      	str	r2, [r3, #8]
	else if (Flag == HAL_ADC_CONT_FLAG) {
	}
	RET = (Instance->DR & 0xFFFF);
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e44:	82fb      	strh	r3, [r7, #22]
	switch (ALLIGN) {
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d002      	beq.n	8000e52 <HAL_ADC_READ_INT+0x36>
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	2b01      	cmp	r3, #1
		case HAL_ADC_ALLIGNMENT_LEFT:
			RET = (RET >> 4);
			break;
		case HAL_ADC_ALLIGNMENT_RIGHT:
			break;
 8000e50:	e003      	b.n	8000e5a <HAL_ADC_READ_INT+0x3e>
			RET = (RET >> 4);
 8000e52:	8afb      	ldrh	r3, [r7, #22]
 8000e54:	091b      	lsrs	r3, r3, #4
 8000e56:	82fb      	strh	r3, [r7, #22]
			break;
 8000e58:	bf00      	nop
	}
	return RET;
 8000e5a:	8afb      	ldrh	r3, [r7, #22]
}
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	371c      	adds	r7, #28
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bc80      	pop	{r7}
 8000e64:	4770      	bx	lr
	...

08000e68 <ADC1_2_IRQHandler>:
}
#endif

#if HAL_ADC_INT_EN == EN
void ADC1_2_IRQHandler(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0
	if(ADC1->SR & (1<<HAL_ADC_EOC))
 8000e6c:	4b0a      	ldr	r3, [pc, #40]	; (8000e98 <ADC1_2_IRQHandler+0x30>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	f003 0302 	and.w	r3, r3, #2
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d00c      	beq.n	8000e92 <ADC1_2_IRQHandler+0x2a>
	{
		ADC1->SR &= (~(1<<HAL_ADC_EOC));
 8000e78:	4b07      	ldr	r3, [pc, #28]	; (8000e98 <ADC1_2_IRQHandler+0x30>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4a06      	ldr	r2, [pc, #24]	; (8000e98 <ADC1_2_IRQHandler+0x30>)
 8000e7e:	f023 0302 	bic.w	r3, r3, #2
 8000e82:	6013      	str	r3, [r2, #0]
		if(ADC_CALLBACK_)
 8000e84:	4b05      	ldr	r3, [pc, #20]	; (8000e9c <ADC1_2_IRQHandler+0x34>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d002      	beq.n	8000e92 <ADC1_2_IRQHandler+0x2a>
			ADC_CALLBACK_();
 8000e8c:	4b03      	ldr	r3, [pc, #12]	; (8000e9c <ADC1_2_IRQHandler+0x34>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	4798      	blx	r3
	}
}
 8000e92:	bf00      	nop
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	40012400 	.word	0x40012400
 8000e9c:	200000c4 	.word	0x200000c4

08000ea0 <__NVIC_EnableIRQ>:
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b083      	sub	sp, #12
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	db0b      	blt.n	8000eca <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000eb2:	79fb      	ldrb	r3, [r7, #7]
 8000eb4:	f003 021f 	and.w	r2, r3, #31
 8000eb8:	4906      	ldr	r1, [pc, #24]	; (8000ed4 <__NVIC_EnableIRQ+0x34>)
 8000eba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ebe:	095b      	lsrs	r3, r3, #5
 8000ec0:	2001      	movs	r0, #1
 8000ec2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ec6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000eca:	bf00      	nop
 8000ecc:	370c      	adds	r7, #12
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bc80      	pop	{r7}
 8000ed2:	4770      	bx	lr
 8000ed4:	e000e100 	.word	0xe000e100

08000ed8 <AFIO_CONFIG>:
#endif

/*Will be updated With Interrupts Soon*/

static void AFIO_CONFIG(GPIO_TypeDef *GPIO_PORT ,uint8_t ORD,uint8_t SH)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b083      	sub	sp, #12
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
 8000ee0:	460b      	mov	r3, r1
 8000ee2:	70fb      	strb	r3, [r7, #3]
 8000ee4:	4613      	mov	r3, r2
 8000ee6:	70bb      	strb	r3, [r7, #2]
	if (GPIO_PORT == GPIOA) {
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	4a23      	ldr	r2, [pc, #140]	; (8000f78 <AFIO_CONFIG+0xa0>)
 8000eec:	4293      	cmp	r3, r2
 8000eee:	d106      	bne.n	8000efe <AFIO_CONFIG+0x26>
		AFIO->EXTICR[ORD] = (0b000) << SH;
 8000ef0:	4a22      	ldr	r2, [pc, #136]	; (8000f7c <AFIO_CONFIG+0xa4>)
 8000ef2:	78fb      	ldrb	r3, [r7, #3]
 8000ef4:	3302      	adds	r3, #2
 8000ef6:	2100      	movs	r1, #0
 8000ef8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	} else if (GPIO_PORT == GPIOD) {
		AFIO->EXTICR[ORD] = (0b011) << SH;
	} else if (GPIO_PORT == GPIOE) {
		AFIO->EXTICR[ORD] = (0b100) << SH;
	} else {}
}
 8000efc:	e036      	b.n	8000f6c <AFIO_CONFIG+0x94>
	} else if (GPIO_PORT == GPIOB) {
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	4a1f      	ldr	r2, [pc, #124]	; (8000f80 <AFIO_CONFIG+0xa8>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d109      	bne.n	8000f1a <AFIO_CONFIG+0x42>
		AFIO->EXTICR[ORD] = (0b001) << SH;
 8000f06:	78bb      	ldrb	r3, [r7, #2]
 8000f08:	2201      	movs	r2, #1
 8000f0a:	fa02 f103 	lsl.w	r1, r2, r3
 8000f0e:	4a1b      	ldr	r2, [pc, #108]	; (8000f7c <AFIO_CONFIG+0xa4>)
 8000f10:	78fb      	ldrb	r3, [r7, #3]
 8000f12:	3302      	adds	r3, #2
 8000f14:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000f18:	e028      	b.n	8000f6c <AFIO_CONFIG+0x94>
	} else if (GPIO_PORT == GPIOC) {
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	4a19      	ldr	r2, [pc, #100]	; (8000f84 <AFIO_CONFIG+0xac>)
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	d109      	bne.n	8000f36 <AFIO_CONFIG+0x5e>
		AFIO->EXTICR[ORD] = (0b010) << SH;
 8000f22:	78bb      	ldrb	r3, [r7, #2]
 8000f24:	2202      	movs	r2, #2
 8000f26:	fa02 f103 	lsl.w	r1, r2, r3
 8000f2a:	4a14      	ldr	r2, [pc, #80]	; (8000f7c <AFIO_CONFIG+0xa4>)
 8000f2c:	78fb      	ldrb	r3, [r7, #3]
 8000f2e:	3302      	adds	r3, #2
 8000f30:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000f34:	e01a      	b.n	8000f6c <AFIO_CONFIG+0x94>
	} else if (GPIO_PORT == GPIOD) {
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	4a13      	ldr	r2, [pc, #76]	; (8000f88 <AFIO_CONFIG+0xb0>)
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	d109      	bne.n	8000f52 <AFIO_CONFIG+0x7a>
		AFIO->EXTICR[ORD] = (0b011) << SH;
 8000f3e:	78bb      	ldrb	r3, [r7, #2]
 8000f40:	2203      	movs	r2, #3
 8000f42:	fa02 f103 	lsl.w	r1, r2, r3
 8000f46:	4a0d      	ldr	r2, [pc, #52]	; (8000f7c <AFIO_CONFIG+0xa4>)
 8000f48:	78fb      	ldrb	r3, [r7, #3]
 8000f4a:	3302      	adds	r3, #2
 8000f4c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000f50:	e00c      	b.n	8000f6c <AFIO_CONFIG+0x94>
	} else if (GPIO_PORT == GPIOE) {
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	4a0d      	ldr	r2, [pc, #52]	; (8000f8c <AFIO_CONFIG+0xb4>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d108      	bne.n	8000f6c <AFIO_CONFIG+0x94>
		AFIO->EXTICR[ORD] = (0b100) << SH;
 8000f5a:	78bb      	ldrb	r3, [r7, #2]
 8000f5c:	2204      	movs	r2, #4
 8000f5e:	fa02 f103 	lsl.w	r1, r2, r3
 8000f62:	4a06      	ldr	r2, [pc, #24]	; (8000f7c <AFIO_CONFIG+0xa4>)
 8000f64:	78fb      	ldrb	r3, [r7, #3]
 8000f66:	3302      	adds	r3, #2
 8000f68:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000f6c:	bf00      	nop
 8000f6e:	370c      	adds	r7, #12
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bc80      	pop	{r7}
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop
 8000f78:	40010800 	.word	0x40010800
 8000f7c:	40010000 	.word	0x40010000
 8000f80:	40010c00 	.word	0x40010c00
 8000f84:	40011000 	.word	0x40011000
 8000f88:	40011400 	.word	0x40011400
 8000f8c:	40011800 	.word	0x40011800

08000f90 <HAL_Init_PIN>:

void HAL_Init_PIN(GPIO_TypeDef *GPIO_PORT,GPIO_t *GPIO_PIN)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b086      	sub	sp, #24
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
 8000f98:	6039      	str	r1, [r7, #0]
	uint32_t Pin_Number=((uint32_t)GPIO_PIN->PIN);
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	689b      	ldr	r3, [r3, #8]
 8000f9e:	613b      	str	r3, [r7, #16]
	uint32_t REG_VAL=0x00;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	617b      	str	r3, [r7, #20]
	volatile uint32_t *CONFIG_REG=NULL;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	60fb      	str	r3, [r7, #12]
	uint32_t RegisterOffset=0x00;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	60bb      	str	r3, [r7, #8]

	/*Enable Perripheral CLK through RCC Registers*/

	if(GPIO_PORT==GPIOA)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	4a86      	ldr	r2, [pc, #536]	; (80011c8 <HAL_Init_PIN+0x238>)
 8000fb0:	4293      	cmp	r3, r2
 8000fb2:	d106      	bne.n	8000fc2 <HAL_Init_PIN+0x32>
	{
		__HAL_RCC_GPIOA_EN();
 8000fb4:	4b85      	ldr	r3, [pc, #532]	; (80011cc <HAL_Init_PIN+0x23c>)
 8000fb6:	699b      	ldr	r3, [r3, #24]
 8000fb8:	4a84      	ldr	r2, [pc, #528]	; (80011cc <HAL_Init_PIN+0x23c>)
 8000fba:	f043 0304 	orr.w	r3, r3, #4
 8000fbe:	6193      	str	r3, [r2, #24]
 8000fc0:	e02a      	b.n	8001018 <HAL_Init_PIN+0x88>
	}else if(GPIO_PORT==GPIOB)
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	4a82      	ldr	r2, [pc, #520]	; (80011d0 <HAL_Init_PIN+0x240>)
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d106      	bne.n	8000fd8 <HAL_Init_PIN+0x48>
	{
		__HAL_RCC_GPIOB_EN();
 8000fca:	4b80      	ldr	r3, [pc, #512]	; (80011cc <HAL_Init_PIN+0x23c>)
 8000fcc:	699b      	ldr	r3, [r3, #24]
 8000fce:	4a7f      	ldr	r2, [pc, #508]	; (80011cc <HAL_Init_PIN+0x23c>)
 8000fd0:	f043 0308 	orr.w	r3, r3, #8
 8000fd4:	6193      	str	r3, [r2, #24]
 8000fd6:	e01f      	b.n	8001018 <HAL_Init_PIN+0x88>
	}else if(GPIO_PORT==GPIOC)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	4a7e      	ldr	r2, [pc, #504]	; (80011d4 <HAL_Init_PIN+0x244>)
 8000fdc:	4293      	cmp	r3, r2
 8000fde:	d106      	bne.n	8000fee <HAL_Init_PIN+0x5e>
	{
		__HAL_RCC_GPIOC_EN();
 8000fe0:	4b7a      	ldr	r3, [pc, #488]	; (80011cc <HAL_Init_PIN+0x23c>)
 8000fe2:	699b      	ldr	r3, [r3, #24]
 8000fe4:	4a79      	ldr	r2, [pc, #484]	; (80011cc <HAL_Init_PIN+0x23c>)
 8000fe6:	f043 0310 	orr.w	r3, r3, #16
 8000fea:	6193      	str	r3, [r2, #24]
 8000fec:	e014      	b.n	8001018 <HAL_Init_PIN+0x88>
	}else if(GPIO_PORT==GPIOD)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	4a79      	ldr	r2, [pc, #484]	; (80011d8 <HAL_Init_PIN+0x248>)
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d106      	bne.n	8001004 <HAL_Init_PIN+0x74>
	{
		__HAL_RCC_GPIOD_EN();
 8000ff6:	4b75      	ldr	r3, [pc, #468]	; (80011cc <HAL_Init_PIN+0x23c>)
 8000ff8:	699b      	ldr	r3, [r3, #24]
 8000ffa:	4a74      	ldr	r2, [pc, #464]	; (80011cc <HAL_Init_PIN+0x23c>)
 8000ffc:	f043 0320 	orr.w	r3, r3, #32
 8001000:	6193      	str	r3, [r2, #24]
 8001002:	e009      	b.n	8001018 <HAL_Init_PIN+0x88>
	}else if(GPIO_PORT==GPIOE)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	4a75      	ldr	r2, [pc, #468]	; (80011dc <HAL_Init_PIN+0x24c>)
 8001008:	4293      	cmp	r3, r2
 800100a:	d105      	bne.n	8001018 <HAL_Init_PIN+0x88>
	{
		__HAL_RCC_GPIOE_EN();
 800100c:	4b6f      	ldr	r3, [pc, #444]	; (80011cc <HAL_Init_PIN+0x23c>)
 800100e:	699b      	ldr	r3, [r3, #24]
 8001010:	4a6e      	ldr	r2, [pc, #440]	; (80011cc <HAL_Init_PIN+0x23c>)
 8001012:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001016:	6193      	str	r3, [r2, #24]

	}
	/**Set status of PIN*/
	if( Pin_Number >= 0x00U)
	{
		switch(GPIO_PIN->Mode)
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	3b01      	subs	r3, #1
 800101e:	2b05      	cmp	r3, #5
 8001020:	f200 80a8 	bhi.w	8001174 <HAL_Init_PIN+0x1e4>
 8001024:	a201      	add	r2, pc, #4	; (adr r2, 800102c <HAL_Init_PIN+0x9c>)
 8001026:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800102a:	bf00      	nop
 800102c:	08001045 	.word	0x08001045
 8001030:	0800104d 	.word	0x0800104d
 8001034:	08001057 	.word	0x08001057
 8001038:	08001061 	.word	0x08001061
 800103c:	0800106b 	.word	0x0800106b
 8001040:	0800116f 	.word	0x0800116f
		{
			case HAL_GPIO_OUT_PP:
				REG_VAL=HAL_GPIO_OUT_PP_MSK+(GPIO_PIN->SPEED);
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	617b      	str	r3, [r7, #20]
				break;
 800104a:	e094      	b.n	8001176 <HAL_Init_PIN+0x1e6>
			case HAL_GPIO_OUT_OD:
				REG_VAL=HAL_GPIO_OUT_OD_MSK	+(GPIO_PIN->SPEED);
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	3304      	adds	r3, #4
 8001052:	617b      	str	r3, [r7, #20]
				break;
 8001054:	e08f      	b.n	8001176 <HAL_Init_PIN+0x1e6>
			case HAL_GPIO_OUT_ALT_PP:
				REG_VAL=HAL_GPIO_OUT_ALTPP_MSK+(GPIO_PIN->SPEED);
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	3308      	adds	r3, #8
 800105c:	617b      	str	r3, [r7, #20]
				break;
 800105e:	e08a      	b.n	8001176 <HAL_Init_PIN+0x1e6>
			case HAL_GPIO_OUT_ALT_OD:
				REG_VAL=HAL_GPIO_OUT_ALTOD_MSK+(GPIO_PIN->SPEED);
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	330c      	adds	r3, #12
 8001066:	617b      	str	r3, [r7, #20]
				break;
 8001068:	e085      	b.n	8001176 <HAL_Init_PIN+0x1e6>
			case HAL_GPIO_IN:
					switch(GPIO_PIN->PULL)
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	68db      	ldr	r3, [r3, #12]
 800106e:	2b02      	cmp	r3, #2
 8001070:	d016      	beq.n	80010a0 <HAL_Init_PIN+0x110>
 8001072:	2b02      	cmp	r3, #2
 8001074:	d821      	bhi.n	80010ba <HAL_Init_PIN+0x12a>
 8001076:	2b00      	cmp	r3, #0
 8001078:	d002      	beq.n	8001080 <HAL_Init_PIN+0xf0>
 800107a:	2b01      	cmp	r3, #1
 800107c:	d003      	beq.n	8001086 <HAL_Init_PIN+0xf6>
 800107e:	e01c      	b.n	80010ba <HAL_Init_PIN+0x12a>
					{
						case HAL_GPIO_NOPULL:
							REG_VAL=HAL_GPIO_IN_MSK+HAL_GPIO_IN_NO_PULL_MSK;
 8001080:	2304      	movs	r3, #4
 8001082:	617b      	str	r3, [r7, #20]
							break;
 8001084:	e019      	b.n	80010ba <HAL_Init_PIN+0x12a>
						case HAL_GPIO_PULLUP:
							REG_VAL=HAL_GPIO_IN_MSK+HAL_GPIO_IN_PULLD_MSK;
 8001086:	230c      	movs	r3, #12
 8001088:	617b      	str	r3, [r7, #20]
							SET_BIT(GPIO_PORT->BSRR,(uint32_t)GPIO_PIN->PIN);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	691a      	ldr	r2, [r3, #16]
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	689b      	ldr	r3, [r3, #8]
 8001092:	2101      	movs	r1, #1
 8001094:	fa01 f303 	lsl.w	r3, r1, r3
 8001098:	431a      	orrs	r2, r3
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	611a      	str	r2, [r3, #16]
							break;
 800109e:	e00c      	b.n	80010ba <HAL_Init_PIN+0x12a>
						case HAL_GPIO_PULLDOWN:
							REG_VAL=HAL_GPIO_IN_MSK+HAL_GPIO_IN_PULLUP_MSK;
 80010a0:	230c      	movs	r3, #12
 80010a2:	617b      	str	r3, [r7, #20]
							SET_BIT(GPIO_PORT->BRR,(uint32_t)GPIO_PIN->PIN);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	695a      	ldr	r2, [r3, #20]
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	689b      	ldr	r3, [r3, #8]
 80010ac:	2101      	movs	r1, #1
 80010ae:	fa01 f303 	lsl.w	r3, r1, r3
 80010b2:	431a      	orrs	r2, r3
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	615a      	str	r2, [r3, #20]
							break;
 80010b8:	bf00      	nop
  __ASM volatile ("cpsid i" : : : "memory");
 80010ba:	b672      	cpsid	i
}
 80010bc:	bf00      	nop
					#if (HAL_GPIO_INT0_EN==EN)||(HAL_GPIO_INT1_EN==EN)||(HAL_GPIO_INT2_EN==EN)||(HAL_GPIO_INT3_EN==EN)\
					||(HAL_GPIO_INT4_EN==EN)||(HAL_GPIO_INT5_EN==EN)||(HAL_GPIO_INT6_EN==EN)||(HAL_GPIO_INT7_EN==EN)\
					||(HAL_GPIO_INT8_EN==EN)||(HAL_GPIO_INT9_EN==EN)||(HAL_GPIO_INT10_EN==EN)||(HAL_GPIO_INT11_EN==EN)\
					||(HAL_GPIO_INT12_EN==EN)||(HAL_GPIO_INT13_EN==EN)||(HAL_GPIO_INT14_EN==EN)||(HAL_GPIO_INT15_EN==EN)
					__disable_irq();
					__HAL_RCC_AFIO_EN();
 80010be:	4b43      	ldr	r3, [pc, #268]	; (80011cc <HAL_Init_PIN+0x23c>)
 80010c0:	699b      	ldr	r3, [r3, #24]
 80010c2:	4a42      	ldr	r2, [pc, #264]	; (80011cc <HAL_Init_PIN+0x23c>)
 80010c4:	f043 0301 	orr.w	r3, r3, #1
 80010c8:	6193      	str	r3, [r2, #24]
 80010ca:	693b      	ldr	r3, [r7, #16]
 80010cc:	2b0f      	cmp	r3, #15
 80010ce:	d84b      	bhi.n	8001168 <HAL_Init_PIN+0x1d8>
 80010d0:	a201      	add	r2, pc, #4	; (adr r2, 80010d8 <HAL_Init_PIN+0x148>)
 80010d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010d6:	bf00      	nop
 80010d8:	08001119 	.word	0x08001119
 80010dc:	08001169 	.word	0x08001169
 80010e0:	08001169 	.word	0x08001169
 80010e4:	08001169 	.word	0x08001169
 80010e8:	08001169 	.word	0x08001169
 80010ec:	08001169 	.word	0x08001169
 80010f0:	08001169 	.word	0x08001169
 80010f4:	08001169 	.word	0x08001169
 80010f8:	08001169 	.word	0x08001169
 80010fc:	08001169 	.word	0x08001169
 8001100:	08001169 	.word	0x08001169
 8001104:	08001169 	.word	0x08001169
 8001108:	08001169 	.word	0x08001169
 800110c:	08001169 	.word	0x08001169
 8001110:	08001169 	.word	0x08001169
 8001114:	08001169 	.word	0x08001169
					/*---------Call back Initiliazed --------*/
					switch(Pin_Number)
					{
						case EXTI_LINE_0:
						#if (HAL_GPIO_INT0_EN==EN)
							AFIO_CONFIG(GPIO_PORT,0,0);
 8001118:	2200      	movs	r2, #0
 800111a:	2100      	movs	r1, #0
 800111c:	6878      	ldr	r0, [r7, #4]
 800111e:	f7ff fedb 	bl	8000ed8 <AFIO_CONFIG>
							EXTI_CLL0  = GPIO_PIN->EXTI_CLL;
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	695b      	ldr	r3, [r3, #20]
 8001126:	4a2e      	ldr	r2, [pc, #184]	; (80011e0 <HAL_Init_PIN+0x250>)
 8001128:	6013      	str	r3, [r2, #0]
							EXTI->IMR |= EXTI_LINE_0_EN;
 800112a:	4b2e      	ldr	r3, [pc, #184]	; (80011e4 <HAL_Init_PIN+0x254>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	4a2d      	ldr	r2, [pc, #180]	; (80011e4 <HAL_Init_PIN+0x254>)
 8001130:	f043 0301 	orr.w	r3, r3, #1
 8001134:	6013      	str	r3, [r2, #0]
							if(GPIO_PIN ->EDGE_TRIGGER == HAL_GPIO_INT_REDG)
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	7e9b      	ldrb	r3, [r3, #26]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d106      	bne.n	800114c <HAL_Init_PIN+0x1bc>
								EXTI->RTSR |= EXTI_LINE_0_EN;
 800113e:	4b29      	ldr	r3, [pc, #164]	; (80011e4 <HAL_Init_PIN+0x254>)
 8001140:	689b      	ldr	r3, [r3, #8]
 8001142:	4a28      	ldr	r2, [pc, #160]	; (80011e4 <HAL_Init_PIN+0x254>)
 8001144:	f043 0301 	orr.w	r3, r3, #1
 8001148:	6093      	str	r3, [r2, #8]
 800114a:	e009      	b.n	8001160 <HAL_Init_PIN+0x1d0>
							else if(GPIO_PIN ->EDGE_TRIGGER == HAL_GPIO_INT_FEDG)
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	7e9b      	ldrb	r3, [r3, #26]
 8001150:	2b01      	cmp	r3, #1
 8001152:	d105      	bne.n	8001160 <HAL_Init_PIN+0x1d0>
								EXTI->FTSR |= EXTI_LINE_0_EN;
 8001154:	4b23      	ldr	r3, [pc, #140]	; (80011e4 <HAL_Init_PIN+0x254>)
 8001156:	68db      	ldr	r3, [r3, #12]
 8001158:	4a22      	ldr	r2, [pc, #136]	; (80011e4 <HAL_Init_PIN+0x254>)
 800115a:	f043 0301 	orr.w	r3, r3, #1
 800115e:	60d3      	str	r3, [r2, #12]
							NVIC_EnableIRQ(EXTI0_IRQn);
 8001160:	2006      	movs	r0, #6
 8001162:	f7ff fe9d 	bl	8000ea0 <__NVIC_EnableIRQ>
						#endif
 							break;
 8001166:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 8001168:	b662      	cpsie	i
}
 800116a:	bf00      	nop
						#endif
							break;
					}
					__enable_irq();
				#endif
				break;
 800116c:	e003      	b.n	8001176 <HAL_Init_PIN+0x1e6>
			case HAL_GPIO_IN_AN:
				REG_VAL=HAL_GPIO_IN_AN_MSK+HAL_GPIO_IN_MSK;
 800116e:	2300      	movs	r3, #0
 8001170:	617b      	str	r3, [r7, #20]
				break;
 8001172:	e000      	b.n	8001176 <HAL_Init_PIN+0x1e6>
			default:
				break;
 8001174:	bf00      	nop
		}
		/*Select Either CRH or CRL depending on position of the bit*/
		CONFIG_REG=Pin_Number>8?&GPIO_PORT->CRH:&GPIO_PORT->CRL;
 8001176:	693b      	ldr	r3, [r7, #16]
 8001178:	2b08      	cmp	r3, #8
 800117a:	d902      	bls.n	8001182 <HAL_Init_PIN+0x1f2>
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	3304      	adds	r3, #4
 8001180:	e000      	b.n	8001184 <HAL_Init_PIN+0x1f4>
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	60fb      	str	r3, [r7, #12]

		/*Determine Bit offset if the pin number is greater simply subtract and multiply by 4 or left shift by 2 2^2=4 */
		RegisterOffset=Pin_Number>8?((Pin_Number-8)<<2U):((Pin_Number)<<2U);
 8001186:	693b      	ldr	r3, [r7, #16]
 8001188:	2b08      	cmp	r3, #8
 800118a:	d903      	bls.n	8001194 <HAL_Init_PIN+0x204>
 800118c:	693b      	ldr	r3, [r7, #16]
 800118e:	3b08      	subs	r3, #8
 8001190:	009b      	lsls	r3, r3, #2
 8001192:	e001      	b.n	8001198 <HAL_Init_PIN+0x208>
 8001194:	693b      	ldr	r3, [r7, #16]
 8001196:	009b      	lsls	r3, r3, #2
 8001198:	60bb      	str	r3, [r7, #8]

		/*Clear Bits of Certain Pin*/
		(*CONFIG_REG)&=~(CLEAR_MASK_GPIO<<RegisterOffset);
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	681a      	ldr	r2, [r3, #0]
 800119e:	210f      	movs	r1, #15
 80011a0:	68bb      	ldr	r3, [r7, #8]
 80011a2:	fa01 f303 	lsl.w	r3, r1, r3
 80011a6:	43db      	mvns	r3, r3
 80011a8:	401a      	ands	r2, r3
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	601a      	str	r2, [r3, #0]

		/*Set Bits of Certain Pin*/
		(*CONFIG_REG)|=(REG_VAL<<RegisterOffset);
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	681a      	ldr	r2, [r3, #0]
 80011b2:	6979      	ldr	r1, [r7, #20]
 80011b4:	68bb      	ldr	r3, [r7, #8]
 80011b6:	fa01 f303 	lsl.w	r3, r1, r3
 80011ba:	431a      	orrs	r2, r3
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	601a      	str	r2, [r3, #0]
	}
}
 80011c0:	bf00      	nop
 80011c2:	3718      	adds	r7, #24
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	40010800 	.word	0x40010800
 80011cc:	40021000 	.word	0x40021000
 80011d0:	40010c00 	.word	0x40010c00
 80011d4:	40011000 	.word	0x40011000
 80011d8:	40011400 	.word	0x40011400
 80011dc:	40011800 	.word	0x40011800
 80011e0:	200000c8 	.word	0x200000c8
 80011e4:	40010400 	.word	0x40010400

080011e8 <HAL_Write_PIN>:
{

}

void HAL_Write_PIN(GPIO_TypeDef *GPIO_PORT,GPIO_t *GPIO_PIN,GPIO_STATE State)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b085      	sub	sp, #20
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	60f8      	str	r0, [r7, #12]
 80011f0:	60b9      	str	r1, [r7, #8]
 80011f2:	4613      	mov	r3, r2
 80011f4:	71fb      	strb	r3, [r7, #7]
	if (GPIO_PORT != NULL && GPIO_PIN != NULL) {
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d01d      	beq.n	8001238 <HAL_Write_PIN+0x50>
 80011fc:	68bb      	ldr	r3, [r7, #8]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d01a      	beq.n	8001238 <HAL_Write_PIN+0x50>
		switch (State) {
 8001202:	79fb      	ldrb	r3, [r7, #7]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d00c      	beq.n	8001222 <HAL_Write_PIN+0x3a>
 8001208:	2b01      	cmp	r3, #1
 800120a:	d117      	bne.n	800123c <HAL_Write_PIN+0x54>
		case GPIO_RESET:
			SET_BIT(GPIO_PORT->BRR, (uint32_t )GPIO_PIN->PIN);
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	695a      	ldr	r2, [r3, #20]
 8001210:	68bb      	ldr	r3, [r7, #8]
 8001212:	689b      	ldr	r3, [r3, #8]
 8001214:	2101      	movs	r1, #1
 8001216:	fa01 f303 	lsl.w	r3, r1, r3
 800121a:	431a      	orrs	r2, r3
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	615a      	str	r2, [r3, #20]
			break;
 8001220:	e00d      	b.n	800123e <HAL_Write_PIN+0x56>
		case GPIO_SET:
			SET_BIT(GPIO_PORT->BSRR, (uint32_t )GPIO_PIN->PIN);
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	691a      	ldr	r2, [r3, #16]
 8001226:	68bb      	ldr	r3, [r7, #8]
 8001228:	689b      	ldr	r3, [r3, #8]
 800122a:	2101      	movs	r1, #1
 800122c:	fa01 f303 	lsl.w	r3, r1, r3
 8001230:	431a      	orrs	r2, r3
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	611a      	str	r2, [r3, #16]
			break;
 8001236:	e002      	b.n	800123e <HAL_Write_PIN+0x56>
		default:
			break;
		}
	}
 8001238:	bf00      	nop
 800123a:	e000      	b.n	800123e <HAL_Write_PIN+0x56>
			break;
 800123c:	bf00      	nop
}
 800123e:	bf00      	nop
 8001240:	3714      	adds	r7, #20
 8001242:	46bd      	mov	sp, r7
 8001244:	bc80      	pop	{r7}
 8001246:	4770      	bx	lr

08001248 <HAL_Toggle_PIN>:

void HAL_Toggle_PIN(GPIO_TypeDef *GPIO_PORT,GPIO_t *GPIO_PIN)
{
 8001248:	b480      	push	{r7}
 800124a:	b083      	sub	sp, #12
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
 8001250:	6039      	str	r1, [r7, #0]
	if (GPIO_PORT != NULL && GPIO_PIN != NULL) {
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d00c      	beq.n	8001272 <HAL_Toggle_PIN+0x2a>
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d009      	beq.n	8001272 <HAL_Toggle_PIN+0x2a>
		GPIO_PORT->ODR^=(1U<<(uint32_t)GPIO_PIN->PIN);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	68da      	ldr	r2, [r3, #12]
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	689b      	ldr	r3, [r3, #8]
 8001266:	2101      	movs	r1, #1
 8001268:	fa01 f303 	lsl.w	r3, r1, r3
 800126c:	405a      	eors	r2, r3
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	60da      	str	r2, [r3, #12]
	}
}
 8001272:	bf00      	nop
 8001274:	370c      	adds	r7, #12
 8001276:	46bd      	mov	sp, r7
 8001278:	bc80      	pop	{r7}
 800127a:	4770      	bx	lr

0800127c <EXTI0_IRQHandler>:
	return Bit_Status;
}

#if HAL_GPIO_INT0_EN==EN
void EXTI0_IRQHandler(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0
	EXTI->PR |= (1<<EXTI_LINE_0_EN);
 8001280:	4b07      	ldr	r3, [pc, #28]	; (80012a0 <EXTI0_IRQHandler+0x24>)
 8001282:	695b      	ldr	r3, [r3, #20]
 8001284:	4a06      	ldr	r2, [pc, #24]	; (80012a0 <EXTI0_IRQHandler+0x24>)
 8001286:	f043 0302 	orr.w	r3, r3, #2
 800128a:	6153      	str	r3, [r2, #20]
    if(EXTI_CLL0 != NULL)
 800128c:	4b05      	ldr	r3, [pc, #20]	; (80012a4 <EXTI0_IRQHandler+0x28>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d002      	beq.n	800129a <EXTI0_IRQHandler+0x1e>
	  (*EXTI_CLL0)();
 8001294:	4b03      	ldr	r3, [pc, #12]	; (80012a4 <EXTI0_IRQHandler+0x28>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4798      	blx	r3
}
 800129a:	bf00      	nop
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	40010400 	.word	0x40010400
 80012a4:	200000c8 	.word	0x200000c8

080012a8 <AHB_PRESCALER>:
//	/*-----------Select Clock Source----------*/
//	RCC->CFGR |= RCC_CLK_PLL;
//}

static void AHB_PRESCALER(uint8_t Flag)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b083      	sub	sp, #12
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	4603      	mov	r3, r0
 80012b0:	71fb      	strb	r3, [r7, #7]
	switch (Flag) {
 80012b2:	79fb      	ldrb	r3, [r7, #7]
 80012b4:	2b0f      	cmp	r3, #15
 80012b6:	d860      	bhi.n	800137a <AHB_PRESCALER+0xd2>
 80012b8:	a201      	add	r2, pc, #4	; (adr r2, 80012c0 <AHB_PRESCALER+0x18>)
 80012ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012be:	bf00      	nop
 80012c0:	08001301 	.word	0x08001301
 80012c4:	0800137b 	.word	0x0800137b
 80012c8:	0800137b 	.word	0x0800137b
 80012cc:	0800137b 	.word	0x0800137b
 80012d0:	0800137b 	.word	0x0800137b
 80012d4:	0800137b 	.word	0x0800137b
 80012d8:	0800137b 	.word	0x0800137b
 80012dc:	0800137b 	.word	0x0800137b
 80012e0:	0800130b 	.word	0x0800130b
 80012e4:	08001319 	.word	0x08001319
 80012e8:	08001327 	.word	0x08001327
 80012ec:	08001335 	.word	0x08001335
 80012f0:	08001343 	.word	0x08001343
 80012f4:	08001351 	.word	0x08001351
 80012f8:	0800135f 	.word	0x0800135f
 80012fc:	0800136d 	.word	0x0800136d
		case RCC_CLK_PLL_AHB_1:
			RCC->CFGR |= RCC_PLL_AHB_1;
 8001300:	4b20      	ldr	r3, [pc, #128]	; (8001384 <AHB_PRESCALER+0xdc>)
 8001302:	4a20      	ldr	r2, [pc, #128]	; (8001384 <AHB_PRESCALER+0xdc>)
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	6053      	str	r3, [r2, #4]
			break;
 8001308:	e037      	b.n	800137a <AHB_PRESCALER+0xd2>
		case RCC_CLK_PLL_AHB_2:
			RCC->CFGR |= RCC_PLL_AHB_2;
 800130a:	4b1e      	ldr	r3, [pc, #120]	; (8001384 <AHB_PRESCALER+0xdc>)
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	4a1d      	ldr	r2, [pc, #116]	; (8001384 <AHB_PRESCALER+0xdc>)
 8001310:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001314:	6053      	str	r3, [r2, #4]
			break;
 8001316:	e030      	b.n	800137a <AHB_PRESCALER+0xd2>
		case RCC_CLK_PLL_AHB_4:
			RCC->CFGR |= RCC_PLL_AHB_4;
 8001318:	4b1a      	ldr	r3, [pc, #104]	; (8001384 <AHB_PRESCALER+0xdc>)
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	4a19      	ldr	r2, [pc, #100]	; (8001384 <AHB_PRESCALER+0xdc>)
 800131e:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8001322:	6053      	str	r3, [r2, #4]
			break;
 8001324:	e029      	b.n	800137a <AHB_PRESCALER+0xd2>
		case RCC_CLK_PLL_AHB_8:
			RCC->CFGR |= RCC_PLL_AHB_8;
 8001326:	4b17      	ldr	r3, [pc, #92]	; (8001384 <AHB_PRESCALER+0xdc>)
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	4a16      	ldr	r2, [pc, #88]	; (8001384 <AHB_PRESCALER+0xdc>)
 800132c:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8001330:	6053      	str	r3, [r2, #4]
			break;
 8001332:	e022      	b.n	800137a <AHB_PRESCALER+0xd2>
		case RCC_CLK_PLL_AHB_16:
			RCC->CFGR |= RCC_PLL_AHB_16;
 8001334:	4b13      	ldr	r3, [pc, #76]	; (8001384 <AHB_PRESCALER+0xdc>)
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	4a12      	ldr	r2, [pc, #72]	; (8001384 <AHB_PRESCALER+0xdc>)
 800133a:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800133e:	6053      	str	r3, [r2, #4]
			break;
 8001340:	e01b      	b.n	800137a <AHB_PRESCALER+0xd2>
		case RCC_CLK_PLL_AHB_64:
			RCC->CFGR |= RCC_PLL_AHB_64;
 8001342:	4b10      	ldr	r3, [pc, #64]	; (8001384 <AHB_PRESCALER+0xdc>)
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	4a0f      	ldr	r2, [pc, #60]	; (8001384 <AHB_PRESCALER+0xdc>)
 8001348:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800134c:	6053      	str	r3, [r2, #4]
			break;
 800134e:	e014      	b.n	800137a <AHB_PRESCALER+0xd2>
		case RCC_CLK_PLL_AHB_128:
			RCC->CFGR |= RCC_PLL_AHB_128;
 8001350:	4b0c      	ldr	r3, [pc, #48]	; (8001384 <AHB_PRESCALER+0xdc>)
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	4a0b      	ldr	r2, [pc, #44]	; (8001384 <AHB_PRESCALER+0xdc>)
 8001356:	f043 03d0 	orr.w	r3, r3, #208	; 0xd0
 800135a:	6053      	str	r3, [r2, #4]
			break;
 800135c:	e00d      	b.n	800137a <AHB_PRESCALER+0xd2>
		case RCC_CLK_PLL_AHB_256:
			RCC->CFGR |= RCC_PLL_AHB_256;
 800135e:	4b09      	ldr	r3, [pc, #36]	; (8001384 <AHB_PRESCALER+0xdc>)
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	4a08      	ldr	r2, [pc, #32]	; (8001384 <AHB_PRESCALER+0xdc>)
 8001364:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8001368:	6053      	str	r3, [r2, #4]
			break;
 800136a:	e006      	b.n	800137a <AHB_PRESCALER+0xd2>
		case RCC_CLK_PLL_AHB_512:
			RCC->CFGR |= RCC_PLL_AHB_512;
 800136c:	4b05      	ldr	r3, [pc, #20]	; (8001384 <AHB_PRESCALER+0xdc>)
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	4a04      	ldr	r2, [pc, #16]	; (8001384 <AHB_PRESCALER+0xdc>)
 8001372:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8001376:	6053      	str	r3, [r2, #4]
			break;
 8001378:	bf00      	nop
	}
}
 800137a:	bf00      	nop
 800137c:	370c      	adds	r7, #12
 800137e:	46bd      	mov	sp, r7
 8001380:	bc80      	pop	{r7}
 8001382:	4770      	bx	lr
 8001384:	40021000 	.word	0x40021000

08001388 <APB1_PRESCALER>:

static void APB1_PRESCALER(uint8_t Flag)
{
 8001388:	b480      	push	{r7}
 800138a:	b083      	sub	sp, #12
 800138c:	af00      	add	r7, sp, #0
 800138e:	4603      	mov	r3, r0
 8001390:	71fb      	strb	r3, [r7, #7]
	switch (Flag) {
 8001392:	79fb      	ldrb	r3, [r7, #7]
 8001394:	2b07      	cmp	r3, #7
 8001396:	d834      	bhi.n	8001402 <APB1_PRESCALER+0x7a>
 8001398:	a201      	add	r2, pc, #4	; (adr r2, 80013a0 <APB1_PRESCALER+0x18>)
 800139a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800139e:	bf00      	nop
 80013a0:	080013c1 	.word	0x080013c1
 80013a4:	08001403 	.word	0x08001403
 80013a8:	08001403 	.word	0x08001403
 80013ac:	08001403 	.word	0x08001403
 80013b0:	080013cb 	.word	0x080013cb
 80013b4:	080013d9 	.word	0x080013d9
 80013b8:	080013e7 	.word	0x080013e7
 80013bc:	080013f5 	.word	0x080013f5
		case RCC_CLK_PLL_APB_1:
			RCC->CFGR |= RCC_PLL_APB1_1;
 80013c0:	4b12      	ldr	r3, [pc, #72]	; (800140c <APB1_PRESCALER+0x84>)
 80013c2:	4a12      	ldr	r2, [pc, #72]	; (800140c <APB1_PRESCALER+0x84>)
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	6053      	str	r3, [r2, #4]
			break;
 80013c8:	e01b      	b.n	8001402 <APB1_PRESCALER+0x7a>
		case RCC_CLK_PLL_APB_2:
			RCC->CFGR |= RCC_PLL_APB1_2;
 80013ca:	4b10      	ldr	r3, [pc, #64]	; (800140c <APB1_PRESCALER+0x84>)
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	4a0f      	ldr	r2, [pc, #60]	; (800140c <APB1_PRESCALER+0x84>)
 80013d0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013d4:	6053      	str	r3, [r2, #4]
			break;
 80013d6:	e014      	b.n	8001402 <APB1_PRESCALER+0x7a>
		case RCC_CLK_PLL_APB_4:
			RCC->CFGR |= RCC_PLL_APB1_4;
 80013d8:	4b0c      	ldr	r3, [pc, #48]	; (800140c <APB1_PRESCALER+0x84>)
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	4a0b      	ldr	r2, [pc, #44]	; (800140c <APB1_PRESCALER+0x84>)
 80013de:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
 80013e2:	6053      	str	r3, [r2, #4]
			break;
 80013e4:	e00d      	b.n	8001402 <APB1_PRESCALER+0x7a>
		case RCC_CLK_PLL_APB_8:
			RCC->CFGR |= RCC_PLL_APB1_8;
 80013e6:	4b09      	ldr	r3, [pc, #36]	; (800140c <APB1_PRESCALER+0x84>)
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	4a08      	ldr	r2, [pc, #32]	; (800140c <APB1_PRESCALER+0x84>)
 80013ec:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80013f0:	6053      	str	r3, [r2, #4]
			break;
 80013f2:	e006      	b.n	8001402 <APB1_PRESCALER+0x7a>
		case RCC_CLK_PLL_APB_16:
			RCC->CFGR |= RCC_PLL_APB1_16;
 80013f4:	4b05      	ldr	r3, [pc, #20]	; (800140c <APB1_PRESCALER+0x84>)
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	4a04      	ldr	r2, [pc, #16]	; (800140c <APB1_PRESCALER+0x84>)
 80013fa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80013fe:	6053      	str	r3, [r2, #4]
			break;
 8001400:	bf00      	nop
	}
}
 8001402:	bf00      	nop
 8001404:	370c      	adds	r7, #12
 8001406:	46bd      	mov	sp, r7
 8001408:	bc80      	pop	{r7}
 800140a:	4770      	bx	lr
 800140c:	40021000 	.word	0x40021000

08001410 <APB2_PRESCALER>:

static void APB2_PRESCALER(uint8_t Flag)
{
 8001410:	b480      	push	{r7}
 8001412:	b083      	sub	sp, #12
 8001414:	af00      	add	r7, sp, #0
 8001416:	4603      	mov	r3, r0
 8001418:	71fb      	strb	r3, [r7, #7]
	switch (Flag) {
 800141a:	79fb      	ldrb	r3, [r7, #7]
 800141c:	2b07      	cmp	r3, #7
 800141e:	d834      	bhi.n	800148a <APB2_PRESCALER+0x7a>
 8001420:	a201      	add	r2, pc, #4	; (adr r2, 8001428 <APB2_PRESCALER+0x18>)
 8001422:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001426:	bf00      	nop
 8001428:	08001449 	.word	0x08001449
 800142c:	0800148b 	.word	0x0800148b
 8001430:	0800148b 	.word	0x0800148b
 8001434:	0800148b 	.word	0x0800148b
 8001438:	08001453 	.word	0x08001453
 800143c:	08001461 	.word	0x08001461
 8001440:	0800146f 	.word	0x0800146f
 8001444:	0800147d 	.word	0x0800147d
		case RCC_CLK_PLL_APB_1:
			RCC->CFGR |= RCC_PLL_APB2_1;
 8001448:	4b12      	ldr	r3, [pc, #72]	; (8001494 <APB2_PRESCALER+0x84>)
 800144a:	4a12      	ldr	r2, [pc, #72]	; (8001494 <APB2_PRESCALER+0x84>)
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	6053      	str	r3, [r2, #4]
			break;
 8001450:	e01b      	b.n	800148a <APB2_PRESCALER+0x7a>
		case RCC_CLK_PLL_APB_2:
			RCC->CFGR |= RCC_PLL_APB2_2;
 8001452:	4b10      	ldr	r3, [pc, #64]	; (8001494 <APB2_PRESCALER+0x84>)
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	4a0f      	ldr	r2, [pc, #60]	; (8001494 <APB2_PRESCALER+0x84>)
 8001458:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800145c:	6053      	str	r3, [r2, #4]
			break;
 800145e:	e014      	b.n	800148a <APB2_PRESCALER+0x7a>
		case RCC_CLK_PLL_APB_4:
			RCC->CFGR |= RCC_PLL_APB2_4;
 8001460:	4b0c      	ldr	r3, [pc, #48]	; (8001494 <APB2_PRESCALER+0x84>)
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	4a0b      	ldr	r2, [pc, #44]	; (8001494 <APB2_PRESCALER+0x84>)
 8001466:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 800146a:	6053      	str	r3, [r2, #4]
			break;
 800146c:	e00d      	b.n	800148a <APB2_PRESCALER+0x7a>
		case RCC_CLK_PLL_APB_8:
			RCC->CFGR |= RCC_PLL_APB2_8;
 800146e:	4b09      	ldr	r3, [pc, #36]	; (8001494 <APB2_PRESCALER+0x84>)
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	4a08      	ldr	r2, [pc, #32]	; (8001494 <APB2_PRESCALER+0x84>)
 8001474:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8001478:	6053      	str	r3, [r2, #4]
			break;
 800147a:	e006      	b.n	800148a <APB2_PRESCALER+0x7a>
		case RCC_CLK_PLL_APB_16:
			RCC->CFGR |= RCC_PLL_APB2_16;
 800147c:	4b05      	ldr	r3, [pc, #20]	; (8001494 <APB2_PRESCALER+0x84>)
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	4a04      	ldr	r2, [pc, #16]	; (8001494 <APB2_PRESCALER+0x84>)
 8001482:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001486:	6053      	str	r3, [r2, #4]
			break;
 8001488:	bf00      	nop
	}
}
 800148a:	bf00      	nop
 800148c:	370c      	adds	r7, #12
 800148e:	46bd      	mov	sp, r7
 8001490:	bc80      	pop	{r7}
 8001492:	4770      	bx	lr
 8001494:	40021000 	.word	0x40021000

08001498 <ADC_PRESCALER>:

static void ADC_PRESCALER(uint8_t Flag)
{
 8001498:	b480      	push	{r7}
 800149a:	b083      	sub	sp, #12
 800149c:	af00      	add	r7, sp, #0
 800149e:	4603      	mov	r3, r0
 80014a0:	71fb      	strb	r3, [r7, #7]
	switch (Flag) {
 80014a2:	79fb      	ldrb	r3, [r7, #7]
 80014a4:	2b03      	cmp	r3, #3
 80014a6:	d825      	bhi.n	80014f4 <ADC_PRESCALER+0x5c>
 80014a8:	a201      	add	r2, pc, #4	; (adr r2, 80014b0 <ADC_PRESCALER+0x18>)
 80014aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014ae:	bf00      	nop
 80014b0:	080014c1 	.word	0x080014c1
 80014b4:	080014cb 	.word	0x080014cb
 80014b8:	080014d9 	.word	0x080014d9
 80014bc:	080014e7 	.word	0x080014e7
		case RCC_CLK_PLL_ADC_2:
			RCC->CFGR |= RCC_PLL_ADC_2;
 80014c0:	4b0f      	ldr	r3, [pc, #60]	; (8001500 <ADC_PRESCALER+0x68>)
 80014c2:	4a0f      	ldr	r2, [pc, #60]	; (8001500 <ADC_PRESCALER+0x68>)
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	6053      	str	r3, [r2, #4]
			break;
 80014c8:	e014      	b.n	80014f4 <ADC_PRESCALER+0x5c>
		case RCC_CLK_PLL_ADC_4:
			RCC->CFGR |= RCC_PLL_ADC_4;
 80014ca:	4b0d      	ldr	r3, [pc, #52]	; (8001500 <ADC_PRESCALER+0x68>)
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	4a0c      	ldr	r2, [pc, #48]	; (8001500 <ADC_PRESCALER+0x68>)
 80014d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014d4:	6053      	str	r3, [r2, #4]
			break;
 80014d6:	e00d      	b.n	80014f4 <ADC_PRESCALER+0x5c>
		case RCC_CLK_PLL_ADC_6:
			RCC->CFGR |= RCC_PLL_ADC_6;
 80014d8:	4b09      	ldr	r3, [pc, #36]	; (8001500 <ADC_PRESCALER+0x68>)
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	4a08      	ldr	r2, [pc, #32]	; (8001500 <ADC_PRESCALER+0x68>)
 80014de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80014e2:	6053      	str	r3, [r2, #4]
			break;
 80014e4:	e006      	b.n	80014f4 <ADC_PRESCALER+0x5c>
		case RCC_CLK_PLL_ADC_8:
			RCC->CFGR |= RCC_PLL_ADC_8;
 80014e6:	4b06      	ldr	r3, [pc, #24]	; (8001500 <ADC_PRESCALER+0x68>)
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	4a05      	ldr	r2, [pc, #20]	; (8001500 <ADC_PRESCALER+0x68>)
 80014ec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80014f0:	6053      	str	r3, [r2, #4]
			break;
 80014f2:	bf00      	nop
	}
}
 80014f4:	bf00      	nop
 80014f6:	370c      	adds	r7, #12
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bc80      	pop	{r7}
 80014fc:	4770      	bx	lr
 80014fe:	bf00      	nop
 8001500:	40021000 	.word	0x40021000

08001504 <PLL_PRESCALER>:

static void PLL_PRESCALER(uint8_t Flag, uint32_t *SYS_CLK)
{
 8001504:	b480      	push	{r7}
 8001506:	b083      	sub	sp, #12
 8001508:	af00      	add	r7, sp, #0
 800150a:	4603      	mov	r3, r0
 800150c:	6039      	str	r1, [r7, #0]
 800150e:	71fb      	strb	r3, [r7, #7]
	switch (Flag) {
 8001510:	79fb      	ldrb	r3, [r7, #7]
 8001512:	2b0f      	cmp	r3, #15
 8001514:	f200 8100 	bhi.w	8001718 <PLL_PRESCALER+0x214>
 8001518:	a201      	add	r2, pc, #4	; (adr r2, 8001520 <PLL_PRESCALER+0x1c>)
 800151a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800151e:	bf00      	nop
 8001520:	08001561 	.word	0x08001561
 8001524:	08001575 	.word	0x08001575
 8001528:	08001591 	.word	0x08001591
 800152c:	080015a9 	.word	0x080015a9
 8001530:	080015c5 	.word	0x080015c5
 8001534:	080015e5 	.word	0x080015e5
 8001538:	08001601 	.word	0x08001601
 800153c:	08001619 	.word	0x08001619
 8001540:	08001635 	.word	0x08001635
 8001544:	08001655 	.word	0x08001655
 8001548:	08001675 	.word	0x08001675
 800154c:	08001695 	.word	0x08001695
 8001550:	080016b5 	.word	0x080016b5
 8001554:	080016d1 	.word	0x080016d1
 8001558:	080016e9 	.word	0x080016e9
 800155c:	08001701 	.word	0x08001701
		case RCC_CLK_PLL_MUL_2:
			RCC->CFGR |= RCC_PLL_MUL_2;
 8001560:	4b70      	ldr	r3, [pc, #448]	; (8001724 <PLL_PRESCALER+0x220>)
 8001562:	4a70      	ldr	r2, [pc, #448]	; (8001724 <PLL_PRESCALER+0x220>)
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	6053      	str	r3, [r2, #4]
			*SYS_CLK *=2;
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	005a      	lsls	r2, r3, #1
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	601a      	str	r2, [r3, #0]
			break;
 8001572:	e0d1      	b.n	8001718 <PLL_PRESCALER+0x214>
		case RCC_CLK_PLL_MUL_3:
			RCC->CFGR |= RCC_PLL_MUL_3;
 8001574:	4b6b      	ldr	r3, [pc, #428]	; (8001724 <PLL_PRESCALER+0x220>)
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	4a6a      	ldr	r2, [pc, #424]	; (8001724 <PLL_PRESCALER+0x220>)
 800157a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800157e:	6053      	str	r3, [r2, #4]
			*SYS_CLK *=3;
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	681a      	ldr	r2, [r3, #0]
 8001584:	4613      	mov	r3, r2
 8001586:	005b      	lsls	r3, r3, #1
 8001588:	441a      	add	r2, r3
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	601a      	str	r2, [r3, #0]
			break;
 800158e:	e0c3      	b.n	8001718 <PLL_PRESCALER+0x214>
		case RCC_CLK_PLL_MUL_4:
			RCC->CFGR |= RCC_PLL_MUL_4;
 8001590:	4b64      	ldr	r3, [pc, #400]	; (8001724 <PLL_PRESCALER+0x220>)
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	4a63      	ldr	r2, [pc, #396]	; (8001724 <PLL_PRESCALER+0x220>)
 8001596:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800159a:	6053      	str	r3, [r2, #4]
			*SYS_CLK *=4;
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	009a      	lsls	r2, r3, #2
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	601a      	str	r2, [r3, #0]
			break;
 80015a6:	e0b7      	b.n	8001718 <PLL_PRESCALER+0x214>
		case RCC_CLK_PLL_MUL_5:
			RCC->CFGR |= RCC_PLL_MUL_5;
 80015a8:	4b5e      	ldr	r3, [pc, #376]	; (8001724 <PLL_PRESCALER+0x220>)
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	4a5d      	ldr	r2, [pc, #372]	; (8001724 <PLL_PRESCALER+0x220>)
 80015ae:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 80015b2:	6053      	str	r3, [r2, #4]
			*SYS_CLK *=5;
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	681a      	ldr	r2, [r3, #0]
 80015b8:	4613      	mov	r3, r2
 80015ba:	009b      	lsls	r3, r3, #2
 80015bc:	441a      	add	r2, r3
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	601a      	str	r2, [r3, #0]
			break;
 80015c2:	e0a9      	b.n	8001718 <PLL_PRESCALER+0x214>
		case RCC_CLK_PLL_MUL_6:
			RCC->CFGR |= RCC_PLL_MUL_6;
 80015c4:	4b57      	ldr	r3, [pc, #348]	; (8001724 <PLL_PRESCALER+0x220>)
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	4a56      	ldr	r2, [pc, #344]	; (8001724 <PLL_PRESCALER+0x220>)
 80015ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80015ce:	6053      	str	r3, [r2, #4]
			*SYS_CLK *=6;
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	681a      	ldr	r2, [r3, #0]
 80015d4:	4613      	mov	r3, r2
 80015d6:	005b      	lsls	r3, r3, #1
 80015d8:	4413      	add	r3, r2
 80015da:	005b      	lsls	r3, r3, #1
 80015dc:	461a      	mov	r2, r3
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	601a      	str	r2, [r3, #0]
			break;
 80015e2:	e099      	b.n	8001718 <PLL_PRESCALER+0x214>
		case RCC_CLK_PLL_MUL_7:
			RCC->CFGR |= RCC_PLL_MUL_7;
 80015e4:	4b4f      	ldr	r3, [pc, #316]	; (8001724 <PLL_PRESCALER+0x220>)
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	4a4e      	ldr	r2, [pc, #312]	; (8001724 <PLL_PRESCALER+0x220>)
 80015ea:	f443 13a0 	orr.w	r3, r3, #1310720	; 0x140000
 80015ee:	6053      	str	r3, [r2, #4]
			*SYS_CLK *=7;
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	681a      	ldr	r2, [r3, #0]
 80015f4:	4613      	mov	r3, r2
 80015f6:	00db      	lsls	r3, r3, #3
 80015f8:	1a9a      	subs	r2, r3, r2
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	601a      	str	r2, [r3, #0]
			break;
 80015fe:	e08b      	b.n	8001718 <PLL_PRESCALER+0x214>
		case RCC_CLK_PLL_MUL_8:
			RCC->CFGR |= RCC_PLL_MUL_8;
 8001600:	4b48      	ldr	r3, [pc, #288]	; (8001724 <PLL_PRESCALER+0x220>)
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	4a47      	ldr	r2, [pc, #284]	; (8001724 <PLL_PRESCALER+0x220>)
 8001606:	f443 13c0 	orr.w	r3, r3, #1572864	; 0x180000
 800160a:	6053      	str	r3, [r2, #4]
			*SYS_CLK *=8;
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	00da      	lsls	r2, r3, #3
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	601a      	str	r2, [r3, #0]
			break;
 8001616:	e07f      	b.n	8001718 <PLL_PRESCALER+0x214>
		case RCC_CLK_PLL_MUL_9:
			RCC->CFGR |= RCC_PLL_MUL_9;
 8001618:	4b42      	ldr	r3, [pc, #264]	; (8001724 <PLL_PRESCALER+0x220>)
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	4a41      	ldr	r2, [pc, #260]	; (8001724 <PLL_PRESCALER+0x220>)
 800161e:	f443 13e0 	orr.w	r3, r3, #1835008	; 0x1c0000
 8001622:	6053      	str	r3, [r2, #4]
			*SYS_CLK *=9;
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	681a      	ldr	r2, [r3, #0]
 8001628:	4613      	mov	r3, r2
 800162a:	00db      	lsls	r3, r3, #3
 800162c:	441a      	add	r2, r3
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	601a      	str	r2, [r3, #0]
			break;
 8001632:	e071      	b.n	8001718 <PLL_PRESCALER+0x214>
		case RCC_CLK_PLL_MUL_10:
			RCC->CFGR |= RCC_PLL_MUL_10;
 8001634:	4b3b      	ldr	r3, [pc, #236]	; (8001724 <PLL_PRESCALER+0x220>)
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	4a3a      	ldr	r2, [pc, #232]	; (8001724 <PLL_PRESCALER+0x220>)
 800163a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800163e:	6053      	str	r3, [r2, #4]
			*SYS_CLK *=10;
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	681a      	ldr	r2, [r3, #0]
 8001644:	4613      	mov	r3, r2
 8001646:	009b      	lsls	r3, r3, #2
 8001648:	4413      	add	r3, r2
 800164a:	005b      	lsls	r3, r3, #1
 800164c:	461a      	mov	r2, r3
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	601a      	str	r2, [r3, #0]
			break;
 8001652:	e061      	b.n	8001718 <PLL_PRESCALER+0x214>
		case RCC_CLK_PLL_MUL_11:
			RCC->CFGR |= RCC_PLL_MUL_11;
 8001654:	4b33      	ldr	r3, [pc, #204]	; (8001724 <PLL_PRESCALER+0x220>)
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	4a32      	ldr	r2, [pc, #200]	; (8001724 <PLL_PRESCALER+0x220>)
 800165a:	f443 1310 	orr.w	r3, r3, #2359296	; 0x240000
 800165e:	6053      	str	r3, [r2, #4]
			*SYS_CLK *=12;
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	681a      	ldr	r2, [r3, #0]
 8001664:	4613      	mov	r3, r2
 8001666:	005b      	lsls	r3, r3, #1
 8001668:	4413      	add	r3, r2
 800166a:	009b      	lsls	r3, r3, #2
 800166c:	461a      	mov	r2, r3
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	601a      	str	r2, [r3, #0]
			break;
 8001672:	e051      	b.n	8001718 <PLL_PRESCALER+0x214>
		case RCC_CLK_PLL_MUL_12:
			RCC->CFGR |= RCC_PLL_MUL_12;
 8001674:	4b2b      	ldr	r3, [pc, #172]	; (8001724 <PLL_PRESCALER+0x220>)
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	4a2a      	ldr	r2, [pc, #168]	; (8001724 <PLL_PRESCALER+0x220>)
 800167a:	f443 1320 	orr.w	r3, r3, #2621440	; 0x280000
 800167e:	6053      	str	r3, [r2, #4]
			*SYS_CLK *=13;
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	681a      	ldr	r2, [r3, #0]
 8001684:	4613      	mov	r3, r2
 8001686:	005b      	lsls	r3, r3, #1
 8001688:	4413      	add	r3, r2
 800168a:	009b      	lsls	r3, r3, #2
 800168c:	441a      	add	r2, r3
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	601a      	str	r2, [r3, #0]
			break;
 8001692:	e041      	b.n	8001718 <PLL_PRESCALER+0x214>
		case RCC_CLK_PLL_MUL_13:
			RCC->CFGR |= RCC_PLL_MUL_13;
 8001694:	4b23      	ldr	r3, [pc, #140]	; (8001724 <PLL_PRESCALER+0x220>)
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	4a22      	ldr	r2, [pc, #136]	; (8001724 <PLL_PRESCALER+0x220>)
 800169a:	f443 1330 	orr.w	r3, r3, #2883584	; 0x2c0000
 800169e:	6053      	str	r3, [r2, #4]
			*SYS_CLK *=14;
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	681a      	ldr	r2, [r3, #0]
 80016a4:	4613      	mov	r3, r2
 80016a6:	00db      	lsls	r3, r3, #3
 80016a8:	1a9b      	subs	r3, r3, r2
 80016aa:	005b      	lsls	r3, r3, #1
 80016ac:	461a      	mov	r2, r3
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	601a      	str	r2, [r3, #0]
			break;
 80016b2:	e031      	b.n	8001718 <PLL_PRESCALER+0x214>
		case RCC_CLK_PLL_MUL_14:
			RCC->CFGR |= RCC_PLL_MUL_14;
 80016b4:	4b1b      	ldr	r3, [pc, #108]	; (8001724 <PLL_PRESCALER+0x220>)
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	4a1a      	ldr	r2, [pc, #104]	; (8001724 <PLL_PRESCALER+0x220>)
 80016ba:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80016be:	6053      	str	r3, [r2, #4]
			*SYS_CLK *=15;
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	681a      	ldr	r2, [r3, #0]
 80016c4:	4613      	mov	r3, r2
 80016c6:	011b      	lsls	r3, r3, #4
 80016c8:	1a9a      	subs	r2, r3, r2
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	601a      	str	r2, [r3, #0]
			break;
 80016ce:	e023      	b.n	8001718 <PLL_PRESCALER+0x214>
		case RCC_CLK_PLL_MUL_15:
			RCC->CFGR |= RCC_PLL_MUL_15;
 80016d0:	4b14      	ldr	r3, [pc, #80]	; (8001724 <PLL_PRESCALER+0x220>)
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	4a13      	ldr	r2, [pc, #76]	; (8001724 <PLL_PRESCALER+0x220>)
 80016d6:	f443 1350 	orr.w	r3, r3, #3407872	; 0x340000
 80016da:	6053      	str	r3, [r2, #4]
			*SYS_CLK *=16;
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	011a      	lsls	r2, r3, #4
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	601a      	str	r2, [r3, #0]
			break;
 80016e6:	e017      	b.n	8001718 <PLL_PRESCALER+0x214>
		case RCC_CLK_PLL_MUL_16:
			RCC->CFGR |= RCC_PLL_MUL_16;
 80016e8:	4b0e      	ldr	r3, [pc, #56]	; (8001724 <PLL_PRESCALER+0x220>)
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	4a0d      	ldr	r2, [pc, #52]	; (8001724 <PLL_PRESCALER+0x220>)
 80016ee:	f443 1360 	orr.w	r3, r3, #3670016	; 0x380000
 80016f2:	6053      	str	r3, [r2, #4]
			*SYS_CLK *=16;
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	011a      	lsls	r2, r3, #4
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	601a      	str	r2, [r3, #0]
			break;
 80016fe:	e00b      	b.n	8001718 <PLL_PRESCALER+0x214>
		case RCC_CLK_PLL_MUL_16_1:
			RCC->CFGR |= RCC_PLL_MUL_16_1;
 8001700:	4b08      	ldr	r3, [pc, #32]	; (8001724 <PLL_PRESCALER+0x220>)
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	4a07      	ldr	r2, [pc, #28]	; (8001724 <PLL_PRESCALER+0x220>)
 8001706:	f443 1370 	orr.w	r3, r3, #3932160	; 0x3c0000
 800170a:	6053      	str	r3, [r2, #4]
			*SYS_CLK *=2;
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	005a      	lsls	r2, r3, #1
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	601a      	str	r2, [r3, #0]
			break;
 8001716:	bf00      	nop
	}
}
 8001718:	bf00      	nop
 800171a:	370c      	adds	r7, #12
 800171c:	46bd      	mov	sp, r7
 800171e:	bc80      	pop	{r7}
 8001720:	4770      	bx	lr
 8001722:	bf00      	nop
 8001724:	40021000 	.word	0x40021000

08001728 <SYS_CLK_HSI_Init>:

static void SYS_CLK_HSI_Init(RCC_t *RCC_R)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b082      	sub	sp, #8
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
	/*---Enable HSI CLOCK---*/
	RCC->CR |= RCC_CLOCK_HSI_EN_MSK;
 8001730:	4b18      	ldr	r3, [pc, #96]	; (8001794 <SYS_CLK_HSI_Init+0x6c>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a17      	ldr	r2, [pc, #92]	; (8001794 <SYS_CLK_HSI_Init+0x6c>)
 8001736:	f043 0301 	orr.w	r3, r3, #1
 800173a:	6013      	str	r3, [r2, #0]
	/*---Wait Until HSI CLOCK is Ready----*/
	while(!(RCC->CR & RCC_CLOCK_HSI_RDY_MSK));
 800173c:	bf00      	nop
 800173e:	4b15      	ldr	r3, [pc, #84]	; (8001794 <SYS_CLK_HSI_Init+0x6c>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f003 0302 	and.w	r3, r3, #2
 8001746:	2b00      	cmp	r3, #0
 8001748:	d0f9      	beq.n	800173e <SYS_CLK_HSI_Init+0x16>

	RCC->CR |= RCC_CLOCK_SECURITY_EN;
 800174a:	4b12      	ldr	r3, [pc, #72]	; (8001794 <SYS_CLK_HSI_Init+0x6c>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4a11      	ldr	r2, [pc, #68]	; (8001794 <SYS_CLK_HSI_Init+0x6c>)
 8001750:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001754:	6013      	str	r3, [r2, #0]
	RCC->APB1ENR |= RCC_APB1ENR_PWREN_EN;
 8001756:	4b0f      	ldr	r3, [pc, #60]	; (8001794 <SYS_CLK_HSI_Init+0x6c>)
 8001758:	69db      	ldr	r3, [r3, #28]
 800175a:	4a0e      	ldr	r2, [pc, #56]	; (8001794 <SYS_CLK_HSI_Init+0x6c>)
 800175c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001760:	61d3      	str	r3, [r2, #28]

	/*---Set Prescalers of AHB--*/
	AHB_PRESCALER(RCC_R->AHB_PRESCALER);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	78db      	ldrb	r3, [r3, #3]
 8001766:	4618      	mov	r0, r3
 8001768:	f7ff fd9e 	bl	80012a8 <AHB_PRESCALER>
	/*---Set Prescalers of APB1--*/
	APB1_PRESCALER(RCC_R->APB1_PRESCALER);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	791b      	ldrb	r3, [r3, #4]
 8001770:	4618      	mov	r0, r3
 8001772:	f7ff fe09 	bl	8001388 <APB1_PRESCALER>
	/*---Set Prescalers of APB2--*/
	APB2_PRESCALER(RCC_R->APB2_PRESCALER);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	795b      	ldrb	r3, [r3, #5]
 800177a:	4618      	mov	r0, r3
 800177c:	f7ff fe48 	bl	8001410 <APB2_PRESCALER>
	/*---Set ADC Prescaler------*/
	ADC_PRESCALER(RCC_R->ADC_PRESCALER);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	799b      	ldrb	r3, [r3, #6]
 8001784:	4618      	mov	r0, r3
 8001786:	f7ff fe87 	bl	8001498 <ADC_PRESCALER>

}
 800178a:	bf00      	nop
 800178c:	3708      	adds	r7, #8
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	40021000 	.word	0x40021000

08001798 <SYS_CLK_HSE_Init>:
static void SYS_CLK_HSE_Init(RCC_t *RCC_R)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b082      	sub	sp, #8
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
	/*---Enable HSI CLOCK---*/
	RCC->CR |= RCC_CLOCK_HSE_EN_MSK;
 80017a0:	4b18      	ldr	r3, [pc, #96]	; (8001804 <SYS_CLK_HSE_Init+0x6c>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a17      	ldr	r2, [pc, #92]	; (8001804 <SYS_CLK_HSE_Init+0x6c>)
 80017a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017aa:	6013      	str	r3, [r2, #0]
	/*---Wait Until HSI CLOCK is Ready----*/
	while (!(RCC->CR & RCC_CLOCK_HSE_READY_MASK));
 80017ac:	bf00      	nop
 80017ae:	4b15      	ldr	r3, [pc, #84]	; (8001804 <SYS_CLK_HSE_Init+0x6c>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d0f9      	beq.n	80017ae <SYS_CLK_HSE_Init+0x16>

	RCC->CR |= RCC_CLOCK_SECURITY_EN;
 80017ba:	4b12      	ldr	r3, [pc, #72]	; (8001804 <SYS_CLK_HSE_Init+0x6c>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4a11      	ldr	r2, [pc, #68]	; (8001804 <SYS_CLK_HSE_Init+0x6c>)
 80017c0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80017c4:	6013      	str	r3, [r2, #0]
	RCC->APB1ENR |= RCC_APB1ENR_PWREN_EN;
 80017c6:	4b0f      	ldr	r3, [pc, #60]	; (8001804 <SYS_CLK_HSE_Init+0x6c>)
 80017c8:	69db      	ldr	r3, [r3, #28]
 80017ca:	4a0e      	ldr	r2, [pc, #56]	; (8001804 <SYS_CLK_HSE_Init+0x6c>)
 80017cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017d0:	61d3      	str	r3, [r2, #28]

	/*---Set Prescalers of AHB--*/
	AHB_PRESCALER(RCC_R->AHB_PRESCALER);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	78db      	ldrb	r3, [r3, #3]
 80017d6:	4618      	mov	r0, r3
 80017d8:	f7ff fd66 	bl	80012a8 <AHB_PRESCALER>
	/*---Set Prescalers of APB1--*/
	APB1_PRESCALER(RCC_R->APB1_PRESCALER);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	791b      	ldrb	r3, [r3, #4]
 80017e0:	4618      	mov	r0, r3
 80017e2:	f7ff fdd1 	bl	8001388 <APB1_PRESCALER>
	/*---Set Prescalers of APB2--*/
	APB2_PRESCALER(RCC_R->APB2_PRESCALER);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	795b      	ldrb	r3, [r3, #5]
 80017ea:	4618      	mov	r0, r3
 80017ec:	f7ff fe10 	bl	8001410 <APB2_PRESCALER>
	/*---Set ADC Prescaler------*/
	ADC_PRESCALER(RCC_R->ADC_PRESCALER);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	799b      	ldrb	r3, [r3, #6]
 80017f4:	4618      	mov	r0, r3
 80017f6:	f7ff fe4f 	bl	8001498 <ADC_PRESCALER>

}
 80017fa:	bf00      	nop
 80017fc:	3708      	adds	r7, #8
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	40021000 	.word	0x40021000

08001808 <SYS_CLK_PLL_HSI_2>:

static void SYS_CLK_PLL_HSI_2(RCC_t *RCC_R,uint32_t *SYS_CLK)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
 8001810:	6039      	str	r1, [r7, #0]
	/*---Enable HSI CLOCK---*/
	RCC->CR |= RCC_CLOCK_HSI_EN_MSK;
 8001812:	4b20      	ldr	r3, [pc, #128]	; (8001894 <SYS_CLK_PLL_HSI_2+0x8c>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4a1f      	ldr	r2, [pc, #124]	; (8001894 <SYS_CLK_PLL_HSI_2+0x8c>)
 8001818:	f043 0301 	orr.w	r3, r3, #1
 800181c:	6013      	str	r3, [r2, #0]
	/*---Wait Until HSI CLOCK is Ready----*/
	while (!(RCC->CR & RCC_CLOCK_HSI_RDY_MSK));
 800181e:	bf00      	nop
 8001820:	4b1c      	ldr	r3, [pc, #112]	; (8001894 <SYS_CLK_PLL_HSI_2+0x8c>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f003 0302 	and.w	r3, r3, #2
 8001828:	2b00      	cmp	r3, #0
 800182a:	d0f9      	beq.n	8001820 <SYS_CLK_PLL_HSI_2+0x18>

	RCC->CR |= RCC_CLOCK_SECURITY_EN;
 800182c:	4b19      	ldr	r3, [pc, #100]	; (8001894 <SYS_CLK_PLL_HSI_2+0x8c>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a18      	ldr	r2, [pc, #96]	; (8001894 <SYS_CLK_PLL_HSI_2+0x8c>)
 8001832:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001836:	6013      	str	r3, [r2, #0]
	RCC->APB1ENR |= RCC_APB1ENR_PWREN_EN;
 8001838:	4b16      	ldr	r3, [pc, #88]	; (8001894 <SYS_CLK_PLL_HSI_2+0x8c>)
 800183a:	69db      	ldr	r3, [r3, #28]
 800183c:	4a15      	ldr	r2, [pc, #84]	; (8001894 <SYS_CLK_PLL_HSI_2+0x8c>)
 800183e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001842:	61d3      	str	r3, [r2, #28]

	*SYS_CLK = 4000000UL;
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	4a14      	ldr	r2, [pc, #80]	; (8001898 <SYS_CLK_PLL_HSI_2+0x90>)
 8001848:	601a      	str	r2, [r3, #0]
	/*---Select HSI as CLOCK-------*/
	RCC->CFGR |= RCC_PLL_SEL_HSI;
 800184a:	4b12      	ldr	r3, [pc, #72]	; (8001894 <SYS_CLK_PLL_HSI_2+0x8c>)
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	4a11      	ldr	r2, [pc, #68]	; (8001894 <SYS_CLK_PLL_HSI_2+0x8c>)
 8001850:	f463 3380 	orn	r3, r3, #65536	; 0x10000
 8001854:	6053      	str	r3, [r2, #4]
	/*---Set PLL prescalers--------*/
	PLL_PRESCALER(RCC_R->PLLO_MULT,SYS_CLK);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	789b      	ldrb	r3, [r3, #2]
 800185a:	6839      	ldr	r1, [r7, #0]
 800185c:	4618      	mov	r0, r3
 800185e:	f7ff fe51 	bl	8001504 <PLL_PRESCALER>
	/*---Set Prescalers of AHB--*/
	AHB_PRESCALER(RCC_R->AHB_PRESCALER);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	78db      	ldrb	r3, [r3, #3]
 8001866:	4618      	mov	r0, r3
 8001868:	f7ff fd1e 	bl	80012a8 <AHB_PRESCALER>
	/*---Set Prescalers of APB1--*/
	APB1_PRESCALER(RCC_R->APB1_PRESCALER);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	791b      	ldrb	r3, [r3, #4]
 8001870:	4618      	mov	r0, r3
 8001872:	f7ff fd89 	bl	8001388 <APB1_PRESCALER>
	/*---Set Prescalers of APB2--*/
	APB2_PRESCALER(RCC_R->APB2_PRESCALER);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	795b      	ldrb	r3, [r3, #5]
 800187a:	4618      	mov	r0, r3
 800187c:	f7ff fdc8 	bl	8001410 <APB2_PRESCALER>
	/*---Set ADC Prescaler------*/
	ADC_PRESCALER(RCC_R->ADC_PRESCALER);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	799b      	ldrb	r3, [r3, #6]
 8001884:	4618      	mov	r0, r3
 8001886:	f7ff fe07 	bl	8001498 <ADC_PRESCALER>

}
 800188a:	bf00      	nop
 800188c:	3708      	adds	r7, #8
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	40021000 	.word	0x40021000
 8001898:	003d0900 	.word	0x003d0900

0800189c <SYS_CLK_PLL_HSE>:

static void SYS_CLK_PLL_HSE(RCC_t *RCC_R,uint8_t SEL,uint32_t *SYS_CLK)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b084      	sub	sp, #16
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	60f8      	str	r0, [r7, #12]
 80018a4:	460b      	mov	r3, r1
 80018a6:	607a      	str	r2, [r7, #4]
 80018a8:	72fb      	strb	r3, [r7, #11]
	/*---Enable HSI CLOCK---*/
	RCC->CR |= RCC_CLOCK_HSE_EN_MSK;
 80018aa:	4b28      	ldr	r3, [pc, #160]	; (800194c <SYS_CLK_PLL_HSE+0xb0>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4a27      	ldr	r2, [pc, #156]	; (800194c <SYS_CLK_PLL_HSE+0xb0>)
 80018b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018b4:	6013      	str	r3, [r2, #0]
	/*---Wait Until HSI CLOCK is Ready----*/
	while (!(RCC->CR & RCC_CLOCK_HSE_READY_MASK));
 80018b6:	bf00      	nop
 80018b8:	4b24      	ldr	r3, [pc, #144]	; (800194c <SYS_CLK_PLL_HSE+0xb0>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d0f9      	beq.n	80018b8 <SYS_CLK_PLL_HSE+0x1c>

	RCC->CR |= RCC_CLOCK_SECURITY_EN;
 80018c4:	4b21      	ldr	r3, [pc, #132]	; (800194c <SYS_CLK_PLL_HSE+0xb0>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a20      	ldr	r2, [pc, #128]	; (800194c <SYS_CLK_PLL_HSE+0xb0>)
 80018ca:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80018ce:	6013      	str	r3, [r2, #0]
	RCC->APB1ENR |= RCC_APB1ENR_PWREN_EN;
 80018d0:	4b1e      	ldr	r3, [pc, #120]	; (800194c <SYS_CLK_PLL_HSE+0xb0>)
 80018d2:	69db      	ldr	r3, [r3, #28]
 80018d4:	4a1d      	ldr	r2, [pc, #116]	; (800194c <SYS_CLK_PLL_HSE+0xb0>)
 80018d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018da:	61d3      	str	r3, [r2, #28]

	/*---Select HSI as CLOCK-------*/
	if(SEL==RCC_CLK_PLL_SRC_HSE)
 80018dc:	7afb      	ldrb	r3, [r7, #11]
 80018de:	2b02      	cmp	r3, #2
 80018e0:	d109      	bne.n	80018f6 <SYS_CLK_PLL_HSE+0x5a>
	{
		*SYS_CLK  =  8000000UL;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	4a1a      	ldr	r2, [pc, #104]	; (8001950 <SYS_CLK_PLL_HSE+0xb4>)
 80018e6:	601a      	str	r2, [r3, #0]
		RCC->CFGR |= RCC_PLL_SEL_HSE;
 80018e8:	4b18      	ldr	r3, [pc, #96]	; (800194c <SYS_CLK_PLL_HSE+0xb0>)
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	4a17      	ldr	r2, [pc, #92]	; (800194c <SYS_CLK_PLL_HSE+0xb0>)
 80018ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018f2:	6053      	str	r3, [r2, #4]
 80018f4:	e00b      	b.n	800190e <SYS_CLK_PLL_HSE+0x72>
	}
	else if(SEL==RCC_CLK_PLL_SRC_HSE_2)
 80018f6:	7afb      	ldrb	r3, [r7, #11]
 80018f8:	2b03      	cmp	r3, #3
 80018fa:	d108      	bne.n	800190e <SYS_CLK_PLL_HSE+0x72>
	{
		*SYS_CLK  =  4000000UL;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	4a15      	ldr	r2, [pc, #84]	; (8001954 <SYS_CLK_PLL_HSE+0xb8>)
 8001900:	601a      	str	r2, [r3, #0]
		RCC->CFGR |= RCC_PLL_SEL_HSE| RCC_PLL_CLK_2;
 8001902:	4b12      	ldr	r3, [pc, #72]	; (800194c <SYS_CLK_PLL_HSE+0xb0>)
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	4a11      	ldr	r2, [pc, #68]	; (800194c <SYS_CLK_PLL_HSE+0xb0>)
 8001908:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 800190c:	6053      	str	r3, [r2, #4]
	}
	/*---Set PLL prescalers--------*/
	PLL_PRESCALER(RCC_R->PLLO_MULT,SYS_CLK);
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	789b      	ldrb	r3, [r3, #2]
 8001912:	6879      	ldr	r1, [r7, #4]
 8001914:	4618      	mov	r0, r3
 8001916:	f7ff fdf5 	bl	8001504 <PLL_PRESCALER>
	/*---Set Prescalers of AHB--*/
	AHB_PRESCALER(RCC_R->AHB_PRESCALER);
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	78db      	ldrb	r3, [r3, #3]
 800191e:	4618      	mov	r0, r3
 8001920:	f7ff fcc2 	bl	80012a8 <AHB_PRESCALER>
	/*---Set Prescalers of APB1--*/
	APB1_PRESCALER(RCC_R->APB1_PRESCALER);
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	791b      	ldrb	r3, [r3, #4]
 8001928:	4618      	mov	r0, r3
 800192a:	f7ff fd2d 	bl	8001388 <APB1_PRESCALER>
	/*---Set Prescalers of APB2--*/
	APB2_PRESCALER(RCC_R->APB2_PRESCALER);
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	795b      	ldrb	r3, [r3, #5]
 8001932:	4618      	mov	r0, r3
 8001934:	f7ff fd6c 	bl	8001410 <APB2_PRESCALER>
	/*---Set ADC Prescaler------*/
	ADC_PRESCALER(RCC_R->ADC_PRESCALER);
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	799b      	ldrb	r3, [r3, #6]
 800193c:	4618      	mov	r0, r3
 800193e:	f7ff fdab 	bl	8001498 <ADC_PRESCALER>

}
 8001942:	bf00      	nop
 8001944:	3710      	adds	r7, #16
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	40021000 	.word	0x40021000
 8001950:	007a1200 	.word	0x007a1200
 8001954:	003d0900 	.word	0x003d0900

08001958 <SYS_CLK_PLL_Init>:

static void SYS_CLK_PLL_Init(RCC_t *RCC_R,uint32_t* SYS_CLK)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b082      	sub	sp, #8
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
 8001960:	6039      	str	r1, [r7, #0]
	switch(RCC_R->PLL_SRC_SEL)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	785b      	ldrb	r3, [r3, #1]
 8001966:	2b03      	cmp	r3, #3
 8001968:	d013      	beq.n	8001992 <SYS_CLK_PLL_Init+0x3a>
 800196a:	2b03      	cmp	r3, #3
 800196c:	dc19      	bgt.n	80019a2 <SYS_CLK_PLL_Init+0x4a>
 800196e:	2b01      	cmp	r3, #1
 8001970:	d002      	beq.n	8001978 <SYS_CLK_PLL_Init+0x20>
 8001972:	2b02      	cmp	r3, #2
 8001974:	d005      	beq.n	8001982 <SYS_CLK_PLL_Init+0x2a>
 8001976:	e014      	b.n	80019a2 <SYS_CLK_PLL_Init+0x4a>
	{
		case RCC_CLK_PLL_SRC_HSI_2:
			SYS_CLK_PLL_HSI_2(RCC_R,SYS_CLK);
 8001978:	6839      	ldr	r1, [r7, #0]
 800197a:	6878      	ldr	r0, [r7, #4]
 800197c:	f7ff ff44 	bl	8001808 <SYS_CLK_PLL_HSI_2>
			break;
 8001980:	e00f      	b.n	80019a2 <SYS_CLK_PLL_Init+0x4a>
		case RCC_CLK_PLL_SRC_HSE:
			SYS_CLK_PLL_HSE(RCC_R,RCC_R->PLL_SRC_SEL,SYS_CLK);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	785b      	ldrb	r3, [r3, #1]
 8001986:	683a      	ldr	r2, [r7, #0]
 8001988:	4619      	mov	r1, r3
 800198a:	6878      	ldr	r0, [r7, #4]
 800198c:	f7ff ff86 	bl	800189c <SYS_CLK_PLL_HSE>
			break;
 8001990:	e007      	b.n	80019a2 <SYS_CLK_PLL_Init+0x4a>
		case RCC_CLK_PLL_SRC_HSE_2:
			SYS_CLK_PLL_HSE(RCC_R,RCC_R->PLL_SRC_SEL,SYS_CLK);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	785b      	ldrb	r3, [r3, #1]
 8001996:	683a      	ldr	r2, [r7, #0]
 8001998:	4619      	mov	r1, r3
 800199a:	6878      	ldr	r0, [r7, #4]
 800199c:	f7ff ff7e 	bl	800189c <SYS_CLK_PLL_HSE>
			break;
 80019a0:	bf00      	nop
	}
	/*---Enable PLL----*/
	RCC->CR |= RCC_PLL_ENABLE_MSK;
 80019a2:	4b09      	ldr	r3, [pc, #36]	; (80019c8 <SYS_CLK_PLL_Init+0x70>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4a08      	ldr	r2, [pc, #32]	; (80019c8 <SYS_CLK_PLL_Init+0x70>)
 80019a8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019ac:	6013      	str	r3, [r2, #0]
	/*----Wait Untill PLL is ready---*/
	while(!READ_BIT(RCC->CR,RCC_PLL_READY_POS));
 80019ae:	bf00      	nop
 80019b0:	4b05      	ldr	r3, [pc, #20]	; (80019c8 <SYS_CLK_PLL_Init+0x70>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	0e5b      	lsrs	r3, r3, #25
 80019b6:	f003 0301 	and.w	r3, r3, #1
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d0f8      	beq.n	80019b0 <SYS_CLK_PLL_Init+0x58>
}
 80019be:	bf00      	nop
 80019c0:	bf00      	nop
 80019c2:	3708      	adds	r7, #8
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	40021000 	.word	0x40021000

080019cc <FLASH_Config>:

static void FLASH_Config(uint32_t CLK_SPEED)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b083      	sub	sp, #12
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
	if (CLK_SPEED > 0 && CLK_SPEED <= 24000000UL)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d00a      	beq.n	80019f0 <FLASH_Config+0x24>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	4a12      	ldr	r2, [pc, #72]	; (8001a28 <FLASH_Config+0x5c>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d806      	bhi.n	80019f0 <FLASH_Config+0x24>
		FLASH->ACR |= FLASH_ACR_PRFTBE;
 80019e2:	4b12      	ldr	r3, [pc, #72]	; (8001a2c <FLASH_Config+0x60>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4a11      	ldr	r2, [pc, #68]	; (8001a2c <FLASH_Config+0x60>)
 80019e8:	f043 0310 	orr.w	r3, r3, #16
 80019ec:	6013      	str	r3, [r2, #0]
 80019ee:	e015      	b.n	8001a1c <FLASH_Config+0x50>
	else if (CLK_SPEED > 24000000UL && CLK_SPEED <= 48000000UL)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	4a0d      	ldr	r2, [pc, #52]	; (8001a28 <FLASH_Config+0x5c>)
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d90a      	bls.n	8001a0e <FLASH_Config+0x42>
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	4a0d      	ldr	r2, [pc, #52]	; (8001a30 <FLASH_Config+0x64>)
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d806      	bhi.n	8001a0e <FLASH_Config+0x42>
		FLASH->ACR |= FLASH_ACR_PRFTBE | FLASH_ACR_LATENCY_1;
 8001a00:	4b0a      	ldr	r3, [pc, #40]	; (8001a2c <FLASH_Config+0x60>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a09      	ldr	r2, [pc, #36]	; (8001a2c <FLASH_Config+0x60>)
 8001a06:	f043 0312 	orr.w	r3, r3, #18
 8001a0a:	6013      	str	r3, [r2, #0]
 8001a0c:	e006      	b.n	8001a1c <FLASH_Config+0x50>
	else
		FLASH->ACR |= FLASH_ACR_PRFTBE | FLASH_ACR_LATENCY_2;
 8001a0e:	4b07      	ldr	r3, [pc, #28]	; (8001a2c <FLASH_Config+0x60>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4a06      	ldr	r2, [pc, #24]	; (8001a2c <FLASH_Config+0x60>)
 8001a14:	f043 0314 	orr.w	r3, r3, #20
 8001a18:	6013      	str	r3, [r2, #0]
}
 8001a1a:	bf00      	nop
 8001a1c:	bf00      	nop
 8001a1e:	370c      	adds	r7, #12
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bc80      	pop	{r7}
 8001a24:	4770      	bx	lr
 8001a26:	bf00      	nop
 8001a28:	016e3600 	.word	0x016e3600
 8001a2c:	40022000 	.word	0x40022000
 8001a30:	02dc6c00 	.word	0x02dc6c00

08001a34 <SystemClock_Config>:

void SystemClock_Config(RCC_t * RCC_R)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b084      	sub	sp, #16
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
	if(RCC_R != NULL)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d04f      	beq.n	8001ae2 <SystemClock_Config+0xae>
	{
		uint32_t SYSC_CLK = 0;
 8001a42:	2300      	movs	r3, #0
 8001a44:	60fb      	str	r3, [r7, #12]
		/*--------Select CLK SRC---------*/
		switch(RCC_R->SYSCLK_SRC)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	781b      	ldrb	r3, [r3, #0]
 8001a4a:	2b03      	cmp	r3, #3
 8001a4c:	d038      	beq.n	8001ac0 <SystemClock_Config+0x8c>
 8001a4e:	2b03      	cmp	r3, #3
 8001a50:	dc47      	bgt.n	8001ae2 <SystemClock_Config+0xae>
 8001a52:	2b01      	cmp	r3, #1
 8001a54:	d002      	beq.n	8001a5c <SystemClock_Config+0x28>
 8001a56:	2b02      	cmp	r3, #2
 8001a58:	d018      	beq.n	8001a8c <SystemClock_Config+0x58>
				FLASH_Config(SYSC_CLK);
				RCC->CFGR |= RCC_CLK_PLL;
				break;
		}
	}
}
 8001a5a:	e042      	b.n	8001ae2 <SystemClock_Config+0xae>
				SYS_CLK_HSI_Init(RCC_R);
 8001a5c:	6878      	ldr	r0, [r7, #4]
 8001a5e:	f7ff fe63 	bl	8001728 <SYS_CLK_HSI_Init>
				FLASH_Config(SYSC_CLK);
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	4618      	mov	r0, r3
 8001a66:	f7ff ffb1 	bl	80019cc <FLASH_Config>
				RCC->CFGR |= RCC_CLK_HSI;
 8001a6a:	4b20      	ldr	r3, [pc, #128]	; (8001aec <SystemClock_Config+0xb8>)
 8001a6c:	4a1f      	ldr	r2, [pc, #124]	; (8001aec <SystemClock_Config+0xb8>)
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	6053      	str	r3, [r2, #4]
				RCC->CR &= ~RCC_CLOCK_HSE_EN_MSK;
 8001a72:	4b1e      	ldr	r3, [pc, #120]	; (8001aec <SystemClock_Config+0xb8>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4a1d      	ldr	r2, [pc, #116]	; (8001aec <SystemClock_Config+0xb8>)
 8001a78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a7c:	6013      	str	r3, [r2, #0]
				RCC->CR &= ~RCC_PLL_ENABLE_MSK;
 8001a7e:	4b1b      	ldr	r3, [pc, #108]	; (8001aec <SystemClock_Config+0xb8>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4a1a      	ldr	r2, [pc, #104]	; (8001aec <SystemClock_Config+0xb8>)
 8001a84:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a88:	6013      	str	r3, [r2, #0]
				break;
 8001a8a:	e02a      	b.n	8001ae2 <SystemClock_Config+0xae>
				SYS_CLK_HSE_Init(RCC_R);
 8001a8c:	6878      	ldr	r0, [r7, #4]
 8001a8e:	f7ff fe83 	bl	8001798 <SYS_CLK_HSE_Init>
				FLASH_Config(SYSC_CLK);
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	4618      	mov	r0, r3
 8001a96:	f7ff ff99 	bl	80019cc <FLASH_Config>
				RCC->CFGR |= RCC_CLK_HSE;
 8001a9a:	4b14      	ldr	r3, [pc, #80]	; (8001aec <SystemClock_Config+0xb8>)
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	4a13      	ldr	r2, [pc, #76]	; (8001aec <SystemClock_Config+0xb8>)
 8001aa0:	f043 0301 	orr.w	r3, r3, #1
 8001aa4:	6053      	str	r3, [r2, #4]
				RCC->CR &= ~RCC_PLL_ENABLE_MSK;
 8001aa6:	4b11      	ldr	r3, [pc, #68]	; (8001aec <SystemClock_Config+0xb8>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4a10      	ldr	r2, [pc, #64]	; (8001aec <SystemClock_Config+0xb8>)
 8001aac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ab0:	6013      	str	r3, [r2, #0]
				RCC->CR &= ~RCC_CLOCK_HSI_EN_MSK;
 8001ab2:	4b0e      	ldr	r3, [pc, #56]	; (8001aec <SystemClock_Config+0xb8>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4a0d      	ldr	r2, [pc, #52]	; (8001aec <SystemClock_Config+0xb8>)
 8001ab8:	f023 0301 	bic.w	r3, r3, #1
 8001abc:	6013      	str	r3, [r2, #0]
				break;
 8001abe:	e010      	b.n	8001ae2 <SystemClock_Config+0xae>
				SYS_CLK_PLL_Init(RCC_R,&SYSC_CLK);
 8001ac0:	f107 030c 	add.w	r3, r7, #12
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	6878      	ldr	r0, [r7, #4]
 8001ac8:	f7ff ff46 	bl	8001958 <SYS_CLK_PLL_Init>
				FLASH_Config(SYSC_CLK);
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f7ff ff7c 	bl	80019cc <FLASH_Config>
				RCC->CFGR |= RCC_CLK_PLL;
 8001ad4:	4b05      	ldr	r3, [pc, #20]	; (8001aec <SystemClock_Config+0xb8>)
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	4a04      	ldr	r2, [pc, #16]	; (8001aec <SystemClock_Config+0xb8>)
 8001ada:	f043 0302 	orr.w	r3, r3, #2
 8001ade:	6053      	str	r3, [r2, #4]
				break;
 8001ae0:	bf00      	nop
}
 8001ae2:	bf00      	nop
 8001ae4:	3710      	adds	r7, #16
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	40021000 	.word	0x40021000

08001af0 <__NVIC_EnableIRQ>:
{
 8001af0:	b480      	push	{r7}
 8001af2:	b083      	sub	sp, #12
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	4603      	mov	r3, r0
 8001af8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001afa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	db0b      	blt.n	8001b1a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b02:	79fb      	ldrb	r3, [r7, #7]
 8001b04:	f003 021f 	and.w	r2, r3, #31
 8001b08:	4906      	ldr	r1, [pc, #24]	; (8001b24 <__NVIC_EnableIRQ+0x34>)
 8001b0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b0e:	095b      	lsrs	r3, r3, #5
 8001b10:	2001      	movs	r0, #1
 8001b12:	fa00 f202 	lsl.w	r2, r0, r2
 8001b16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001b1a:	bf00      	nop
 8001b1c:	370c      	adds	r7, #12
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bc80      	pop	{r7}
 8001b22:	4770      	bx	lr
 8001b24:	e000e100 	.word	0xe000e100

08001b28 <__NVIC_SetPriority>:
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b083      	sub	sp, #12
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	4603      	mov	r3, r0
 8001b30:	6039      	str	r1, [r7, #0]
 8001b32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	db0a      	blt.n	8001b52 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	b2da      	uxtb	r2, r3
 8001b40:	490c      	ldr	r1, [pc, #48]	; (8001b74 <__NVIC_SetPriority+0x4c>)
 8001b42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b46:	0112      	lsls	r2, r2, #4
 8001b48:	b2d2      	uxtb	r2, r2
 8001b4a:	440b      	add	r3, r1
 8001b4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001b50:	e00a      	b.n	8001b68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	b2da      	uxtb	r2, r3
 8001b56:	4908      	ldr	r1, [pc, #32]	; (8001b78 <__NVIC_SetPriority+0x50>)
 8001b58:	79fb      	ldrb	r3, [r7, #7]
 8001b5a:	f003 030f 	and.w	r3, r3, #15
 8001b5e:	3b04      	subs	r3, #4
 8001b60:	0112      	lsls	r2, r2, #4
 8001b62:	b2d2      	uxtb	r2, r2
 8001b64:	440b      	add	r3, r1
 8001b66:	761a      	strb	r2, [r3, #24]
}
 8001b68:	bf00      	nop
 8001b6a:	370c      	adds	r7, #12
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bc80      	pop	{r7}
 8001b70:	4770      	bx	lr
 8001b72:	bf00      	nop
 8001b74:	e000e100 	.word	0xe000e100
 8001b78:	e000ed00 	.word	0xe000ed00

08001b7c <HAL_TIMER2_INT_init>:
	#endif
#endif

#if TIMER_TIM2_INT_EN == EN
static void HAL_TIMER2_INT_init(TimerU_D_t *Timer)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b082      	sub	sp, #8
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8001b84:	b672      	cpsid	i
}
 8001b86:	bf00      	nop
#if TIMER2_INT_TIME_BASE_EN ==EN || TIMER2_INT_CCP_CH1_EN==EN ||TIMER2_INT_CCP_CH2_EN ==EN\
	||(TIMER2_INT_CCP_CH3_EN   ==EN )||( TIMER2_INT_CCP_CH4_EN==EN)
	__disable_irq();
	switch (Timer->Mode) {
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	2b07      	cmp	r3, #7
 8001b8e:	d826      	bhi.n	8001bde <HAL_TIMER2_INT_init+0x62>
 8001b90:	a201      	add	r2, pc, #4	; (adr r2, 8001b98 <HAL_TIMER2_INT_init+0x1c>)
 8001b92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b96:	bf00      	nop
 8001b98:	08001bdf 	.word	0x08001bdf
 8001b9c:	08001bdf 	.word	0x08001bdf
 8001ba0:	08001bdf 	.word	0x08001bdf
 8001ba4:	08001bdf 	.word	0x08001bdf
 8001ba8:	08001bdf 	.word	0x08001bdf
 8001bac:	08001bb9 	.word	0x08001bb9
 8001bb0:	08001bdf 	.word	0x08001bdf
 8001bb4:	08001bb9 	.word	0x08001bb9
			#if TIMER2_INT_CCP_CH3_EN  ==EN
			Timer->Instance->DIER |= HAL_TIMER_CC3IF_MSK;
			Callback_3_TIM2 = Timer->TIMR_CH3_CBCK;
			#endif
			#if TIMER2_INT_CCP_CH4_EN  ==EN
			Timer->Instance->DIER |= HAL_TIMER_CC4IF_MSK;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	68da      	ldr	r2, [r3, #12]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f042 0210 	orr.w	r2, r2, #16
 8001bc6:	60da      	str	r2, [r3, #12]
			Callback_4_TIM2 = Timer->TIMR_CH4_CBCK;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bcc:	4a07      	ldr	r2, [pc, #28]	; (8001bec <HAL_TIMER2_INT_init+0x70>)
 8001bce:	6013      	str	r3, [r2, #0]
			#endif
			NVIC_SetPriority(TIM2_IRQn,0b0010);
 8001bd0:	2102      	movs	r1, #2
 8001bd2:	201c      	movs	r0, #28
 8001bd4:	f7ff ffa8 	bl	8001b28 <__NVIC_SetPriority>
			NVIC_EnableIRQ(TIM2_IRQn);
 8001bd8:	201c      	movs	r0, #28
 8001bda:	f7ff ff89 	bl	8001af0 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8001bde:	b662      	cpsie	i
}
 8001be0:	bf00      	nop
	}
	__enable_irq();
#endif
}
 8001be2:	bf00      	nop
 8001be4:	3708      	adds	r7, #8
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	200000cc 	.word	0x200000cc

08001bf0 <HAL_TIMER_INT_init>:
}
#endif

#if TIMER_TIM2_INT_EN == EN || TIMER_TIM3_INT_EN == EN || TIMER_TIM4_INT_EN == EN
static void HAL_TIMER_INT_init(TimerU_D_t *Timer)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b082      	sub	sp, #8
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
	#if TIMER_TIM2_INT_EN == EN
		if(Timer->Instance == TIM2)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c00:	d102      	bne.n	8001c08 <HAL_TIMER_INT_init+0x18>
			HAL_TIMER2_INT_init(Timer);
 8001c02:	6878      	ldr	r0, [r7, #4]
 8001c04:	f7ff ffba 	bl	8001b7c <HAL_TIMER2_INT_init>
	#endif
	#if TIMER_TIM4_INT_EN == EN
		if(Timer->Instance ==TIM4)
			HAL_TIMER4_INT_init(Timer);
	#endif
}
 8001c08:	bf00      	nop
 8001c0a:	3708      	adds	r7, #8
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}

08001c10 <HAL_TIMER_init>:
#endif

void HAL_TIMER_init(TimerU_D_t *Timer)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b082      	sub	sp, #8
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
	if(Timer != NULL)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d02f      	beq.n	8001c7e <HAL_TIMER_init+0x6e>
	{
		switch(Timer->Mode)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	2b07      	cmp	r3, #7
 8001c24:	d82c      	bhi.n	8001c80 <HAL_TIMER_init+0x70>
 8001c26:	a201      	add	r2, pc, #4	; (adr r2, 8001c2c <HAL_TIMER_init+0x1c>)
 8001c28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c2c:	08001c4d 	.word	0x08001c4d
 8001c30:	08001c4d 	.word	0x08001c4d
 8001c34:	08001c4d 	.word	0x08001c4d
 8001c38:	08001c81 	.word	0x08001c81
 8001c3c:	08001c4d 	.word	0x08001c4d
 8001c40:	08001c5b 	.word	0x08001c5b
 8001c44:	08001c69 	.word	0x08001c69
 8001c48:	08001c71 	.word	0x08001c71
		{
			case HAL_TIMER_UP_COUNTER:
			case HAL_TIMER_DOWN_COUNTER:
			case HAL_TIMER_UP_D_COUNTER_D_F:
			case HAL_TIMER_UP_D_COUNTER_U_D_F:
				HAL_TIMER_TIMEBASE_init(Timer);
 8001c4c:	6878      	ldr	r0, [r7, #4]
 8001c4e:	f000 f8c3 	bl	8001dd8 <HAL_TIMER_TIMEBASE_init>
				HAL_TIMER_INT_init(Timer);
 8001c52:	6878      	ldr	r0, [r7, #4]
 8001c54:	f7ff ffcc 	bl	8001bf0 <HAL_TIMER_INT_init>
				break;
 8001c58:	e012      	b.n	8001c80 <HAL_TIMER_init+0x70>
			case HAL_TIMER_OP_CMP_MODE:
				HAL_TIMER_OUTCMP_Init(Timer);
 8001c5a:	6878      	ldr	r0, [r7, #4]
 8001c5c:	f000 f9b8 	bl	8001fd0 <HAL_TIMER_OUTCMP_Init>
				HAL_TIMER_INT_init(Timer);
 8001c60:	6878      	ldr	r0, [r7, #4]
 8001c62:	f7ff ffc5 	bl	8001bf0 <HAL_TIMER_INT_init>
				break;
 8001c66:	e00b      	b.n	8001c80 <HAL_TIMER_init+0x70>
			case HAL_TIMER_OP_PWM_MODE:
				HAL_TIMER_PWM_init(Timer);
 8001c68:	6878      	ldr	r0, [r7, #4]
 8001c6a:	f000 fae5 	bl	8002238 <HAL_TIMER_PWM_init>
				break;
 8001c6e:	e007      	b.n	8001c80 <HAL_TIMER_init+0x70>
			case HAL_TIMER_IP_CAP_MODE:
				HAL_TIMER_IPCAP_init(Timer);
 8001c70:	6878      	ldr	r0, [r7, #4]
 8001c72:	f000 fbff 	bl	8002474 <HAL_TIMER_IPCAP_init>
				HAL_TIMER_INT_init(Timer);
 8001c76:	6878      	ldr	r0, [r7, #4]
 8001c78:	f7ff ffba 	bl	8001bf0 <HAL_TIMER_INT_init>
				break;
 8001c7c:	e000      	b.n	8001c80 <HAL_TIMER_init+0x70>
		}
	}
 8001c7e:	bf00      	nop
}
 8001c80:	bf00      	nop
 8001c82:	3708      	adds	r7, #8
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}

08001c88 <EN_CLOCK>:

static void EN_CLOCK(TimerU_D_t *Timer)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b083      	sub	sp, #12
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
	if (Timer->Instance == TIM2)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c98:	d106      	bne.n	8001ca8 <EN_CLOCK+0x20>
		HAL_RCC_TIMER2_EN();
 8001c9a:	4b11      	ldr	r3, [pc, #68]	; (8001ce0 <EN_CLOCK+0x58>)
 8001c9c:	69db      	ldr	r3, [r3, #28]
 8001c9e:	4a10      	ldr	r2, [pc, #64]	; (8001ce0 <EN_CLOCK+0x58>)
 8001ca0:	f043 0301 	orr.w	r3, r3, #1
 8001ca4:	61d3      	str	r3, [r2, #28]
	else if (Timer->Instance == TIM4)
		HAL_RCC_TIMER4_EN();
	else {

	}
}
 8001ca6:	e016      	b.n	8001cd6 <EN_CLOCK+0x4e>
	else if (Timer->Instance == TIM3)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a0d      	ldr	r2, [pc, #52]	; (8001ce4 <EN_CLOCK+0x5c>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d106      	bne.n	8001cc0 <EN_CLOCK+0x38>
		HAL_RCC_TIMER3_EN();
 8001cb2:	4b0b      	ldr	r3, [pc, #44]	; (8001ce0 <EN_CLOCK+0x58>)
 8001cb4:	69db      	ldr	r3, [r3, #28]
 8001cb6:	4a0a      	ldr	r2, [pc, #40]	; (8001ce0 <EN_CLOCK+0x58>)
 8001cb8:	f043 0302 	orr.w	r3, r3, #2
 8001cbc:	61d3      	str	r3, [r2, #28]
}
 8001cbe:	e00a      	b.n	8001cd6 <EN_CLOCK+0x4e>
	else if (Timer->Instance == TIM4)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a08      	ldr	r2, [pc, #32]	; (8001ce8 <EN_CLOCK+0x60>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d105      	bne.n	8001cd6 <EN_CLOCK+0x4e>
		HAL_RCC_TIMER4_EN();
 8001cca:	4b05      	ldr	r3, [pc, #20]	; (8001ce0 <EN_CLOCK+0x58>)
 8001ccc:	69db      	ldr	r3, [r3, #28]
 8001cce:	4a04      	ldr	r2, [pc, #16]	; (8001ce0 <EN_CLOCK+0x58>)
 8001cd0:	f043 0304 	orr.w	r3, r3, #4
 8001cd4:	61d3      	str	r3, [r2, #28]
}
 8001cd6:	bf00      	nop
 8001cd8:	370c      	adds	r7, #12
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bc80      	pop	{r7}
 8001cde:	4770      	bx	lr
 8001ce0:	40021000 	.word	0x40021000
 8001ce4:	40000400 	.word	0x40000400
 8001ce8:	40000800 	.word	0x40000800

08001cec <EN_CLOCK_OP>:

static void EN_CLOCK_OP(TimerU_D_t *Timer ,uint8_t Flag) {
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b084      	sub	sp, #16
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
 8001cf4:	460b      	mov	r3, r1
 8001cf6:	70fb      	strb	r3, [r7, #3]
	uint8_t CNT;
	if (Timer->Instance == TIM2) {
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d00:	d11d      	bne.n	8001d3e <EN_CLOCK_OP+0x52>
		HAL_RCC_TIMER2_EN();
 8001d02:	4b32      	ldr	r3, [pc, #200]	; (8001dcc <EN_CLOCK_OP+0xe0>)
 8001d04:	69db      	ldr	r3, [r3, #28]
 8001d06:	4a31      	ldr	r2, [pc, #196]	; (8001dcc <EN_CLOCK_OP+0xe0>)
 8001d08:	f043 0301 	orr.w	r3, r3, #1
 8001d0c:	61d3      	str	r3, [r2, #28]
		for (CNT = 0; CNT <= Timer->NO_CMP_CHNS - 1; CNT++)
 8001d0e:	2300      	movs	r3, #0
 8001d10:	73fb      	strb	r3, [r7, #15]
 8001d12:	e00d      	b.n	8001d30 <EN_CLOCK_OP+0x44>
			HAL_TIMER_CHN_CONFIG_GPIO(TIM2, Timer->CMP_CHN[CNT],Flag);
 8001d14:	7bfb      	ldrb	r3, [r7, #15]
 8001d16:	687a      	ldr	r2, [r7, #4]
 8001d18:	4413      	add	r3, r2
 8001d1a:	7f1b      	ldrb	r3, [r3, #28]
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	78fb      	ldrb	r3, [r7, #3]
 8001d20:	461a      	mov	r2, r3
 8001d22:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001d26:	f000 f8c5 	bl	8001eb4 <HAL_TIMER_CHN_CONFIG_GPIO>
		for (CNT = 0; CNT <= Timer->NO_CMP_CHNS - 1; CNT++)
 8001d2a:	7bfb      	ldrb	r3, [r7, #15]
 8001d2c:	3301      	adds	r3, #1
 8001d2e:	73fb      	strb	r3, [r7, #15]
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001d36:	7bfa      	ldrb	r2, [r7, #15]
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	d3eb      	bcc.n	8001d14 <EN_CLOCK_OP+0x28>
		for (CNT = 0; CNT <= Timer->NO_CMP_CHNS - 1; CNT++)
			HAL_TIMER_CHN_CONFIG_GPIO(TIM4, Timer->CMP_CHN[CNT],Flag);
	} else {

	}
}
 8001d3c:	e042      	b.n	8001dc4 <EN_CLOCK_OP+0xd8>
	} else if (Timer->Instance == TIM3) {
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a23      	ldr	r2, [pc, #140]	; (8001dd0 <EN_CLOCK_OP+0xe4>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d11c      	bne.n	8001d82 <EN_CLOCK_OP+0x96>
		HAL_RCC_TIMER3_EN();
 8001d48:	4b20      	ldr	r3, [pc, #128]	; (8001dcc <EN_CLOCK_OP+0xe0>)
 8001d4a:	69db      	ldr	r3, [r3, #28]
 8001d4c:	4a1f      	ldr	r2, [pc, #124]	; (8001dcc <EN_CLOCK_OP+0xe0>)
 8001d4e:	f043 0302 	orr.w	r3, r3, #2
 8001d52:	61d3      	str	r3, [r2, #28]
		for (CNT = 0; CNT <= Timer->NO_CMP_CHNS - 1; CNT++)
 8001d54:	2300      	movs	r3, #0
 8001d56:	73fb      	strb	r3, [r7, #15]
 8001d58:	e00c      	b.n	8001d74 <EN_CLOCK_OP+0x88>
			HAL_TIMER_CHN_CONFIG_GPIO(TIM3, Timer->CMP_CHN[CNT],Flag);
 8001d5a:	7bfb      	ldrb	r3, [r7, #15]
 8001d5c:	687a      	ldr	r2, [r7, #4]
 8001d5e:	4413      	add	r3, r2
 8001d60:	7f1b      	ldrb	r3, [r3, #28]
 8001d62:	4619      	mov	r1, r3
 8001d64:	78fb      	ldrb	r3, [r7, #3]
 8001d66:	461a      	mov	r2, r3
 8001d68:	4819      	ldr	r0, [pc, #100]	; (8001dd0 <EN_CLOCK_OP+0xe4>)
 8001d6a:	f000 f8a3 	bl	8001eb4 <HAL_TIMER_CHN_CONFIG_GPIO>
		for (CNT = 0; CNT <= Timer->NO_CMP_CHNS - 1; CNT++)
 8001d6e:	7bfb      	ldrb	r3, [r7, #15]
 8001d70:	3301      	adds	r3, #1
 8001d72:	73fb      	strb	r3, [r7, #15]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001d7a:	7bfa      	ldrb	r2, [r7, #15]
 8001d7c:	429a      	cmp	r2, r3
 8001d7e:	d3ec      	bcc.n	8001d5a <EN_CLOCK_OP+0x6e>
}
 8001d80:	e020      	b.n	8001dc4 <EN_CLOCK_OP+0xd8>
	} else if (Timer->Instance == TIM4) {
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a13      	ldr	r2, [pc, #76]	; (8001dd4 <EN_CLOCK_OP+0xe8>)
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d11b      	bne.n	8001dc4 <EN_CLOCK_OP+0xd8>
		HAL_RCC_TIMER4_EN();
 8001d8c:	4b0f      	ldr	r3, [pc, #60]	; (8001dcc <EN_CLOCK_OP+0xe0>)
 8001d8e:	69db      	ldr	r3, [r3, #28]
 8001d90:	4a0e      	ldr	r2, [pc, #56]	; (8001dcc <EN_CLOCK_OP+0xe0>)
 8001d92:	f043 0304 	orr.w	r3, r3, #4
 8001d96:	61d3      	str	r3, [r2, #28]
		for (CNT = 0; CNT <= Timer->NO_CMP_CHNS - 1; CNT++)
 8001d98:	2300      	movs	r3, #0
 8001d9a:	73fb      	strb	r3, [r7, #15]
 8001d9c:	e00c      	b.n	8001db8 <EN_CLOCK_OP+0xcc>
			HAL_TIMER_CHN_CONFIG_GPIO(TIM4, Timer->CMP_CHN[CNT],Flag);
 8001d9e:	7bfb      	ldrb	r3, [r7, #15]
 8001da0:	687a      	ldr	r2, [r7, #4]
 8001da2:	4413      	add	r3, r2
 8001da4:	7f1b      	ldrb	r3, [r3, #28]
 8001da6:	4619      	mov	r1, r3
 8001da8:	78fb      	ldrb	r3, [r7, #3]
 8001daa:	461a      	mov	r2, r3
 8001dac:	4809      	ldr	r0, [pc, #36]	; (8001dd4 <EN_CLOCK_OP+0xe8>)
 8001dae:	f000 f881 	bl	8001eb4 <HAL_TIMER_CHN_CONFIG_GPIO>
		for (CNT = 0; CNT <= Timer->NO_CMP_CHNS - 1; CNT++)
 8001db2:	7bfb      	ldrb	r3, [r7, #15]
 8001db4:	3301      	adds	r3, #1
 8001db6:	73fb      	strb	r3, [r7, #15]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001dbe:	7bfa      	ldrb	r2, [r7, #15]
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	d3ec      	bcc.n	8001d9e <EN_CLOCK_OP+0xb2>
}
 8001dc4:	bf00      	nop
 8001dc6:	3710      	adds	r7, #16
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	40021000 	.word	0x40021000
 8001dd0:	40000400 	.word	0x40000400
 8001dd4:	40000800 	.word	0x40000800

08001dd8 <HAL_TIMER_TIMEBASE_init>:

/*---Initilization of Timer in UP-DOWN-UP DOWN Counting As a Time Base---*/
static void HAL_TIMER_TIMEBASE_init(TimerU_D_t *Timer)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b082      	sub	sp, #8
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
	if( Timer != NULL)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d062      	beq.n	8001eac <HAL_TIMER_TIMEBASE_init+0xd4>
	{
		/*----Enable Timer Clock----*/
		EN_CLOCK(Timer);
 8001de6:	6878      	ldr	r0, [r7, #4]
 8001de8:	f7ff ff4e 	bl	8001c88 <EN_CLOCK>
		/*---Select Mode of operation----*/
		switch(Timer->Mode)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	2b04      	cmp	r3, #4
 8001df2:	d83a      	bhi.n	8001e6a <HAL_TIMER_TIMEBASE_init+0x92>
 8001df4:	a201      	add	r2, pc, #4	; (adr r2, 8001dfc <HAL_TIMER_TIMEBASE_init+0x24>)
 8001df6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dfa:	bf00      	nop
 8001dfc:	08001e11 	.word	0x08001e11
 8001e00:	08001e23 	.word	0x08001e23
 8001e04:	08001e35 	.word	0x08001e35
 8001e08:	08001e47 	.word	0x08001e47
 8001e0c:	08001e59 	.word	0x08001e59
		{
			case HAL_TIMER_UP_COUNTER:
				Timer->Instance->CR1 &= HAL_TIMER_CNT_U;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	681a      	ldr	r2, [r3, #0]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f022 0210 	bic.w	r2, r2, #16
 8001e1e:	601a      	str	r2, [r3, #0]
				break;
 8001e20:	e023      	b.n	8001e6a <HAL_TIMER_TIMEBASE_init+0x92>
			case HAL_TIMER_DOWN_COUNTER:
				Timer->Instance->CR1 |= HAL_TIMER_CNT_D;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f042 0210 	orr.w	r2, r2, #16
 8001e30:	601a      	str	r2, [r3, #0]
				break;
 8001e32:	e01a      	b.n	8001e6a <HAL_TIMER_TIMEBASE_init+0x92>
			case HAL_TIMER_UP_D_COUNTER_D_F:
				Timer->Instance->CR1 |=  HAL_TIMER_CNTR_D;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	681a      	ldr	r2, [r3, #0]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f042 0220 	orr.w	r2, r2, #32
 8001e42:	601a      	str	r2, [r3, #0]
				break;
 8001e44:	e011      	b.n	8001e6a <HAL_TIMER_TIMEBASE_init+0x92>
			case HAL_TIMER_UP_D_COUNTER_U_F:
				Timer->Instance->CR1 |= HAL_TIMER_CNTR_U;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001e54:	601a      	str	r2, [r3, #0]
				break;
 8001e56:	e008      	b.n	8001e6a <HAL_TIMER_TIMEBASE_init+0x92>
			case HAL_TIMER_UP_D_COUNTER_U_D_F:
				Timer->Instance->CR1 |= HAL_TIMER_CNTR_U_D;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	681a      	ldr	r2, [r3, #0]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8001e66:	601a      	str	r2, [r3, #0]
				break;
 8001e68:	bf00      	nop
		}
		switch(Timer->SH_EN)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d001      	beq.n	8001e76 <HAL_TIMER_TIMEBASE_init+0x9e>
 8001e72:	2b01      	cmp	r3, #1
		{
			case HAL_TIMER_SHR_EN:
				Timer->Instance->CR1 |= HAL_TIMER_SH_EN;
				break;
			case HAL_TIMER_SHR_DIS:
				break;
 8001e74:	e008      	b.n	8001e88 <HAL_TIMER_TIMEBASE_init+0xb0>
				Timer->Instance->CR1 |= HAL_TIMER_SH_EN;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	681a      	ldr	r2, [r3, #0]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001e84:	601a      	str	r2, [r3, #0]
				break;
 8001e86:	bf00      	nop
		}
		Timer->Instance->ARR = Timer->ARR_val;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	687a      	ldr	r2, [r7, #4]
 8001e8e:	6892      	ldr	r2, [r2, #8]
 8001e90:	62da      	str	r2, [r3, #44]	; 0x2c
		Timer->Instance->PSC = Timer->Prescaler;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	687a      	ldr	r2, [r7, #4]
 8001e98:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001e9a:	629a      	str	r2, [r3, #40]	; 0x28

		Timer->Instance->CR1 |= HAL_TIMER_CNT_EN;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f042 0201 	orr.w	r2, r2, #1
 8001eaa:	601a      	str	r2, [r3, #0]
	}
}
 8001eac:	bf00      	nop
 8001eae:	3708      	adds	r7, #8
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}

08001eb4 <HAL_TIMER_CHN_CONFIG_GPIO>:

static void HAL_TIMER_CHN_CONFIG_GPIO(TIM_TypeDef *TIME,uint32_t CHN,uint8_t FLAG)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b08c      	sub	sp, #48	; 0x30
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	60f8      	str	r0, [r7, #12]
 8001ebc:	60b9      	str	r1, [r7, #8]
 8001ebe:	4613      	mov	r3, r2
 8001ec0:	71fb      	strb	r3, [r7, #7]
	GPIO_t Pin;
	GPIO_TypeDef *GPIO_PORT=NULL;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	62fb      	str	r3, [r7, #44]	; 0x2c

	if(FLAG==0)
 8001ec6:	79fb      	ldrb	r3, [r7, #7]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d104      	bne.n	8001ed6 <HAL_TIMER_CHN_CONFIG_GPIO+0x22>
	{
		Pin.Mode  = HAL_GPIO_OUT_ALT_PP;
 8001ecc:	2303      	movs	r3, #3
 8001ece:	613b      	str	r3, [r7, #16]
		Pin.SPEED = HAL_GPIO_SPEED_FREQ_HIGH;
 8001ed0:	2303      	movs	r3, #3
 8001ed2:	617b      	str	r3, [r7, #20]
 8001ed4:	e003      	b.n	8001ede <HAL_TIMER_CHN_CONFIG_GPIO+0x2a>
	}
	else{
		Pin.Mode = HAL_GPIO_IN;
 8001ed6:	2305      	movs	r3, #5
 8001ed8:	613b      	str	r3, [r7, #16]
		Pin.PULL = HAL_GPIO_NOPULL;
 8001eda:	2300      	movs	r3, #0
 8001edc:	61fb      	str	r3, [r7, #28]
	}
	if (TIME == TIM2)
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ee4:	d11c      	bne.n	8001f20 <HAL_TIMER_CHN_CONFIG_GPIO+0x6c>
 8001ee6:	68bb      	ldr	r3, [r7, #8]
 8001ee8:	2b03      	cmp	r3, #3
 8001eea:	d816      	bhi.n	8001f1a <HAL_TIMER_CHN_CONFIG_GPIO+0x66>
 8001eec:	a201      	add	r2, pc, #4	; (adr r2, 8001ef4 <HAL_TIMER_CHN_CONFIG_GPIO+0x40>)
 8001eee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ef2:	bf00      	nop
 8001ef4:	08001f05 	.word	0x08001f05
 8001ef8:	08001f0b 	.word	0x08001f0b
 8001efc:	08001f11 	.word	0x08001f11
 8001f00:	08001f15 	.word	0x08001f15
	{

		switch (CHN) {
			case HAL_TIMER_CMP_OUT_CHN_1:
				Pin.PIN=GPIO_PIN_0;
 8001f04:	2300      	movs	r3, #0
 8001f06:	61bb      	str	r3, [r7, #24]
				break;
 8001f08:	e007      	b.n	8001f1a <HAL_TIMER_CHN_CONFIG_GPIO+0x66>
			case HAL_TIMER_CMP_OUT_CHN_2:
				Pin.PIN=GPIO_PIN_1;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	61bb      	str	r3, [r7, #24]
				break;
 8001f0e:	e004      	b.n	8001f1a <HAL_TIMER_CHN_CONFIG_GPIO+0x66>
			case HAL_TIMER_CMP_OUT_CHN_3:
				Pin.PIN=GPIO_PIN_2;
 8001f10:	2302      	movs	r3, #2
 8001f12:	61bb      	str	r3, [r7, #24]
			case HAL_TIMER_CMP_OUT_CHN_4:
				Pin.PIN=GPIO_PIN_3;
 8001f14:	2303      	movs	r3, #3
 8001f16:	61bb      	str	r3, [r7, #24]
				break;
 8001f18:	bf00      	nop
		}
		GPIO_PORT = GPIOA;
 8001f1a:	4b29      	ldr	r3, [pc, #164]	; (8001fc0 <HAL_TIMER_CHN_CONFIG_GPIO+0x10c>)
 8001f1c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f1e:	e044      	b.n	8001faa <HAL_TIMER_CHN_CONFIG_GPIO+0xf6>
	}
	else if (TIME == TIM3)
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	4a28      	ldr	r2, [pc, #160]	; (8001fc4 <HAL_TIMER_CHN_CONFIG_GPIO+0x110>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d120      	bne.n	8001f6a <HAL_TIMER_CHN_CONFIG_GPIO+0xb6>
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	2b03      	cmp	r3, #3
 8001f2c:	d83d      	bhi.n	8001faa <HAL_TIMER_CHN_CONFIG_GPIO+0xf6>
 8001f2e:	a201      	add	r2, pc, #4	; (adr r2, 8001f34 <HAL_TIMER_CHN_CONFIG_GPIO+0x80>)
 8001f30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f34:	08001f45 	.word	0x08001f45
 8001f38:	08001f4f 	.word	0x08001f4f
 8001f3c:	08001f59 	.word	0x08001f59
 8001f40:	08001f61 	.word	0x08001f61
	{
		switch (CHN) {
			case HAL_TIMER_CMP_OUT_CHN_1:
				GPIO_PORT = GPIOA;
 8001f44:	4b1e      	ldr	r3, [pc, #120]	; (8001fc0 <HAL_TIMER_CHN_CONFIG_GPIO+0x10c>)
 8001f46:	62fb      	str	r3, [r7, #44]	; 0x2c
				Pin.PIN=GPIO_PIN_6;
 8001f48:	2306      	movs	r3, #6
 8001f4a:	61bb      	str	r3, [r7, #24]
				break;
 8001f4c:	e02d      	b.n	8001faa <HAL_TIMER_CHN_CONFIG_GPIO+0xf6>
			case HAL_TIMER_CMP_OUT_CHN_2:
				GPIO_PORT = GPIOA;
 8001f4e:	4b1c      	ldr	r3, [pc, #112]	; (8001fc0 <HAL_TIMER_CHN_CONFIG_GPIO+0x10c>)
 8001f50:	62fb      	str	r3, [r7, #44]	; 0x2c
				Pin.PIN=GPIO_PIN_7;
 8001f52:	2307      	movs	r3, #7
 8001f54:	61bb      	str	r3, [r7, #24]
				break;
 8001f56:	e028      	b.n	8001faa <HAL_TIMER_CHN_CONFIG_GPIO+0xf6>
			case HAL_TIMER_CMP_OUT_CHN_3:
				GPIO_PORT = GPIOB;
 8001f58:	4b1b      	ldr	r3, [pc, #108]	; (8001fc8 <HAL_TIMER_CHN_CONFIG_GPIO+0x114>)
 8001f5a:	62fb      	str	r3, [r7, #44]	; 0x2c
				Pin.PIN=GPIO_PIN_0;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	61bb      	str	r3, [r7, #24]
			case HAL_TIMER_CMP_OUT_CHN_4:
				GPIO_PORT = GPIOB;
 8001f60:	4b19      	ldr	r3, [pc, #100]	; (8001fc8 <HAL_TIMER_CHN_CONFIG_GPIO+0x114>)
 8001f62:	62fb      	str	r3, [r7, #44]	; 0x2c
				Pin.PIN=GPIO_PIN_1;
 8001f64:	2301      	movs	r3, #1
 8001f66:	61bb      	str	r3, [r7, #24]
				break;
 8001f68:	e01f      	b.n	8001faa <HAL_TIMER_CHN_CONFIG_GPIO+0xf6>
		}
	}
	else if (TIME == TIM4)
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	4a17      	ldr	r2, [pc, #92]	; (8001fcc <HAL_TIMER_CHN_CONFIG_GPIO+0x118>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d11b      	bne.n	8001faa <HAL_TIMER_CHN_CONFIG_GPIO+0xf6>
 8001f72:	68bb      	ldr	r3, [r7, #8]
 8001f74:	2b03      	cmp	r3, #3
 8001f76:	d816      	bhi.n	8001fa6 <HAL_TIMER_CHN_CONFIG_GPIO+0xf2>
 8001f78:	a201      	add	r2, pc, #4	; (adr r2, 8001f80 <HAL_TIMER_CHN_CONFIG_GPIO+0xcc>)
 8001f7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f7e:	bf00      	nop
 8001f80:	08001f91 	.word	0x08001f91
 8001f84:	08001f97 	.word	0x08001f97
 8001f88:	08001f9d 	.word	0x08001f9d
 8001f8c:	08001fa1 	.word	0x08001fa1
	{
		switch (CHN) {
			case HAL_TIMER_CMP_OUT_CHN_1:
				Pin.PIN=GPIO_PIN_6;
 8001f90:	2306      	movs	r3, #6
 8001f92:	61bb      	str	r3, [r7, #24]
				break;
 8001f94:	e007      	b.n	8001fa6 <HAL_TIMER_CHN_CONFIG_GPIO+0xf2>
			case HAL_TIMER_CMP_OUT_CHN_2:
				Pin.PIN=GPIO_PIN_7;
 8001f96:	2307      	movs	r3, #7
 8001f98:	61bb      	str	r3, [r7, #24]
				break;
 8001f9a:	e004      	b.n	8001fa6 <HAL_TIMER_CHN_CONFIG_GPIO+0xf2>
			case HAL_TIMER_CMP_OUT_CHN_3:
				Pin.PIN=GPIO_PIN_8;
 8001f9c:	2308      	movs	r3, #8
 8001f9e:	61bb      	str	r3, [r7, #24]
			case HAL_TIMER_CMP_OUT_CHN_4:
				Pin.PIN=GPIO_PIN_9;
 8001fa0:	2309      	movs	r3, #9
 8001fa2:	61bb      	str	r3, [r7, #24]
				break;
 8001fa4:	bf00      	nop
		}
		GPIO_PORT = GPIOB;
 8001fa6:	4b08      	ldr	r3, [pc, #32]	; (8001fc8 <HAL_TIMER_CHN_CONFIG_GPIO+0x114>)
 8001fa8:	62fb      	str	r3, [r7, #44]	; 0x2c
	}
	else {

	}
	HAL_Init_PIN(GPIO_PORT,&Pin);
 8001faa:	f107 0310 	add.w	r3, r7, #16
 8001fae:	4619      	mov	r1, r3
 8001fb0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001fb2:	f7fe ffed 	bl	8000f90 <HAL_Init_PIN>
}
 8001fb6:	bf00      	nop
 8001fb8:	3730      	adds	r7, #48	; 0x30
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	40010800 	.word	0x40010800
 8001fc4:	40000400 	.word	0x40000400
 8001fc8:	40010c00 	.word	0x40010c00
 8001fcc:	40000800 	.word	0x40000800

08001fd0 <HAL_TIMER_OUTCMP_Init>:

static void HAL_TIMER_OUTCMP_Init(TimerU_D_t *Timer)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b084      	sub	sp, #16
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
	if(Timer != NULL)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	f000 8128 	beq.w	8002230 <HAL_TIMER_OUTCMP_Init+0x260>
	{
		uint8_t CNT=0;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	73fb      	strb	r3, [r7, #15]
		/*----Enable Timer Clock----*/
		EN_CLOCK_OP(Timer,0);
 8001fe4:	2100      	movs	r1, #0
 8001fe6:	6878      	ldr	r0, [r7, #4]
 8001fe8:	f7ff fe80 	bl	8001cec <EN_CLOCK_OP>

		/*-----------Enable Channel----------*/
		for(CNT=0;CNT<=Timer->NO_CMP_CHNS-1;CNT++)
 8001fec:	2300      	movs	r3, #0
 8001fee:	73fb      	strb	r3, [r7, #15]
 8001ff0:	e105      	b.n	80021fe <HAL_TIMER_OUTCMP_Init+0x22e>
		{
			switch (Timer->CMP_CHN[CNT]) {
 8001ff2:	7bfb      	ldrb	r3, [r7, #15]
 8001ff4:	687a      	ldr	r2, [r7, #4]
 8001ff6:	4413      	add	r3, r2
 8001ff8:	7f1b      	ldrb	r3, [r3, #28]
 8001ffa:	2b03      	cmp	r3, #3
 8001ffc:	f200 80fc 	bhi.w	80021f8 <HAL_TIMER_OUTCMP_Init+0x228>
 8002000:	a201      	add	r2, pc, #4	; (adr r2, 8002008 <HAL_TIMER_OUTCMP_Init+0x38>)
 8002002:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002006:	bf00      	nop
 8002008:	08002019 	.word	0x08002019
 800200c:	08002091 	.word	0x08002091
 8002010:	08002109 	.word	0x08002109
 8002014:	08002181 	.word	0x08002181
			case HAL_TIMER_CMP_OUT_CHN_1:
				switch (Timer->CMP_Modes[CNT]) {
 8002018:	7bfb      	ldrb	r3, [r7, #15]
 800201a:	687a      	ldr	r2, [r7, #4]
 800201c:	4413      	add	r3, r2
 800201e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002022:	2b0a      	cmp	r3, #10
 8002024:	d018      	beq.n	8002058 <HAL_TIMER_OUTCMP_Init+0x88>
 8002026:	2b0a      	cmp	r3, #10
 8002028:	dc1f      	bgt.n	800206a <HAL_TIMER_OUTCMP_Init+0x9a>
 800202a:	2b08      	cmp	r3, #8
 800202c:	d002      	beq.n	8002034 <HAL_TIMER_OUTCMP_Init+0x64>
 800202e:	2b09      	cmp	r3, #9
 8002030:	d009      	beq.n	8002046 <HAL_TIMER_OUTCMP_Init+0x76>
 8002032:	e01a      	b.n	800206a <HAL_TIMER_OUTCMP_Init+0x9a>
					case HAL_TIMER_OUPUT_CMP_MODE_ACTIVE:
						Timer->Instance->CCMR1 |= (0b001<<4);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	699a      	ldr	r2, [r3, #24]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f042 0210 	orr.w	r2, r2, #16
 8002042:	619a      	str	r2, [r3, #24]
						break;
 8002044:	e011      	b.n	800206a <HAL_TIMER_OUTCMP_Init+0x9a>
					case HAL_TIMER_OUPUT_CMP_MODE_TOGGLE:
						Timer->Instance->CCMR1 |= (0b011<<4);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	699a      	ldr	r2, [r3, #24]
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 8002054:	619a      	str	r2, [r3, #24]
						break;
 8002056:	e008      	b.n	800206a <HAL_TIMER_OUTCMP_Init+0x9a>
					case HAL_TIMER_OUPUT_CMP_MODE_ACTLOW:
						Timer->Instance->CCMR1 |= (0b010<<4);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	699a      	ldr	r2, [r3, #24]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f042 0220 	orr.w	r2, r2, #32
 8002066:	619a      	str	r2, [r3, #24]
						break;
 8002068:	bf00      	nop
				}
				Timer->Instance->CCR1 = (Timer->CCR_val[CNT] & 0xFFFF);
 800206a:	7bfb      	ldrb	r3, [r7, #15]
 800206c:	687a      	ldr	r2, [r7, #4]
 800206e:	3302      	adds	r3, #2
 8002070:	009b      	lsls	r3, r3, #2
 8002072:	4413      	add	r3, r2
 8002074:	685a      	ldr	r2, [r3, #4]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	b292      	uxth	r2, r2
 800207c:	635a      	str	r2, [r3, #52]	; 0x34
				Timer->Instance->CCER |= (1 << HAL_TIMER_CC1E_POS);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	6a1a      	ldr	r2, [r3, #32]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f042 0201 	orr.w	r2, r2, #1
 800208c:	621a      	str	r2, [r3, #32]
				break;
 800208e:	e0b3      	b.n	80021f8 <HAL_TIMER_OUTCMP_Init+0x228>
			case HAL_TIMER_CMP_OUT_CHN_2:
				switch (Timer->CMP_Modes[CNT]) {
 8002090:	7bfb      	ldrb	r3, [r7, #15]
 8002092:	687a      	ldr	r2, [r7, #4]
 8002094:	4413      	add	r3, r2
 8002096:	f893 3020 	ldrb.w	r3, [r3, #32]
 800209a:	2b0a      	cmp	r3, #10
 800209c:	d018      	beq.n	80020d0 <HAL_TIMER_OUTCMP_Init+0x100>
 800209e:	2b0a      	cmp	r3, #10
 80020a0:	dc1f      	bgt.n	80020e2 <HAL_TIMER_OUTCMP_Init+0x112>
 80020a2:	2b08      	cmp	r3, #8
 80020a4:	d002      	beq.n	80020ac <HAL_TIMER_OUTCMP_Init+0xdc>
 80020a6:	2b09      	cmp	r3, #9
 80020a8:	d009      	beq.n	80020be <HAL_TIMER_OUTCMP_Init+0xee>
 80020aa:	e01a      	b.n	80020e2 <HAL_TIMER_OUTCMP_Init+0x112>
					case HAL_TIMER_OUPUT_CMP_MODE_ACTIVE:
						Timer->Instance->CCMR1 |= (0b001<<12);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	699a      	ldr	r2, [r3, #24]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80020ba:	619a      	str	r2, [r3, #24]
						break;
 80020bc:	e011      	b.n	80020e2 <HAL_TIMER_OUTCMP_Init+0x112>
					case HAL_TIMER_OUPUT_CMP_MODE_TOGGLE:
						Timer->Instance->CCMR1 |= (0b011<<12);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	699a      	ldr	r2, [r3, #24]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 80020cc:	619a      	str	r2, [r3, #24]
						break;
 80020ce:	e008      	b.n	80020e2 <HAL_TIMER_OUTCMP_Init+0x112>
					case HAL_TIMER_OUPUT_CMP_MODE_ACTLOW:
						Timer->Instance->CCMR1 |= (0b010<<12);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	699a      	ldr	r2, [r3, #24]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80020de:	619a      	str	r2, [r3, #24]
						break;
 80020e0:	bf00      	nop
				}
				Timer->Instance->CCR2 = (Timer->CCR_val[CNT] & 0xFFFF);
 80020e2:	7bfb      	ldrb	r3, [r7, #15]
 80020e4:	687a      	ldr	r2, [r7, #4]
 80020e6:	3302      	adds	r3, #2
 80020e8:	009b      	lsls	r3, r3, #2
 80020ea:	4413      	add	r3, r2
 80020ec:	685a      	ldr	r2, [r3, #4]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	b292      	uxth	r2, r2
 80020f4:	639a      	str	r2, [r3, #56]	; 0x38
				Timer->Instance->CCER |= (1 << HAL_TIMER_CC2E_POS);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	6a1a      	ldr	r2, [r3, #32]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f042 0210 	orr.w	r2, r2, #16
 8002104:	621a      	str	r2, [r3, #32]
				break;
 8002106:	e077      	b.n	80021f8 <HAL_TIMER_OUTCMP_Init+0x228>
			case HAL_TIMER_CMP_OUT_CHN_3:
				switch (Timer->CMP_Modes[CNT]) {
 8002108:	7bfb      	ldrb	r3, [r7, #15]
 800210a:	687a      	ldr	r2, [r7, #4]
 800210c:	4413      	add	r3, r2
 800210e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002112:	2b0a      	cmp	r3, #10
 8002114:	d018      	beq.n	8002148 <HAL_TIMER_OUTCMP_Init+0x178>
 8002116:	2b0a      	cmp	r3, #10
 8002118:	dc1f      	bgt.n	800215a <HAL_TIMER_OUTCMP_Init+0x18a>
 800211a:	2b08      	cmp	r3, #8
 800211c:	d002      	beq.n	8002124 <HAL_TIMER_OUTCMP_Init+0x154>
 800211e:	2b09      	cmp	r3, #9
 8002120:	d009      	beq.n	8002136 <HAL_TIMER_OUTCMP_Init+0x166>
 8002122:	e01a      	b.n	800215a <HAL_TIMER_OUTCMP_Init+0x18a>
					case HAL_TIMER_OUPUT_CMP_MODE_ACTIVE:
						Timer->Instance->CCMR2 |= (0b001<<4);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	69da      	ldr	r2, [r3, #28]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f042 0210 	orr.w	r2, r2, #16
 8002132:	61da      	str	r2, [r3, #28]
						break;
 8002134:	e011      	b.n	800215a <HAL_TIMER_OUTCMP_Init+0x18a>
					case HAL_TIMER_OUPUT_CMP_MODE_TOGGLE:
						Timer->Instance->CCMR2 |= (0b011<<4);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	69da      	ldr	r2, [r3, #28]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 8002144:	61da      	str	r2, [r3, #28]
						break;
 8002146:	e008      	b.n	800215a <HAL_TIMER_OUTCMP_Init+0x18a>
					case HAL_TIMER_OUPUT_CMP_MODE_ACTLOW:
						Timer->Instance->CCMR2 |= (0b010<<4);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	69da      	ldr	r2, [r3, #28]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f042 0220 	orr.w	r2, r2, #32
 8002156:	61da      	str	r2, [r3, #28]
						break;
 8002158:	bf00      	nop
				}
				Timer->Instance->CCR3 = (Timer->CCR_val[CNT] & 0xFFFF);
 800215a:	7bfb      	ldrb	r3, [r7, #15]
 800215c:	687a      	ldr	r2, [r7, #4]
 800215e:	3302      	adds	r3, #2
 8002160:	009b      	lsls	r3, r3, #2
 8002162:	4413      	add	r3, r2
 8002164:	685a      	ldr	r2, [r3, #4]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	b292      	uxth	r2, r2
 800216c:	63da      	str	r2, [r3, #60]	; 0x3c
				Timer->Instance->CCER |= (1 << HAL_TIMER_CC3E_POS);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	6a1a      	ldr	r2, [r3, #32]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800217c:	621a      	str	r2, [r3, #32]
				break;
 800217e:	e03b      	b.n	80021f8 <HAL_TIMER_OUTCMP_Init+0x228>
			case HAL_TIMER_CMP_OUT_CHN_4:
				switch (Timer->CMP_Modes[CNT]) {
 8002180:	7bfb      	ldrb	r3, [r7, #15]
 8002182:	687a      	ldr	r2, [r7, #4]
 8002184:	4413      	add	r3, r2
 8002186:	f893 3020 	ldrb.w	r3, [r3, #32]
 800218a:	2b0a      	cmp	r3, #10
 800218c:	d018      	beq.n	80021c0 <HAL_TIMER_OUTCMP_Init+0x1f0>
 800218e:	2b0a      	cmp	r3, #10
 8002190:	dc1f      	bgt.n	80021d2 <HAL_TIMER_OUTCMP_Init+0x202>
 8002192:	2b08      	cmp	r3, #8
 8002194:	d002      	beq.n	800219c <HAL_TIMER_OUTCMP_Init+0x1cc>
 8002196:	2b09      	cmp	r3, #9
 8002198:	d009      	beq.n	80021ae <HAL_TIMER_OUTCMP_Init+0x1de>
 800219a:	e01a      	b.n	80021d2 <HAL_TIMER_OUTCMP_Init+0x202>
					case HAL_TIMER_OUPUT_CMP_MODE_ACTIVE:
						Timer->Instance->CCMR2 |= (0b001<<12);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	69da      	ldr	r2, [r3, #28]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80021aa:	61da      	str	r2, [r3, #28]
						break;
 80021ac:	e011      	b.n	80021d2 <HAL_TIMER_OUTCMP_Init+0x202>
					case HAL_TIMER_OUPUT_CMP_MODE_TOGGLE:
						Timer->Instance->CCMR2 |= (0b011<<12);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	69da      	ldr	r2, [r3, #28]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 80021bc:	61da      	str	r2, [r3, #28]
						break;
 80021be:	e008      	b.n	80021d2 <HAL_TIMER_OUTCMP_Init+0x202>
					case HAL_TIMER_OUPUT_CMP_MODE_ACTLOW:
						Timer->Instance->CCMR2 |= (0b010<<12);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	69da      	ldr	r2, [r3, #28]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80021ce:	61da      	str	r2, [r3, #28]
						break;
 80021d0:	bf00      	nop
				}
				Timer->Instance->CCR4 = (Timer->CCR_val[CNT] & 0xFFFF);
 80021d2:	7bfb      	ldrb	r3, [r7, #15]
 80021d4:	687a      	ldr	r2, [r7, #4]
 80021d6:	3302      	adds	r3, #2
 80021d8:	009b      	lsls	r3, r3, #2
 80021da:	4413      	add	r3, r2
 80021dc:	685a      	ldr	r2, [r3, #4]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	b292      	uxth	r2, r2
 80021e4:	641a      	str	r2, [r3, #64]	; 0x40
				Timer->Instance->CCER |= (1 << HAL_TIMER_CC4E_POS);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	6a1a      	ldr	r2, [r3, #32]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80021f4:	621a      	str	r2, [r3, #32]
				break;
 80021f6:	bf00      	nop
		for(CNT=0;CNT<=Timer->NO_CMP_CHNS-1;CNT++)
 80021f8:	7bfb      	ldrb	r3, [r7, #15]
 80021fa:	3301      	adds	r3, #1
 80021fc:	73fb      	strb	r3, [r7, #15]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002204:	7bfa      	ldrb	r2, [r7, #15]
 8002206:	429a      	cmp	r2, r3
 8002208:	f4ff aef3 	bcc.w	8001ff2 <HAL_TIMER_OUTCMP_Init+0x22>
			}
		}
		Timer->Instance->ARR = Timer->ARR_val;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	687a      	ldr	r2, [r7, #4]
 8002212:	6892      	ldr	r2, [r2, #8]
 8002214:	62da      	str	r2, [r3, #44]	; 0x2c

		Timer->Instance->PSC = Timer->Prescaler;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	687a      	ldr	r2, [r7, #4]
 800221c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800221e:	629a      	str	r2, [r3, #40]	; 0x28

		Timer->Instance->CR1 |= HAL_TIMER_CNT_EN;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	681a      	ldr	r2, [r3, #0]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f042 0201 	orr.w	r2, r2, #1
 800222e:	601a      	str	r2, [r3, #0]
	}
}
 8002230:	bf00      	nop
 8002232:	3710      	adds	r7, #16
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}

08002238 <HAL_TIMER_PWM_init>:

static void HAL_TIMER_PWM_init(TimerU_D_t *Timer)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b084      	sub	sp, #16
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
	if(Timer != NULL)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2b00      	cmp	r3, #0
 8002244:	f000 8110 	beq.w	8002468 <HAL_TIMER_PWM_init+0x230>
	{
		uint8_t CNT=0;
 8002248:	2300      	movs	r3, #0
 800224a:	73fb      	strb	r3, [r7, #15]
		/*--------ENable CLOCK----*/
		EN_CLOCK_OP(Timer,0);
 800224c:	2100      	movs	r1, #0
 800224e:	6878      	ldr	r0, [r7, #4]
 8002250:	f7ff fd4c 	bl	8001cec <EN_CLOCK_OP>

		Timer->Instance->ARR = Timer->ARR_val;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	687a      	ldr	r2, [r7, #4]
 800225a:	6892      	ldr	r2, [r2, #8]
 800225c:	62da      	str	r2, [r3, #44]	; 0x2c
		Timer->Instance->PSC = Timer->Prescaler;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	687a      	ldr	r2, [r7, #4]
 8002264:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002266:	629a      	str	r2, [r3, #40]	; 0x28
		for (CNT = 0; CNT <= Timer->NO_CMP_CHNS - 1; CNT++) {
 8002268:	2300      	movs	r3, #0
 800226a:	73fb      	strb	r3, [r7, #15]
 800226c:	e0ed      	b.n	800244a <HAL_TIMER_PWM_init+0x212>
			switch (Timer->CMP_CHN[CNT]) {
 800226e:	7bfb      	ldrb	r3, [r7, #15]
 8002270:	687a      	ldr	r2, [r7, #4]
 8002272:	4413      	add	r3, r2
 8002274:	7f1b      	ldrb	r3, [r3, #28]
 8002276:	2b03      	cmp	r3, #3
 8002278:	f200 80e4 	bhi.w	8002444 <HAL_TIMER_PWM_init+0x20c>
 800227c:	a201      	add	r2, pc, #4	; (adr r2, 8002284 <HAL_TIMER_PWM_init+0x4c>)
 800227e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002282:	bf00      	nop
 8002284:	08002295 	.word	0x08002295
 8002288:	08002301 	.word	0x08002301
 800228c:	0800236d 	.word	0x0800236d
 8002290:	080023d9 	.word	0x080023d9
			case HAL_TIMER_CMP_OUT_CHN_1:
				switch (Timer->CMP_Modes[CNT]) {
 8002294:	7bfb      	ldrb	r3, [r7, #15]
 8002296:	687a      	ldr	r2, [r7, #4]
 8002298:	4413      	add	r3, r2
 800229a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800229e:	2b0b      	cmp	r3, #11
 80022a0:	d002      	beq.n	80022a8 <HAL_TIMER_PWM_init+0x70>
 80022a2:	2b0c      	cmp	r3, #12
 80022a4:	d009      	beq.n	80022ba <HAL_TIMER_PWM_init+0x82>
 80022a6:	e011      	b.n	80022cc <HAL_TIMER_PWM_init+0x94>
					case HAL_TIMER_PWM_OUT_MODE1:
						Timer->Instance->CCMR1 |= (0b110 << 4);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	699a      	ldr	r2, [r3, #24]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80022b6:	619a      	str	r2, [r3, #24]
						break;
 80022b8:	e008      	b.n	80022cc <HAL_TIMER_PWM_init+0x94>
					case HAL_TIMER_PWM_OUT_MODE2:
						Timer->Instance->CCMR1 |= (0b111 << 4);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	699a      	ldr	r2, [r3, #24]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f042 0270 	orr.w	r2, r2, #112	; 0x70
 80022c8:	619a      	str	r2, [r3, #24]
						break;
 80022ca:	bf00      	nop
				}
				Timer->Instance->CCR1 = ((Timer->CCR_val[CNT] * Timer->ARR_val)/100);
 80022cc:	7bfb      	ldrb	r3, [r7, #15]
 80022ce:	687a      	ldr	r2, [r7, #4]
 80022d0:	3302      	adds	r3, #2
 80022d2:	009b      	lsls	r3, r3, #2
 80022d4:	4413      	add	r3, r2
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	687a      	ldr	r2, [r7, #4]
 80022da:	6892      	ldr	r2, [r2, #8]
 80022dc:	fb02 f203 	mul.w	r2, r2, r3
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4962      	ldr	r1, [pc, #392]	; (8002470 <HAL_TIMER_PWM_init+0x238>)
 80022e6:	fba1 1202 	umull	r1, r2, r1, r2
 80022ea:	0952      	lsrs	r2, r2, #5
 80022ec:	635a      	str	r2, [r3, #52]	; 0x34
				Timer->Instance->CCER |= (1 << HAL_TIMER_CC1E_POS);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	6a1a      	ldr	r2, [r3, #32]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f042 0201 	orr.w	r2, r2, #1
 80022fc:	621a      	str	r2, [r3, #32]
				break;
 80022fe:	e0a1      	b.n	8002444 <HAL_TIMER_PWM_init+0x20c>
			case HAL_TIMER_CMP_OUT_CHN_2:
				switch (Timer->CMP_Modes[CNT]) {
 8002300:	7bfb      	ldrb	r3, [r7, #15]
 8002302:	687a      	ldr	r2, [r7, #4]
 8002304:	4413      	add	r3, r2
 8002306:	f893 3020 	ldrb.w	r3, [r3, #32]
 800230a:	2b0b      	cmp	r3, #11
 800230c:	d002      	beq.n	8002314 <HAL_TIMER_PWM_init+0xdc>
 800230e:	2b0c      	cmp	r3, #12
 8002310:	d009      	beq.n	8002326 <HAL_TIMER_PWM_init+0xee>
 8002312:	e011      	b.n	8002338 <HAL_TIMER_PWM_init+0x100>
					case HAL_TIMER_PWM_OUT_MODE1:
						Timer->Instance->CCMR1 |= (0b110 << 12);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	699a      	ldr	r2, [r3, #24]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 8002322:	619a      	str	r2, [r3, #24]
						break;
 8002324:	e008      	b.n	8002338 <HAL_TIMER_PWM_init+0x100>
					case HAL_TIMER_PWM_OUT_MODE2:
						Timer->Instance->CCMR1 |= (0b111 << 12);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	699a      	ldr	r2, [r3, #24]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f442 42e0 	orr.w	r2, r2, #28672	; 0x7000
 8002334:	619a      	str	r2, [r3, #24]
						break;
 8002336:	bf00      	nop
				}
				Timer->Instance->CCR2 = ((Timer->CCR_val[CNT] * Timer->ARR_val)/100);
 8002338:	7bfb      	ldrb	r3, [r7, #15]
 800233a:	687a      	ldr	r2, [r7, #4]
 800233c:	3302      	adds	r3, #2
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	4413      	add	r3, r2
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	687a      	ldr	r2, [r7, #4]
 8002346:	6892      	ldr	r2, [r2, #8]
 8002348:	fb02 f203 	mul.w	r2, r2, r3
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4947      	ldr	r1, [pc, #284]	; (8002470 <HAL_TIMER_PWM_init+0x238>)
 8002352:	fba1 1202 	umull	r1, r2, r1, r2
 8002356:	0952      	lsrs	r2, r2, #5
 8002358:	639a      	str	r2, [r3, #56]	; 0x38
				Timer->Instance->CCER |= (1 << HAL_TIMER_CC2E_POS);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	6a1a      	ldr	r2, [r3, #32]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f042 0210 	orr.w	r2, r2, #16
 8002368:	621a      	str	r2, [r3, #32]
				break;
 800236a:	e06b      	b.n	8002444 <HAL_TIMER_PWM_init+0x20c>
			case HAL_TIMER_CMP_OUT_CHN_3:
				switch (Timer->CMP_Modes[CNT]) {
 800236c:	7bfb      	ldrb	r3, [r7, #15]
 800236e:	687a      	ldr	r2, [r7, #4]
 8002370:	4413      	add	r3, r2
 8002372:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002376:	2b0b      	cmp	r3, #11
 8002378:	d002      	beq.n	8002380 <HAL_TIMER_PWM_init+0x148>
 800237a:	2b0c      	cmp	r3, #12
 800237c:	d009      	beq.n	8002392 <HAL_TIMER_PWM_init+0x15a>
 800237e:	e011      	b.n	80023a4 <HAL_TIMER_PWM_init+0x16c>
					case HAL_TIMER_PWM_OUT_MODE1:
						Timer->Instance->CCMR2 |= (0b110 << 4);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	69da      	ldr	r2, [r3, #28]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800238e:	61da      	str	r2, [r3, #28]
						break;
 8002390:	e008      	b.n	80023a4 <HAL_TIMER_PWM_init+0x16c>
					case HAL_TIMER_PWM_OUT_MODE2:
						Timer->Instance->CCMR2 |= (0b111 << 4);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	69da      	ldr	r2, [r3, #28]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f042 0270 	orr.w	r2, r2, #112	; 0x70
 80023a0:	61da      	str	r2, [r3, #28]
						break;
 80023a2:	bf00      	nop
				}
				Timer->Instance->CCR3 = ((Timer->CCR_val[CNT] * Timer->ARR_val)/100);//duty Cycle
 80023a4:	7bfb      	ldrb	r3, [r7, #15]
 80023a6:	687a      	ldr	r2, [r7, #4]
 80023a8:	3302      	adds	r3, #2
 80023aa:	009b      	lsls	r3, r3, #2
 80023ac:	4413      	add	r3, r2
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	687a      	ldr	r2, [r7, #4]
 80023b2:	6892      	ldr	r2, [r2, #8]
 80023b4:	fb02 f203 	mul.w	r2, r2, r3
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	492c      	ldr	r1, [pc, #176]	; (8002470 <HAL_TIMER_PWM_init+0x238>)
 80023be:	fba1 1202 	umull	r1, r2, r1, r2
 80023c2:	0952      	lsrs	r2, r2, #5
 80023c4:	63da      	str	r2, [r3, #60]	; 0x3c
				Timer->Instance->CCER |= (1 << HAL_TIMER_CC3E_POS);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	6a1a      	ldr	r2, [r3, #32]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80023d4:	621a      	str	r2, [r3, #32]
				break;
 80023d6:	e035      	b.n	8002444 <HAL_TIMER_PWM_init+0x20c>
			case HAL_TIMER_CMP_OUT_CHN_4:
				switch (Timer->CMP_Modes[CNT]) {
 80023d8:	7bfb      	ldrb	r3, [r7, #15]
 80023da:	687a      	ldr	r2, [r7, #4]
 80023dc:	4413      	add	r3, r2
 80023de:	f893 3020 	ldrb.w	r3, [r3, #32]
 80023e2:	2b0b      	cmp	r3, #11
 80023e4:	d002      	beq.n	80023ec <HAL_TIMER_PWM_init+0x1b4>
 80023e6:	2b0c      	cmp	r3, #12
 80023e8:	d009      	beq.n	80023fe <HAL_TIMER_PWM_init+0x1c6>
 80023ea:	e011      	b.n	8002410 <HAL_TIMER_PWM_init+0x1d8>
					case HAL_TIMER_PWM_OUT_MODE1:
						Timer->Instance->CCMR2 |= (0b110 << 12);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	69da      	ldr	r2, [r3, #28]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 80023fa:	61da      	str	r2, [r3, #28]
						break;
 80023fc:	e008      	b.n	8002410 <HAL_TIMER_PWM_init+0x1d8>
					case HAL_TIMER_PWM_OUT_MODE2:
						Timer->Instance->CCMR2 |= (0b111 << 12);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	69da      	ldr	r2, [r3, #28]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f442 42e0 	orr.w	r2, r2, #28672	; 0x7000
 800240c:	61da      	str	r2, [r3, #28]
						break;
 800240e:	bf00      	nop
				}
				Timer->Instance->CCR4 = ((Timer->CCR_val[CNT] * Timer->ARR_val)/100);
 8002410:	7bfb      	ldrb	r3, [r7, #15]
 8002412:	687a      	ldr	r2, [r7, #4]
 8002414:	3302      	adds	r3, #2
 8002416:	009b      	lsls	r3, r3, #2
 8002418:	4413      	add	r3, r2
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	687a      	ldr	r2, [r7, #4]
 800241e:	6892      	ldr	r2, [r2, #8]
 8002420:	fb02 f203 	mul.w	r2, r2, r3
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4911      	ldr	r1, [pc, #68]	; (8002470 <HAL_TIMER_PWM_init+0x238>)
 800242a:	fba1 1202 	umull	r1, r2, r1, r2
 800242e:	0952      	lsrs	r2, r2, #5
 8002430:	641a      	str	r2, [r3, #64]	; 0x40
				Timer->Instance->CCER |= (1 << HAL_TIMER_CC4E_POS);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	6a1a      	ldr	r2, [r3, #32]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002440:	621a      	str	r2, [r3, #32]
				break;
 8002442:	bf00      	nop
		for (CNT = 0; CNT <= Timer->NO_CMP_CHNS - 1; CNT++) {
 8002444:	7bfb      	ldrb	r3, [r7, #15]
 8002446:	3301      	adds	r3, #1
 8002448:	73fb      	strb	r3, [r7, #15]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002450:	7bfa      	ldrb	r2, [r7, #15]
 8002452:	429a      	cmp	r2, r3
 8002454:	f4ff af0b 	bcc.w	800226e <HAL_TIMER_PWM_init+0x36>
			}
		}

		Timer->Instance->CR1 |= HAL_TIMER_CNT_EN;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f042 0201 	orr.w	r2, r2, #1
 8002466:	601a      	str	r2, [r3, #0]
	}
}
 8002468:	bf00      	nop
 800246a:	3710      	adds	r7, #16
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}
 8002470:	51eb851f 	.word	0x51eb851f

08002474 <HAL_TIMER_IPCAP_init>:

static void HAL_TIMER_IPCAP_init(TimerU_D_t *Timer)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b084      	sub	sp, #16
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
	if( Timer != NULL)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2b00      	cmp	r3, #0
 8002480:	f000 80e2 	beq.w	8002648 <HAL_TIMER_IPCAP_init+0x1d4>
	{
		uint8_t CNT=0;
 8002484:	2300      	movs	r3, #0
 8002486:	73fb      	strb	r3, [r7, #15]

		EN_CLOCK_OP(Timer,1);
 8002488:	2101      	movs	r1, #1
 800248a:	6878      	ldr	r0, [r7, #4]
 800248c:	f7ff fc2e 	bl	8001cec <EN_CLOCK_OP>

		for (CNT = 0; CNT <= Timer->NO_CMP_CHNS - 1; CNT++) {
 8002490:	2300      	movs	r3, #0
 8002492:	73fb      	strb	r3, [r7, #15]
 8002494:	e0c9      	b.n	800262a <HAL_TIMER_IPCAP_init+0x1b6>
			switch (Timer->CMP_CHN[CNT]) {
 8002496:	7bfb      	ldrb	r3, [r7, #15]
 8002498:	687a      	ldr	r2, [r7, #4]
 800249a:	4413      	add	r3, r2
 800249c:	7f1b      	ldrb	r3, [r3, #28]
 800249e:	2b03      	cmp	r3, #3
 80024a0:	f200 80c0 	bhi.w	8002624 <HAL_TIMER_IPCAP_init+0x1b0>
 80024a4:	a201      	add	r2, pc, #4	; (adr r2, 80024ac <HAL_TIMER_IPCAP_init+0x38>)
 80024a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024aa:	bf00      	nop
 80024ac:	080024bd 	.word	0x080024bd
 80024b0:	08002517 	.word	0x08002517
 80024b4:	08002571 	.word	0x08002571
 80024b8:	080025cb 	.word	0x080025cb
				case HAL_TIMER_CMP_OUT_CHN_1:
					Timer->Instance->CCMR1 |= (0b01 << 0);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	699a      	ldr	r2, [r3, #24]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f042 0201 	orr.w	r2, r2, #1
 80024ca:	619a      	str	r2, [r3, #24]
					switch(Timer->CMP_Modes[CNT])
 80024cc:	7bfb      	ldrb	r3, [r7, #15]
 80024ce:	687a      	ldr	r2, [r7, #4]
 80024d0:	4413      	add	r3, r2
 80024d2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80024d6:	2b0d      	cmp	r3, #13
 80024d8:	d002      	beq.n	80024e0 <HAL_TIMER_IPCAP_init+0x6c>
 80024da:	2b0e      	cmp	r3, #14
 80024dc:	d009      	beq.n	80024f2 <HAL_TIMER_IPCAP_init+0x7e>
 80024de:	e011      	b.n	8002504 <HAL_TIMER_IPCAP_init+0x90>
					{
						case HAL_TIMER_RSEDG_CAPT:
							Timer->Instance->CCER &= (~(1 << HAL_TIMER_CCP1_POS));
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	6a1a      	ldr	r2, [r3, #32]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f022 0202 	bic.w	r2, r2, #2
 80024ee:	621a      	str	r2, [r3, #32]
							break;
 80024f0:	e008      	b.n	8002504 <HAL_TIMER_IPCAP_init+0x90>
						case HAL_TIMER_FEDG_CAPT:
							Timer->Instance->CCER |= (1 << HAL_TIMER_CCP1_POS);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	6a1a      	ldr	r2, [r3, #32]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f042 0202 	orr.w	r2, r2, #2
 8002500:	621a      	str	r2, [r3, #32]
							break;
 8002502:	bf00      	nop
					}
					Timer->Instance->CCER |= (1 << HAL_TIMER_CC1E_POS);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	6a1a      	ldr	r2, [r3, #32]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f042 0201 	orr.w	r2, r2, #1
 8002512:	621a      	str	r2, [r3, #32]
					break;
 8002514:	e086      	b.n	8002624 <HAL_TIMER_IPCAP_init+0x1b0>
				case HAL_TIMER_CMP_OUT_CHN_2:
					Timer->Instance->CCMR1 |= (0b01 << 8);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	699a      	ldr	r2, [r3, #24]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002524:	619a      	str	r2, [r3, #24]
					switch (Timer->CMP_Modes[CNT]) {
 8002526:	7bfb      	ldrb	r3, [r7, #15]
 8002528:	687a      	ldr	r2, [r7, #4]
 800252a:	4413      	add	r3, r2
 800252c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002530:	2b0d      	cmp	r3, #13
 8002532:	d002      	beq.n	800253a <HAL_TIMER_IPCAP_init+0xc6>
 8002534:	2b0e      	cmp	r3, #14
 8002536:	d009      	beq.n	800254c <HAL_TIMER_IPCAP_init+0xd8>
 8002538:	e011      	b.n	800255e <HAL_TIMER_IPCAP_init+0xea>
						case HAL_TIMER_RSEDG_CAPT:
							Timer->Instance->CCER &= (~(1 << HAL_TIMER_CCP2_POS));
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	6a1a      	ldr	r2, [r3, #32]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f022 0220 	bic.w	r2, r2, #32
 8002548:	621a      	str	r2, [r3, #32]
							break;
 800254a:	e008      	b.n	800255e <HAL_TIMER_IPCAP_init+0xea>
						case HAL_TIMER_FEDG_CAPT:
							Timer->Instance->CCER |= (1 << HAL_TIMER_CCP2_POS);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	6a1a      	ldr	r2, [r3, #32]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f042 0220 	orr.w	r2, r2, #32
 800255a:	621a      	str	r2, [r3, #32]
							break;
 800255c:	bf00      	nop
					}
					Timer->Instance->CCER |= (1 << HAL_TIMER_CC2E_POS);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	6a1a      	ldr	r2, [r3, #32]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f042 0210 	orr.w	r2, r2, #16
 800256c:	621a      	str	r2, [r3, #32]
					break;
 800256e:	e059      	b.n	8002624 <HAL_TIMER_IPCAP_init+0x1b0>
				case HAL_TIMER_CMP_OUT_CHN_3:
					Timer->Instance->CCMR2 |= (0b01 << 0);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	69da      	ldr	r2, [r3, #28]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f042 0201 	orr.w	r2, r2, #1
 800257e:	61da      	str	r2, [r3, #28]
				switch (Timer->CMP_Modes[CNT]) {
 8002580:	7bfb      	ldrb	r3, [r7, #15]
 8002582:	687a      	ldr	r2, [r7, #4]
 8002584:	4413      	add	r3, r2
 8002586:	f893 3020 	ldrb.w	r3, [r3, #32]
 800258a:	2b0d      	cmp	r3, #13
 800258c:	d002      	beq.n	8002594 <HAL_TIMER_IPCAP_init+0x120>
 800258e:	2b0e      	cmp	r3, #14
 8002590:	d009      	beq.n	80025a6 <HAL_TIMER_IPCAP_init+0x132>
 8002592:	e011      	b.n	80025b8 <HAL_TIMER_IPCAP_init+0x144>
						case HAL_TIMER_RSEDG_CAPT:
							Timer->Instance->CCER &= (~(1 << HAL_TIMER_CCP3_POS));
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	6a1a      	ldr	r2, [r3, #32]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80025a2:	621a      	str	r2, [r3, #32]
							break;
 80025a4:	e008      	b.n	80025b8 <HAL_TIMER_IPCAP_init+0x144>
						case HAL_TIMER_FEDG_CAPT:
							Timer->Instance->CCER |= (1 << HAL_TIMER_CCP3_POS);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	6a1a      	ldr	r2, [r3, #32]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025b4:	621a      	str	r2, [r3, #32]
							break;
 80025b6:	bf00      	nop
					}
				Timer->Instance->CCER |= (1 << HAL_TIMER_CC3E_POS);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	6a1a      	ldr	r2, [r3, #32]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80025c6:	621a      	str	r2, [r3, #32]
					break;
 80025c8:	e02c      	b.n	8002624 <HAL_TIMER_IPCAP_init+0x1b0>
				case HAL_TIMER_CMP_OUT_CHN_4:
					Timer->Instance->CCMR2 |= (0b01 << 8);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	69da      	ldr	r2, [r3, #28]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80025d8:	61da      	str	r2, [r3, #28]
					switch (Timer->CMP_Modes[CNT]) {
 80025da:	7bfb      	ldrb	r3, [r7, #15]
 80025dc:	687a      	ldr	r2, [r7, #4]
 80025de:	4413      	add	r3, r2
 80025e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025e4:	2b0d      	cmp	r3, #13
 80025e6:	d002      	beq.n	80025ee <HAL_TIMER_IPCAP_init+0x17a>
 80025e8:	2b0e      	cmp	r3, #14
 80025ea:	d009      	beq.n	8002600 <HAL_TIMER_IPCAP_init+0x18c>
 80025ec:	e011      	b.n	8002612 <HAL_TIMER_IPCAP_init+0x19e>
						case HAL_TIMER_RSEDG_CAPT:
							Timer->Instance->CCER &= (~(1 << HAL_TIMER_CCP4_POS));
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	6a1a      	ldr	r2, [r3, #32]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80025fc:	621a      	str	r2, [r3, #32]
							break;
 80025fe:	e008      	b.n	8002612 <HAL_TIMER_IPCAP_init+0x19e>
						case HAL_TIMER_FEDG_CAPT:
							Timer->Instance->CCER |= (1 << HAL_TIMER_CCP4_POS);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	6a1a      	ldr	r2, [r3, #32]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800260e:	621a      	str	r2, [r3, #32]
							break;
 8002610:	bf00      	nop
				}
					Timer->Instance->CCER |= (1 << HAL_TIMER_CC4E_POS);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	6a1a      	ldr	r2, [r3, #32]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002620:	621a      	str	r2, [r3, #32]
				break;
 8002622:	bf00      	nop
		for (CNT = 0; CNT <= Timer->NO_CMP_CHNS - 1; CNT++) {
 8002624:	7bfb      	ldrb	r3, [r7, #15]
 8002626:	3301      	adds	r3, #1
 8002628:	73fb      	strb	r3, [r7, #15]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002630:	7bfa      	ldrb	r2, [r7, #15]
 8002632:	429a      	cmp	r2, r3
 8002634:	f4ff af2f 	bcc.w	8002496 <HAL_TIMER_IPCAP_init+0x22>
			}
		}
		Timer->Instance->CR1 |= HAL_TIMER_CNT_EN;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	681a      	ldr	r2, [r3, #0]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f042 0201 	orr.w	r2, r2, #1
 8002646:	601a      	str	r2, [r3, #0]
	}
}
 8002648:	bf00      	nop
 800264a:	3710      	adds	r7, #16
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}

08002650 <TIM2_IRQHandler>:
	return Timer->Instance->CNT;
}

#if TIMER_TIM2_INT_EN == EN
void TIM2_IRQHandler(void)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	af00      	add	r7, sp, #0
		if(Callback_3_TIM2)
			 Callback_3_TIM2();
	}
#endif
#if TIMER2_INT_CCP_CH4_EN == EN
	if ((TIM2->SR & HAL_TIMER_CC4IF_MSK )&&(TIM2->DIER & HAL_TIMER_CC4IF_MSK) )
 8002654:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002658:	691b      	ldr	r3, [r3, #16]
 800265a:	f003 0310 	and.w	r3, r3, #16
 800265e:	2b00      	cmp	r3, #0
 8002660:	d015      	beq.n	800268e <TIM2_IRQHandler+0x3e>
 8002662:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002666:	68db      	ldr	r3, [r3, #12]
 8002668:	f003 0310 	and.w	r3, r3, #16
 800266c:	2b00      	cmp	r3, #0
 800266e:	d00e      	beq.n	800268e <TIM2_IRQHandler+0x3e>
	{
		TIM2->SR &= ~HAL_TIMER_CC4IF_MSK;
 8002670:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002674:	691b      	ldr	r3, [r3, #16]
 8002676:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800267a:	f023 0310 	bic.w	r3, r3, #16
 800267e:	6113      	str	r3, [r2, #16]
		 if(Callback_4_TIM2)
 8002680:	4b04      	ldr	r3, [pc, #16]	; (8002694 <TIM2_IRQHandler+0x44>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d002      	beq.n	800268e <TIM2_IRQHandler+0x3e>
			 Callback_4_TIM2();
 8002688:	4b02      	ldr	r3, [pc, #8]	; (8002694 <TIM2_IRQHandler+0x44>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4798      	blx	r3
	}
#endif
}
 800268e:	bf00      	nop
 8002690:	bd80      	pop	{r7, pc}
 8002692:	bf00      	nop
 8002694:	200000cc 	.word	0x200000cc

08002698 <__NVIC_EnableIRQ>:
{
 8002698:	b480      	push	{r7}
 800269a:	b083      	sub	sp, #12
 800269c:	af00      	add	r7, sp, #0
 800269e:	4603      	mov	r3, r0
 80026a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	db0b      	blt.n	80026c2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026aa:	79fb      	ldrb	r3, [r7, #7]
 80026ac:	f003 021f 	and.w	r2, r3, #31
 80026b0:	4906      	ldr	r1, [pc, #24]	; (80026cc <__NVIC_EnableIRQ+0x34>)
 80026b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026b6:	095b      	lsrs	r3, r3, #5
 80026b8:	2001      	movs	r0, #1
 80026ba:	fa00 f202 	lsl.w	r2, r0, r2
 80026be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80026c2:	bf00      	nop
 80026c4:	370c      	adds	r7, #12
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bc80      	pop	{r7}
 80026ca:	4770      	bx	lr
 80026cc:	e000e100 	.word	0xe000e100

080026d0 <Baud_Rate_Gen>:
#if HAL_USART_RX_INT3_EN == EN
void (*RX_Callback_USART_3) (void) =NULL;
#endif

static uint16_t Baud_Rate_Gen(uint32_t PERIPH_CLK,uint32_t BAUD_rate)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b083      	sub	sp, #12
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
 80026d8:	6039      	str	r1, [r7, #0]
	return ((PERIPH_CLK + (BAUD_rate / 2)) / BAUD_rate);
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	085a      	lsrs	r2, r3, #1
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	441a      	add	r2, r3
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80026e8:	b29b      	uxth	r3, r3
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	370c      	adds	r7, #12
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bc80      	pop	{r7}
 80026f2:	4770      	bx	lr

080026f4 <PLL_CLK_CALC_S>:

static uint32_t PLL_CLK_CALC_S(uint32_t CLK)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b083      	sub	sp, #12
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
	switch((RCC->CFGR & ((0x0000000F) << 18))>>18)
 80026fc:	4b48      	ldr	r3, [pc, #288]	; (8002820 <PLL_CLK_CALC_S+0x12c>)
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	0c9b      	lsrs	r3, r3, #18
 8002702:	f003 030f 	and.w	r3, r3, #15
 8002706:	2b0f      	cmp	r3, #15
 8002708:	f200 8084 	bhi.w	8002814 <PLL_CLK_CALC_S+0x120>
 800270c:	a201      	add	r2, pc, #4	; (adr r2, 8002714 <PLL_CLK_CALC_S+0x20>)
 800270e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002712:	bf00      	nop
 8002714:	08002755 	.word	0x08002755
 8002718:	0800275d 	.word	0x0800275d
 800271c:	08002769 	.word	0x08002769
 8002720:	08002771 	.word	0x08002771
 8002724:	0800277d 	.word	0x0800277d
 8002728:	0800278b 	.word	0x0800278b
 800272c:	08002797 	.word	0x08002797
 8002730:	0800279f 	.word	0x0800279f
 8002734:	080027ab 	.word	0x080027ab
 8002738:	080027b9 	.word	0x080027b9
 800273c:	080027c9 	.word	0x080027c9
 8002740:	080027d7 	.word	0x080027d7
 8002744:	080027e7 	.word	0x080027e7
 8002748:	080027f5 	.word	0x080027f5
 800274c:	08002801 	.word	0x08002801
 8002750:	08002809 	.word	0x08002809
	{
		case 0x00000000U:
			CLK*=2;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	005b      	lsls	r3, r3, #1
 8002758:	607b      	str	r3, [r7, #4]
			break;
 800275a:	e05b      	b.n	8002814 <PLL_CLK_CALC_S+0x120>
		case 0x00000001U:
			CLK*=3;
 800275c:	687a      	ldr	r2, [r7, #4]
 800275e:	4613      	mov	r3, r2
 8002760:	005b      	lsls	r3, r3, #1
 8002762:	4413      	add	r3, r2
 8002764:	607b      	str	r3, [r7, #4]
			break;
 8002766:	e055      	b.n	8002814 <PLL_CLK_CALC_S+0x120>
		case 0x00000002U:
			CLK*=4;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	009b      	lsls	r3, r3, #2
 800276c:	607b      	str	r3, [r7, #4]
			break;
 800276e:	e051      	b.n	8002814 <PLL_CLK_CALC_S+0x120>
		case 0x00000003U:
			CLK*=5;
 8002770:	687a      	ldr	r2, [r7, #4]
 8002772:	4613      	mov	r3, r2
 8002774:	009b      	lsls	r3, r3, #2
 8002776:	4413      	add	r3, r2
 8002778:	607b      	str	r3, [r7, #4]
			break;
 800277a:	e04b      	b.n	8002814 <PLL_CLK_CALC_S+0x120>
		case 0x00000004U:
			CLK*=6;
 800277c:	687a      	ldr	r2, [r7, #4]
 800277e:	4613      	mov	r3, r2
 8002780:	005b      	lsls	r3, r3, #1
 8002782:	4413      	add	r3, r2
 8002784:	005b      	lsls	r3, r3, #1
 8002786:	607b      	str	r3, [r7, #4]
			break;
 8002788:	e044      	b.n	8002814 <PLL_CLK_CALC_S+0x120>
		case 0x00000005U:
			CLK*=7;
 800278a:	687a      	ldr	r2, [r7, #4]
 800278c:	4613      	mov	r3, r2
 800278e:	00db      	lsls	r3, r3, #3
 8002790:	1a9b      	subs	r3, r3, r2
 8002792:	607b      	str	r3, [r7, #4]
			break;
 8002794:	e03e      	b.n	8002814 <PLL_CLK_CALC_S+0x120>
		case 0x00000006U:
			CLK*=8;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	00db      	lsls	r3, r3, #3
 800279a:	607b      	str	r3, [r7, #4]
			break;
 800279c:	e03a      	b.n	8002814 <PLL_CLK_CALC_S+0x120>
		case 0x00000007U:
			CLK*=9;
 800279e:	687a      	ldr	r2, [r7, #4]
 80027a0:	4613      	mov	r3, r2
 80027a2:	00db      	lsls	r3, r3, #3
 80027a4:	4413      	add	r3, r2
 80027a6:	607b      	str	r3, [r7, #4]
			break;
 80027a8:	e034      	b.n	8002814 <PLL_CLK_CALC_S+0x120>
		case 0x00000008U:
			CLK*=10;
 80027aa:	687a      	ldr	r2, [r7, #4]
 80027ac:	4613      	mov	r3, r2
 80027ae:	009b      	lsls	r3, r3, #2
 80027b0:	4413      	add	r3, r2
 80027b2:	005b      	lsls	r3, r3, #1
 80027b4:	607b      	str	r3, [r7, #4]
			break;
 80027b6:	e02d      	b.n	8002814 <PLL_CLK_CALC_S+0x120>
		case 0x00000009U:
			CLK*=11;
 80027b8:	687a      	ldr	r2, [r7, #4]
 80027ba:	4613      	mov	r3, r2
 80027bc:	009b      	lsls	r3, r3, #2
 80027be:	4413      	add	r3, r2
 80027c0:	005b      	lsls	r3, r3, #1
 80027c2:	4413      	add	r3, r2
 80027c4:	607b      	str	r3, [r7, #4]
			break;
 80027c6:	e025      	b.n	8002814 <PLL_CLK_CALC_S+0x120>
		case 0x0000000AU:
			CLK*=12;
 80027c8:	687a      	ldr	r2, [r7, #4]
 80027ca:	4613      	mov	r3, r2
 80027cc:	005b      	lsls	r3, r3, #1
 80027ce:	4413      	add	r3, r2
 80027d0:	009b      	lsls	r3, r3, #2
 80027d2:	607b      	str	r3, [r7, #4]
			break;
 80027d4:	e01e      	b.n	8002814 <PLL_CLK_CALC_S+0x120>
		case 0x0000000BU:
			CLK*=13;
 80027d6:	687a      	ldr	r2, [r7, #4]
 80027d8:	4613      	mov	r3, r2
 80027da:	005b      	lsls	r3, r3, #1
 80027dc:	4413      	add	r3, r2
 80027de:	009b      	lsls	r3, r3, #2
 80027e0:	4413      	add	r3, r2
 80027e2:	607b      	str	r3, [r7, #4]
			break;
 80027e4:	e016      	b.n	8002814 <PLL_CLK_CALC_S+0x120>
		case 0x0000000CU:
			CLK*=14;
 80027e6:	687a      	ldr	r2, [r7, #4]
 80027e8:	4613      	mov	r3, r2
 80027ea:	00db      	lsls	r3, r3, #3
 80027ec:	1a9b      	subs	r3, r3, r2
 80027ee:	005b      	lsls	r3, r3, #1
 80027f0:	607b      	str	r3, [r7, #4]
			break;
 80027f2:	e00f      	b.n	8002814 <PLL_CLK_CALC_S+0x120>
		case 0x0000000DU:
			CLK*=15;
 80027f4:	687a      	ldr	r2, [r7, #4]
 80027f6:	4613      	mov	r3, r2
 80027f8:	011b      	lsls	r3, r3, #4
 80027fa:	1a9b      	subs	r3, r3, r2
 80027fc:	607b      	str	r3, [r7, #4]
			break;
 80027fe:	e009      	b.n	8002814 <PLL_CLK_CALC_S+0x120>
		case 0x0000000EU:
			CLK*=16;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	011b      	lsls	r3, r3, #4
 8002804:	607b      	str	r3, [r7, #4]
			break;
 8002806:	e005      	b.n	8002814 <PLL_CLK_CALC_S+0x120>
		case 0x0000000FU:
			CLK*=17;
 8002808:	687a      	ldr	r2, [r7, #4]
 800280a:	4613      	mov	r3, r2
 800280c:	011b      	lsls	r3, r3, #4
 800280e:	4413      	add	r3, r2
 8002810:	607b      	str	r3, [r7, #4]
			break;
 8002812:	bf00      	nop
	}
	return CLK;
 8002814:	687b      	ldr	r3, [r7, #4]
}
 8002816:	4618      	mov	r0, r3
 8002818:	370c      	adds	r7, #12
 800281a:	46bd      	mov	sp, r7
 800281c:	bc80      	pop	{r7}
 800281e:	4770      	bx	lr
 8002820:	40021000 	.word	0x40021000

08002824 <PLL_CLK_CALC>:

uint32_t PLL_CLK_CALC()
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b082      	sub	sp, #8
 8002828:	af00      	add	r7, sp, #0
	uint32_t CLK=8000000UL;
 800282a:	4b18      	ldr	r3, [pc, #96]	; (800288c <PLL_CLK_CALC+0x68>)
 800282c:	607b      	str	r3, [r7, #4]
	switch((RCC->CFGR & ((0x00000001) << PLLSRC_POS))>>PLLSRC_POS)
 800282e:	4b18      	ldr	r3, [pc, #96]	; (8002890 <PLL_CLK_CALC+0x6c>)
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	0c1b      	lsrs	r3, r3, #16
 8002834:	f003 0301 	and.w	r3, r3, #1
 8002838:	2b00      	cmp	r3, #0
 800283a:	d002      	beq.n	8002842 <PLL_CLK_CALC+0x1e>
 800283c:	2b01      	cmp	r3, #1
 800283e:	d008      	beq.n	8002852 <PLL_CLK_CALC+0x2e>
 8002840:	e01f      	b.n	8002882 <PLL_CLK_CALC+0x5e>
	{
		case 0:
			CLK/=2;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	085b      	lsrs	r3, r3, #1
 8002846:	607b      	str	r3, [r7, #4]
			CLK=PLL_CLK_CALC_S(CLK);
 8002848:	6878      	ldr	r0, [r7, #4]
 800284a:	f7ff ff53 	bl	80026f4 <PLL_CLK_CALC_S>
 800284e:	6078      	str	r0, [r7, #4]
			break;
 8002850:	e017      	b.n	8002882 <PLL_CLK_CALC+0x5e>
		case 1:
			switch((RCC->CFGR & ((0x00000001) << PLLXTPRE_POS))>>PLLXTPRE_POS)
 8002852:	4b0f      	ldr	r3, [pc, #60]	; (8002890 <PLL_CLK_CALC+0x6c>)
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	0c5b      	lsrs	r3, r3, #17
 8002858:	f003 0301 	and.w	r3, r3, #1
 800285c:	2b00      	cmp	r3, #0
 800285e:	d002      	beq.n	8002866 <PLL_CLK_CALC+0x42>
 8002860:	2b01      	cmp	r3, #1
 8002862:	d005      	beq.n	8002870 <PLL_CLK_CALC+0x4c>
				case 1:
					CLK/=2;
					CLK=PLL_CLK_CALC_S(CLK);
					break;
			}
			break;
 8002864:	e00c      	b.n	8002880 <PLL_CLK_CALC+0x5c>
					CLK=PLL_CLK_CALC_S(CLK);
 8002866:	6878      	ldr	r0, [r7, #4]
 8002868:	f7ff ff44 	bl	80026f4 <PLL_CLK_CALC_S>
 800286c:	6078      	str	r0, [r7, #4]
					break;
 800286e:	e007      	b.n	8002880 <PLL_CLK_CALC+0x5c>
					CLK/=2;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	085b      	lsrs	r3, r3, #1
 8002874:	607b      	str	r3, [r7, #4]
					CLK=PLL_CLK_CALC_S(CLK);
 8002876:	6878      	ldr	r0, [r7, #4]
 8002878:	f7ff ff3c 	bl	80026f4 <PLL_CLK_CALC_S>
 800287c:	6078      	str	r0, [r7, #4]
					break;
 800287e:	bf00      	nop
			break;
 8002880:	bf00      	nop
	}
	return CLK;
 8002882:	687b      	ldr	r3, [r7, #4]
}
 8002884:	4618      	mov	r0, r3
 8002886:	3708      	adds	r7, #8
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}
 800288c:	007a1200 	.word	0x007a1200
 8002890:	40021000 	.word	0x40021000

08002894 <CLK_CALC>:



uint32_t CLK_CALC(uint32_t CLK,uint8_t SH)
{
 8002894:	b480      	push	{r7}
 8002896:	b085      	sub	sp, #20
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
 800289c:	460b      	mov	r3, r1
 800289e:	70fb      	strb	r3, [r7, #3]
	uint32_t CLK_RET = CLK;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	60fb      	str	r3, [r7, #12]
	switch ((RCC->CFGR & ((0x0000000F) << 4))>>4) {
 80028a4:	4b3f      	ldr	r3, [pc, #252]	; (80029a4 <CLK_CALC+0x110>)
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	091b      	lsrs	r3, r3, #4
 80028aa:	f003 030f 	and.w	r3, r3, #15
 80028ae:	2b0f      	cmp	r3, #15
 80028b0:	d842      	bhi.n	8002938 <CLK_CALC+0xa4>
 80028b2:	a201      	add	r2, pc, #4	; (adr r2, 80028b8 <CLK_CALC+0x24>)
 80028b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028b8:	08002939 	.word	0x08002939
 80028bc:	08002939 	.word	0x08002939
 80028c0:	08002939 	.word	0x08002939
 80028c4:	08002939 	.word	0x08002939
 80028c8:	08002939 	.word	0x08002939
 80028cc:	08002939 	.word	0x08002939
 80028d0:	08002939 	.word	0x08002939
 80028d4:	08002939 	.word	0x08002939
 80028d8:	080028f9 	.word	0x080028f9
 80028dc:	08002901 	.word	0x08002901
 80028e0:	08002909 	.word	0x08002909
 80028e4:	08002911 	.word	0x08002911
 80028e8:	08002919 	.word	0x08002919
 80028ec:	08002921 	.word	0x08002921
 80028f0:	08002929 	.word	0x08002929
 80028f4:	08002931 	.word	0x08002931
		case 0b0110:
		case 0b0111:
			CLK_RET /= 1;
			break;
		case 0b1000:
			CLK_RET /= 2;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	085b      	lsrs	r3, r3, #1
 80028fc:	60fb      	str	r3, [r7, #12]
			break;
 80028fe:	e01b      	b.n	8002938 <CLK_CALC+0xa4>
		case 0b1001:
			CLK_RET /= 4;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	089b      	lsrs	r3, r3, #2
 8002904:	60fb      	str	r3, [r7, #12]
			break;
 8002906:	e017      	b.n	8002938 <CLK_CALC+0xa4>
		case 0b1010:
			CLK_RET /= 8;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	08db      	lsrs	r3, r3, #3
 800290c:	60fb      	str	r3, [r7, #12]
			break;
 800290e:	e013      	b.n	8002938 <CLK_CALC+0xa4>
		case 0b1011:
			CLK_RET /= 16;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	091b      	lsrs	r3, r3, #4
 8002914:	60fb      	str	r3, [r7, #12]
			break;
 8002916:	e00f      	b.n	8002938 <CLK_CALC+0xa4>
		case 0b1100:
			CLK_RET /= 64;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	099b      	lsrs	r3, r3, #6
 800291c:	60fb      	str	r3, [r7, #12]
			break;
 800291e:	e00b      	b.n	8002938 <CLK_CALC+0xa4>
		case 0b1101:
			CLK_RET /= 128;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	09db      	lsrs	r3, r3, #7
 8002924:	60fb      	str	r3, [r7, #12]
			break;
 8002926:	e007      	b.n	8002938 <CLK_CALC+0xa4>
		case 0b1110:
			CLK_RET /= 256;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	0a1b      	lsrs	r3, r3, #8
 800292c:	60fb      	str	r3, [r7, #12]
			break;
 800292e:	e003      	b.n	8002938 <CLK_CALC+0xa4>
		case 0b1111:
			CLK_RET /= 512;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	0a5b      	lsrs	r3, r3, #9
 8002934:	60fb      	str	r3, [r7, #12]
			break;
 8002936:	bf00      	nop
	}
	switch ((RCC->CFGR & (0x00000007 << SH))>>SH) {
 8002938:	4b1a      	ldr	r3, [pc, #104]	; (80029a4 <CLK_CALC+0x110>)
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	78fa      	ldrb	r2, [r7, #3]
 800293e:	2107      	movs	r1, #7
 8002940:	fa01 f202 	lsl.w	r2, r1, r2
 8002944:	401a      	ands	r2, r3
 8002946:	78fb      	ldrb	r3, [r7, #3]
 8002948:	fa22 f303 	lsr.w	r3, r2, r3
 800294c:	2b07      	cmp	r3, #7
 800294e:	d823      	bhi.n	8002998 <CLK_CALC+0x104>
 8002950:	a201      	add	r2, pc, #4	; (adr r2, 8002958 <CLK_CALC+0xc4>)
 8002952:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002956:	bf00      	nop
 8002958:	08002999 	.word	0x08002999
 800295c:	08002999 	.word	0x08002999
 8002960:	08002999 	.word	0x08002999
 8002964:	08002999 	.word	0x08002999
 8002968:	08002979 	.word	0x08002979
 800296c:	08002981 	.word	0x08002981
 8002970:	08002989 	.word	0x08002989
 8002974:	08002991 	.word	0x08002991
		case 0b010:
		case 0b011:
			CLK_RET /=1;
			break;
		case 0b100:
			CLK_RET /= 2;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	085b      	lsrs	r3, r3, #1
 800297c:	60fb      	str	r3, [r7, #12]
			break;
 800297e:	e00b      	b.n	8002998 <CLK_CALC+0x104>
		case 0b101:
			CLK_RET /= 4;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	089b      	lsrs	r3, r3, #2
 8002984:	60fb      	str	r3, [r7, #12]
			break;
 8002986:	e007      	b.n	8002998 <CLK_CALC+0x104>
		case 0b110:
			CLK_RET /= 8;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	08db      	lsrs	r3, r3, #3
 800298c:	60fb      	str	r3, [r7, #12]
			break;
 800298e:	e003      	b.n	8002998 <CLK_CALC+0x104>
		case 0b111:
			CLK_RET /= 16;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	091b      	lsrs	r3, r3, #4
 8002994:	60fb      	str	r3, [r7, #12]
			break;
 8002996:	bf00      	nop
	}
	return CLK_RET;
 8002998:	68fb      	ldr	r3, [r7, #12]
}
 800299a:	4618      	mov	r0, r3
 800299c:	3714      	adds	r7, #20
 800299e:	46bd      	mov	sp, r7
 80029a0:	bc80      	pop	{r7}
 80029a2:	4770      	bx	lr
 80029a4:	40021000 	.word	0x40021000

080029a8 <HAL_UART_INT_init>:

static void HAL_UART_INT_init(UART_t *HAL_Uart)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b082      	sub	sp, #8
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 80029b0:	b672      	cpsid	i
}
 80029b2:	bf00      	nop
				if (HAL_Uart->Instance == USART2)
					RX_Callback_USART_2=HAL_Uart->RX_Callback;
				NVIC_EnableIRQ(USART2_IRQn);
			#endif
			#if HAL_USART_RX_INT3_EN == EN
				if (HAL_Uart->Instance == USART3)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a0b      	ldr	r2, [pc, #44]	; (80029e8 <HAL_UART_INT_init+0x40>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d103      	bne.n	80029c6 <HAL_UART_INT_init+0x1e>
					RX_Callback_USART_3=HAL_Uart->RX_Callback;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	699b      	ldr	r3, [r3, #24]
 80029c2:	4a0a      	ldr	r2, [pc, #40]	; (80029ec <HAL_UART_INT_init+0x44>)
 80029c4:	6013      	str	r3, [r2, #0]
				NVIC_EnableIRQ(USART3_IRQn);
 80029c6:	2027      	movs	r0, #39	; 0x27
 80029c8:	f7ff fe66 	bl	8002698 <__NVIC_EnableIRQ>
			#endif
			HAL_Uart->Instance->CR1 |= HAL_USART_RXNE_EN;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	68da      	ldr	r2, [r3, #12]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f042 0220 	orr.w	r2, r2, #32
 80029da:	60da      	str	r2, [r3, #12]
  __ASM volatile ("cpsie i" : : : "memory");
 80029dc:	b662      	cpsie	i
}
 80029de:	bf00      	nop
			__enable_irq();
#endif
}
 80029e0:	bf00      	nop
 80029e2:	3708      	adds	r7, #8
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd80      	pop	{r7, pc}
 80029e8:	40004800 	.word	0x40004800
 80029ec:	200000d4 	.word	0x200000d4

080029f0 <HAL_UART_Init>:

void HAL_UART_Init(UART_t *HAL_Uart)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b094      	sub	sp, #80	; 0x50
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
	if(HAL_Uart!=NULL)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	f000 817c 	beq.w	8002cf8 <HAL_UART_Init+0x308>
	{
		USART_TypeDef *HAL_USART_CONFIG=HAL_Uart->Instance;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	64bb      	str	r3, [r7, #72]	; 0x48
		GPIO_TypeDef  *GPIO_PORT=NULL;
 8002a06:	2300      	movs	r3, #0
 8002a08:	647b      	str	r3, [r7, #68]	; 0x44
		uint32_t USART_PERIPH_CLK=0;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	64fb      	str	r3, [r7, #76]	; 0x4c
		GPIO_t TX;
		GPIO_t RX;

		Handle=HAL_USART_CONFIG;
 8002a0e:	4a95      	ldr	r2, [pc, #596]	; (8002c64 <HAL_UART_Init+0x274>)
 8002a10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a12:	6013      	str	r3, [r2, #0]
		TX.PIN=(HAL_Uart->Instance==USART1)?GPIO_PIN_9:(HAL_Uart->Instance==USART2)?GPIO_PIN_2:GPIO_PIN_10;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a93      	ldr	r2, [pc, #588]	; (8002c68 <HAL_UART_Init+0x278>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d008      	beq.n	8002a30 <HAL_UART_Init+0x40>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a92      	ldr	r2, [pc, #584]	; (8002c6c <HAL_UART_Init+0x27c>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d101      	bne.n	8002a2c <HAL_UART_Init+0x3c>
 8002a28:	2302      	movs	r3, #2
 8002a2a:	e002      	b.n	8002a32 <HAL_UART_Init+0x42>
 8002a2c:	230a      	movs	r3, #10
 8002a2e:	e000      	b.n	8002a32 <HAL_UART_Init+0x42>
 8002a30:	2309      	movs	r3, #9
 8002a32:	62fb      	str	r3, [r7, #44]	; 0x2c
		RX.PIN=(HAL_Uart->Instance==USART1)?GPIO_PIN_10:(HAL_Uart->Instance==USART2)?GPIO_PIN_3:GPIO_PIN_11;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a8b      	ldr	r2, [pc, #556]	; (8002c68 <HAL_UART_Init+0x278>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d008      	beq.n	8002a50 <HAL_UART_Init+0x60>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a8a      	ldr	r2, [pc, #552]	; (8002c6c <HAL_UART_Init+0x27c>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d101      	bne.n	8002a4c <HAL_UART_Init+0x5c>
 8002a48:	2303      	movs	r3, #3
 8002a4a:	e002      	b.n	8002a52 <HAL_UART_Init+0x62>
 8002a4c:	230b      	movs	r3, #11
 8002a4e:	e000      	b.n	8002a52 <HAL_UART_Init+0x62>
 8002a50:	230a      	movs	r3, #10
 8002a52:	613b      	str	r3, [r7, #16]

		TX.SPEED=HAL_GPIO_SPEED_FREQ_HIGH;
 8002a54:	2303      	movs	r3, #3
 8002a56:	62bb      	str	r3, [r7, #40]	; 0x28
		TX.Mode=HAL_GPIO_OUT_ALT_PP;
 8002a58:	2303      	movs	r3, #3
 8002a5a:	627b      	str	r3, [r7, #36]	; 0x24
		RX.Mode=HAL_GPIO_IN;
 8002a5c:	2305      	movs	r3, #5
 8002a5e:	60bb      	str	r3, [r7, #8]
		RX.PULL=HAL_GPIO_NOPULL;
 8002a60:	2300      	movs	r3, #0
 8002a62:	617b      	str	r3, [r7, #20]

		GPIO_PORT=((HAL_USART_CONFIG)==USART1)?GPIOA:((HAL_USART_CONFIG)==USART2)?GPIOA:GPIOB;
 8002a64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a66:	4a80      	ldr	r2, [pc, #512]	; (8002c68 <HAL_UART_Init+0x278>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d007      	beq.n	8002a7c <HAL_UART_Init+0x8c>
 8002a6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a6e:	4a7f      	ldr	r2, [pc, #508]	; (8002c6c <HAL_UART_Init+0x27c>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d101      	bne.n	8002a78 <HAL_UART_Init+0x88>
 8002a74:	4b7e      	ldr	r3, [pc, #504]	; (8002c70 <HAL_UART_Init+0x280>)
 8002a76:	e002      	b.n	8002a7e <HAL_UART_Init+0x8e>
 8002a78:	4b7e      	ldr	r3, [pc, #504]	; (8002c74 <HAL_UART_Init+0x284>)
 8002a7a:	e000      	b.n	8002a7e <HAL_UART_Init+0x8e>
 8002a7c:	4b7c      	ldr	r3, [pc, #496]	; (8002c70 <HAL_UART_Init+0x280>)
 8002a7e:	647b      	str	r3, [r7, #68]	; 0x44

		HAL_USART_CONFIG=HAL_Uart->Instance;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	64bb      	str	r3, [r7, #72]	; 0x48

		/*Enable USART RCC CLOCK*/
		if(HAL_USART_CONFIG == USART1)
 8002a86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a88:	4a77      	ldr	r2, [pc, #476]	; (8002c68 <HAL_UART_Init+0x278>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d106      	bne.n	8002a9c <HAL_UART_Init+0xac>
			HAL_RCC_USART1_EN();
 8002a8e:	4b7a      	ldr	r3, [pc, #488]	; (8002c78 <HAL_UART_Init+0x288>)
 8002a90:	699b      	ldr	r3, [r3, #24]
 8002a92:	4a79      	ldr	r2, [pc, #484]	; (8002c78 <HAL_UART_Init+0x288>)
 8002a94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a98:	6193      	str	r3, [r2, #24]
 8002a9a:	e014      	b.n	8002ac6 <HAL_UART_Init+0xd6>
		else if(HAL_USART_CONFIG == USART2)
 8002a9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a9e:	4a73      	ldr	r2, [pc, #460]	; (8002c6c <HAL_UART_Init+0x27c>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d106      	bne.n	8002ab2 <HAL_UART_Init+0xc2>
			HAL_RCC_USART2_EN();
 8002aa4:	4b74      	ldr	r3, [pc, #464]	; (8002c78 <HAL_UART_Init+0x288>)
 8002aa6:	69db      	ldr	r3, [r3, #28]
 8002aa8:	4a73      	ldr	r2, [pc, #460]	; (8002c78 <HAL_UART_Init+0x288>)
 8002aaa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002aae:	61d3      	str	r3, [r2, #28]
 8002ab0:	e009      	b.n	8002ac6 <HAL_UART_Init+0xd6>
		else if(HAL_USART_CONFIG == USART3)
 8002ab2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ab4:	4a71      	ldr	r2, [pc, #452]	; (8002c7c <HAL_UART_Init+0x28c>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d105      	bne.n	8002ac6 <HAL_UART_Init+0xd6>
			HAL_RCC_USART3_EN();
 8002aba:	4b6f      	ldr	r3, [pc, #444]	; (8002c78 <HAL_UART_Init+0x288>)
 8002abc:	69db      	ldr	r3, [r3, #28]
 8002abe:	4a6e      	ldr	r2, [pc, #440]	; (8002c78 <HAL_UART_Init+0x288>)
 8002ac0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ac4:	61d3      	str	r3, [r2, #28]

		/*Init GPIO Pins TX,RX */
		switch(HAL_Uart->Mode)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	695b      	ldr	r3, [r3, #20]
 8002aca:	2b02      	cmp	r3, #2
 8002acc:	d013      	beq.n	8002af6 <HAL_UART_Init+0x106>
 8002ace:	2b02      	cmp	r3, #2
 8002ad0:	d83d      	bhi.n	8002b4e <HAL_UART_Init+0x15e>
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d002      	beq.n	8002adc <HAL_UART_Init+0xec>
 8002ad6:	2b01      	cmp	r3, #1
 8002ad8:	d01d      	beq.n	8002b16 <HAL_UART_Init+0x126>
 8002ada:	e038      	b.n	8002b4e <HAL_UART_Init+0x15e>
		{
			case HAL_USART_TRANSMIT_MODE:
				HAL_USART_CONFIG->CR1|=HAL_USART_TRANSMIT_EN;
 8002adc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ade:	68db      	ldr	r3, [r3, #12]
 8002ae0:	f043 0208 	orr.w	r2, r3, #8
 8002ae4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ae6:	60da      	str	r2, [r3, #12]
				HAL_Init_PIN(GPIO_PORT,&TX);
 8002ae8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002aec:	4619      	mov	r1, r3
 8002aee:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8002af0:	f7fe fa4e 	bl	8000f90 <HAL_Init_PIN>
				break;
 8002af4:	e02b      	b.n	8002b4e <HAL_UART_Init+0x15e>
			case HAL_USART_REC_MODE:
				HAL_USART_CONFIG->CR1|=HAL_USART_RECIEVE_EN;
 8002af6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002af8:	68db      	ldr	r3, [r3, #12]
 8002afa:	f043 0204 	orr.w	r2, r3, #4
 8002afe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b00:	60da      	str	r2, [r3, #12]
				HAL_Init_PIN(GPIO_PORT,&RX);
 8002b02:	f107 0308 	add.w	r3, r7, #8
 8002b06:	4619      	mov	r1, r3
 8002b08:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8002b0a:	f7fe fa41 	bl	8000f90 <HAL_Init_PIN>
				HAL_UART_INT_init(HAL_Uart);/*Recieve Interrupts */
 8002b0e:	6878      	ldr	r0, [r7, #4]
 8002b10:	f7ff ff4a 	bl	80029a8 <HAL_UART_INT_init>
				break;
 8002b14:	e01b      	b.n	8002b4e <HAL_UART_Init+0x15e>
			case HAL_USART_TRANSMIT_REC_MODE:
				HAL_USART_CONFIG->CR1|=HAL_USART_TRANSMIT_EN;
 8002b16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b18:	68db      	ldr	r3, [r3, #12]
 8002b1a:	f043 0208 	orr.w	r2, r3, #8
 8002b1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b20:	60da      	str	r2, [r3, #12]
				HAL_USART_CONFIG->CR1|=HAL_USART_RECIEVE_EN;
 8002b22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b24:	68db      	ldr	r3, [r3, #12]
 8002b26:	f043 0204 	orr.w	r2, r3, #4
 8002b2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b2c:	60da      	str	r2, [r3, #12]
				HAL_Init_PIN(GPIO_PORT,&RX);
 8002b2e:	f107 0308 	add.w	r3, r7, #8
 8002b32:	4619      	mov	r1, r3
 8002b34:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8002b36:	f7fe fa2b 	bl	8000f90 <HAL_Init_PIN>
				HAL_Init_PIN(GPIO_PORT,&TX);
 8002b3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b3e:	4619      	mov	r1, r3
 8002b40:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8002b42:	f7fe fa25 	bl	8000f90 <HAL_Init_PIN>
				HAL_UART_INT_init(HAL_Uart);/*Recieve Interrupts */
 8002b46:	6878      	ldr	r0, [r7, #4]
 8002b48:	f7ff ff2e 	bl	80029a8 <HAL_UART_INT_init>
				break;
 8002b4c:	bf00      	nop
		}

		switch(HAL_Uart->StopBits)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	68db      	ldr	r3, [r3, #12]
 8002b52:	2b03      	cmp	r3, #3
 8002b54:	d838      	bhi.n	8002bc8 <HAL_UART_Init+0x1d8>
 8002b56:	a201      	add	r2, pc, #4	; (adr r2, 8002b5c <HAL_UART_Init+0x16c>)
 8002b58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b5c:	08002b6d 	.word	0x08002b6d
 8002b60:	08002b7b 	.word	0x08002b7b
 8002b64:	08002b95 	.word	0x08002b95
 8002b68:	08002baf 	.word	0x08002baf
		{
			case HAL_USART_NO_STOP_BITS_1:
				HAL_USART_CONFIG->CR2 &= (~(0x00000003<<HAL_USART_STOP));
 8002b6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b6e:	691b      	ldr	r3, [r3, #16]
 8002b70:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002b74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b76:	611a      	str	r2, [r3, #16]
				break;
 8002b78:	e026      	b.n	8002bc8 <HAL_UART_Init+0x1d8>
			case HAL_USART_NO_STOP_BITS_0_5:
				HAL_USART_CONFIG->CR2 &= (~(0x00000003<<HAL_USART_STOP));
 8002b7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b7c:	691b      	ldr	r3, [r3, #16]
 8002b7e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002b82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b84:	611a      	str	r2, [r3, #16]
				HAL_USART_CONFIG->CR2 |= HAL_USART_STOP_0_5;
 8002b86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b88:	691b      	ldr	r3, [r3, #16]
 8002b8a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002b8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b90:	611a      	str	r2, [r3, #16]
				break;
 8002b92:	e019      	b.n	8002bc8 <HAL_UART_Init+0x1d8>
			case HAL_USART_NO_STOP_BITS_1_5:
				HAL_USART_CONFIG->CR2 &= (~(0x00000003<<HAL_USART_STOP));
 8002b94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b96:	691b      	ldr	r3, [r3, #16]
 8002b98:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002b9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b9e:	611a      	str	r2, [r3, #16]
				HAL_USART_CONFIG->CR2 |= HAL_USART_STOP_1_5;
 8002ba0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ba2:	691b      	ldr	r3, [r3, #16]
 8002ba4:	f443 5240 	orr.w	r2, r3, #12288	; 0x3000
 8002ba8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002baa:	611a      	str	r2, [r3, #16]
				break;
 8002bac:	e00c      	b.n	8002bc8 <HAL_UART_Init+0x1d8>
			case HAL_USART_NO_STOP_BITS_2:
				HAL_USART_CONFIG->CR2 &= (~(0x00000003<<HAL_USART_STOP));
 8002bae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002bb0:	691b      	ldr	r3, [r3, #16]
 8002bb2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002bb6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002bb8:	611a      	str	r2, [r3, #16]
				HAL_USART_CONFIG->CR2 |= HAL_USART_STOP_2;
 8002bba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002bbc:	691b      	ldr	r3, [r3, #16]
 8002bbe:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002bc2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002bc4:	611a      	str	r2, [r3, #16]
				break;
 8002bc6:	bf00      	nop
		}

		switch(HAL_Uart->WordLength)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	689b      	ldr	r3, [r3, #8]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d002      	beq.n	8002bd6 <HAL_UART_Init+0x1e6>
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	d007      	beq.n	8002be4 <HAL_UART_Init+0x1f4>
 8002bd4:	e013      	b.n	8002bfe <HAL_UART_Init+0x20e>
		{
			case HAL_USART_WORD_LENGTH_8:
				HAL_USART_CONFIG->CR2 &= HAL_USART_WRDL8_MKS;
 8002bd6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002bd8:	691b      	ldr	r3, [r3, #16]
 8002bda:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002bde:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002be0:	611a      	str	r2, [r3, #16]
				break;
 8002be2:	e00c      	b.n	8002bfe <HAL_UART_Init+0x20e>
			case HAL_USART_WORD_LENGTH_9:
				HAL_USART_CONFIG->CR2 &= (~(0x00000001 << HAL_USART_M));
 8002be4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002be6:	691b      	ldr	r3, [r3, #16]
 8002be8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002bec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002bee:	611a      	str	r2, [r3, #16]
				HAL_USART_CONFIG->CR2 |= HAL_USART_WRDL9_MSK;
 8002bf0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002bf2:	691b      	ldr	r3, [r3, #16]
 8002bf4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002bf8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002bfa:	611a      	str	r2, [r3, #16]
				break;
 8002bfc:	bf00      	nop
		}

		switch(HAL_Uart->Parity)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	691b      	ldr	r3, [r3, #16]
 8002c02:	2b02      	cmp	r3, #2
 8002c04:	d006      	beq.n	8002c14 <HAL_UART_Init+0x224>
 8002c06:	2b02      	cmp	r3, #2
 8002c08:	d825      	bhi.n	8002c56 <HAL_UART_Init+0x266>
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d016      	beq.n	8002c3c <HAL_UART_Init+0x24c>
 8002c0e:	2b01      	cmp	r3, #1
 8002c10:	d007      	beq.n	8002c22 <HAL_UART_Init+0x232>
 8002c12:	e020      	b.n	8002c56 <HAL_UART_Init+0x266>
		{
			case HAL_USART_NO_PAIRTY:
				HAL_USART_CONFIG->CR1 &= HAL_USART_PARITY_DIS;
 8002c14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c16:	68db      	ldr	r3, [r3, #12]
 8002c18:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002c1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c1e:	60da      	str	r2, [r3, #12]
				break;
 8002c20:	e019      	b.n	8002c56 <HAL_UART_Init+0x266>
			case HAL_USART_ODD_PARITY:
				HAL_USART_CONFIG->CR1 |= HAL_USART_PARITY_EN;
 8002c22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c24:	68db      	ldr	r3, [r3, #12]
 8002c26:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002c2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c2c:	60da      	str	r2, [r3, #12]
				HAL_USART_CONFIG->CR1 |= HAL_USART_PARITY_ODD;
 8002c2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c30:	68db      	ldr	r3, [r3, #12]
 8002c32:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002c36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c38:	60da      	str	r2, [r3, #12]
				break;
 8002c3a:	e00c      	b.n	8002c56 <HAL_UART_Init+0x266>
			case HAL_USART_EVEN_PARITY:
				HAL_USART_CONFIG->CR1 |= HAL_USART_PARITY_EN;
 8002c3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c3e:	68db      	ldr	r3, [r3, #12]
 8002c40:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002c44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c46:	60da      	str	r2, [r3, #12]
				HAL_USART_CONFIG->CR1 &= HAL_USART_PARITY_EVEN;
 8002c48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c4a:	68db      	ldr	r3, [r3, #12]
 8002c4c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002c50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c52:	60da      	str	r2, [r3, #12]
				break;
 8002c54:	bf00      	nop
		}
		/*Set Baud Rate of the USART Module should first calculate peripheral frequency which will be implemented later on*/
		uint8_t SH_M=(HAL_Uart->Instance==USART1)?11:8;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a03      	ldr	r2, [pc, #12]	; (8002c68 <HAL_UART_Init+0x278>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d10f      	bne.n	8002c80 <HAL_UART_Init+0x290>
 8002c60:	230b      	movs	r3, #11
 8002c62:	e00e      	b.n	8002c82 <HAL_UART_Init+0x292>
 8002c64:	200000d0 	.word	0x200000d0
 8002c68:	40013800 	.word	0x40013800
 8002c6c:	40004400 	.word	0x40004400
 8002c70:	40010800 	.word	0x40010800
 8002c74:	40010c00 	.word	0x40010c00
 8002c78:	40021000 	.word	0x40021000
 8002c7c:	40004800 	.word	0x40004800
 8002c80:	2308      	movs	r3, #8
 8002c82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
		switch((RCC->CFGR & (0x00000003<<2))>>2)
 8002c86:	4b1e      	ldr	r3, [pc, #120]	; (8002d00 <HAL_UART_Init+0x310>)
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	089b      	lsrs	r3, r3, #2
 8002c8c:	f003 0303 	and.w	r3, r3, #3
 8002c90:	2b02      	cmp	r3, #2
 8002c92:	d016      	beq.n	8002cc2 <HAL_UART_Init+0x2d2>
 8002c94:	2b02      	cmp	r3, #2
 8002c96:	d81f      	bhi.n	8002cd8 <HAL_UART_Init+0x2e8>
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d002      	beq.n	8002ca2 <HAL_UART_Init+0x2b2>
 8002c9c:	2b01      	cmp	r3, #1
 8002c9e:	d008      	beq.n	8002cb2 <HAL_UART_Init+0x2c2>
 8002ca0:	e01a      	b.n	8002cd8 <HAL_UART_Init+0x2e8>
		{
			case 0x00000000UL:/*----HSI----*/
				USART_PERIPH_CLK=CLK_CALC(8000000UL,SH_M);
 8002ca2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8002ca6:	4619      	mov	r1, r3
 8002ca8:	4816      	ldr	r0, [pc, #88]	; (8002d04 <HAL_UART_Init+0x314>)
 8002caa:	f7ff fdf3 	bl	8002894 <CLK_CALC>
 8002cae:	64f8      	str	r0, [r7, #76]	; 0x4c
				break;
 8002cb0:	e012      	b.n	8002cd8 <HAL_UART_Init+0x2e8>
			case 0x00000001UL:/*---HSR----*/
				USART_PERIPH_CLK=CLK_CALC(8000000UL,SH_M);
 8002cb2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8002cb6:	4619      	mov	r1, r3
 8002cb8:	4812      	ldr	r0, [pc, #72]	; (8002d04 <HAL_UART_Init+0x314>)
 8002cba:	f7ff fdeb 	bl	8002894 <CLK_CALC>
 8002cbe:	64f8      	str	r0, [r7, #76]	; 0x4c
				break;
 8002cc0:	e00a      	b.n	8002cd8 <HAL_UART_Init+0x2e8>
			case 0x00000002UL:/*---PLL----*/
				USART_PERIPH_CLK=PLL_CLK_CALC();
 8002cc2:	f7ff fdaf 	bl	8002824 <PLL_CLK_CALC>
 8002cc6:	64f8      	str	r0, [r7, #76]	; 0x4c
				USART_PERIPH_CLK=CLK_CALC(USART_PERIPH_CLK,SH_M);
 8002cc8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8002ccc:	4619      	mov	r1, r3
 8002cce:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8002cd0:	f7ff fde0 	bl	8002894 <CLK_CALC>
 8002cd4:	64f8      	str	r0, [r7, #76]	; 0x4c
				break;
 8002cd6:	bf00      	nop
		}
		HAL_USART_CONFIG->BRR=Baud_Rate_Gen(USART_PERIPH_CLK,HAL_Uart->BaudRate);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	4619      	mov	r1, r3
 8002cde:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8002ce0:	f7ff fcf6 	bl	80026d0 <Baud_Rate_Gen>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	461a      	mov	r2, r3
 8002ce8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002cea:	609a      	str	r2, [r3, #8]
		HAL_USART_CONFIG->CR1|=HAL_USART_UEEN_MSK;
 8002cec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002cee:	68db      	ldr	r3, [r3, #12]
 8002cf0:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002cf4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002cf6:	60da      	str	r2, [r3, #12]
	}
}
 8002cf8:	bf00      	nop
 8002cfa:	3750      	adds	r7, #80	; 0x50
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}
 8002d00:	40021000 	.word	0x40021000
 8002d04:	007a1200 	.word	0x007a1200

08002d08 <HAL_UART_Byte>:

void HAL_UART_Byte(USART_TypeDef *Handle,uint32_t data)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b083      	sub	sp, #12
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
 8002d10:	6039      	str	r1, [r7, #0]
	if(Handle!=NULL)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d00b      	beq.n	8002d30 <HAL_UART_Byte+0x28>
	{
		while(!(READ_BIT(Handle->SR,HAL_USART_TXE)));
 8002d18:	bf00      	nop
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	09db      	lsrs	r3, r3, #7
 8002d20:	f003 0301 	and.w	r3, r3, #1
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d0f8      	beq.n	8002d1a <HAL_UART_Byte+0x12>
		Handle->DR = data&0xFF;
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	b2da      	uxtb	r2, r3
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	605a      	str	r2, [r3, #4]
	}
}
 8002d30:	bf00      	nop
 8002d32:	370c      	adds	r7, #12
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bc80      	pop	{r7}
 8002d38:	4770      	bx	lr

08002d3a <HAL_UART_Buffer>:

void HAL_UART_Buffer(USART_TypeDef *Handle,int8_t * Buffer,uint32_t Size)
{
 8002d3a:	b580      	push	{r7, lr}
 8002d3c:	b086      	sub	sp, #24
 8002d3e:	af00      	add	r7, sp, #0
 8002d40:	60f8      	str	r0, [r7, #12]
 8002d42:	60b9      	str	r1, [r7, #8]
 8002d44:	607a      	str	r2, [r7, #4]
	if (Handle != NULL && Buffer!=NULL) {
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d01c      	beq.n	8002d86 <HAL_UART_Buffer+0x4c>
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d019      	beq.n	8002d86 <HAL_UART_Buffer+0x4c>
		uint32_t Byte_Tx=0;
 8002d52:	2300      	movs	r3, #0
 8002d54:	617b      	str	r3, [r7, #20]
		while(Byte_Tx<=Size-1)
 8002d56:	e00b      	b.n	8002d70 <HAL_UART_Buffer+0x36>
		{
			HAL_UART_Byte(Handle,*(Buffer+Byte_Tx));
 8002d58:	68ba      	ldr	r2, [r7, #8]
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	4413      	add	r3, r2
 8002d5e:	f993 3000 	ldrsb.w	r3, [r3]
 8002d62:	4619      	mov	r1, r3
 8002d64:	68f8      	ldr	r0, [r7, #12]
 8002d66:	f7ff ffcf 	bl	8002d08 <HAL_UART_Byte>
			Byte_Tx++;
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	3301      	adds	r3, #1
 8002d6e:	617b      	str	r3, [r7, #20]
		while(Byte_Tx<=Size-1)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	3b01      	subs	r3, #1
 8002d74:	697a      	ldr	r2, [r7, #20]
 8002d76:	429a      	cmp	r2, r3
 8002d78:	d9ee      	bls.n	8002d58 <HAL_UART_Buffer+0x1e>
		}
		Handle->SR &= HAL_USART_TXE_CLEAR;//Clear TXE flag
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	601a      	str	r2, [r3, #0]
	}
}
 8002d86:	bf00      	nop
 8002d88:	3718      	adds	r7, #24
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd80      	pop	{r7, pc}
	...

08002d90 <USART3_IRQHandler>:
}
#endif

#if HAL_USART_RX_INT3_EN == EN
void USART3_IRQHandler(void)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	af00      	add	r7, sp, #0
	if(USART3->SR & HAL_USART_RXNE_EN)
 8002d94:	4b08      	ldr	r3, [pc, #32]	; (8002db8 <USART3_IRQHandler+0x28>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f003 0320 	and.w	r3, r3, #32
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d008      	beq.n	8002db2 <USART3_IRQHandler+0x22>
		if(USART3->SR & HAL_USART_RXNE_EN)
 8002da0:	4b05      	ldr	r3, [pc, #20]	; (8002db8 <USART3_IRQHandler+0x28>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f003 0320 	and.w	r3, r3, #32
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d002      	beq.n	8002db2 <USART3_IRQHandler+0x22>
			RX_Callback_USART_3();
 8002dac:	4b03      	ldr	r3, [pc, #12]	; (8002dbc <USART3_IRQHandler+0x2c>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4798      	blx	r3
}
 8002db2:	bf00      	nop
 8002db4:	bd80      	pop	{r7, pc}
 8002db6:	bf00      	nop
 8002db8:	40004800 	.word	0x40004800
 8002dbc:	200000d4 	.word	0x200000d4

08002dc0 <__io_putchar>:
#include "HAL_RCC.h"

extern USART_TypeDef * Handle;

int __io_putchar(int ch)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b082      	sub	sp, #8
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
	HAL_UART_Byte(Handle,ch);
 8002dc8:	4b05      	ldr	r3, [pc, #20]	; (8002de0 <__io_putchar+0x20>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	687a      	ldr	r2, [r7, #4]
 8002dce:	4611      	mov	r1, r2
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	f7ff ff99 	bl	8002d08 <HAL_UART_Byte>
	return ch;
 8002dd6:	687b      	ldr	r3, [r7, #4]
}
 8002dd8:	4618      	mov	r0, r3
 8002dda:	3708      	adds	r7, #8
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bd80      	pop	{r7, pc}
 8002de0:	200000d0 	.word	0x200000d0

08002de4 <NVIC_int>:
void PIN_Pressed(void);
void SYSTICK_INC(void);
void ADC_Handler(void);
void TIM2_CAPT_VAL(void);
void NVIC_int()
{
 8002de4:	b480      	push	{r7}
 8002de6:	af00      	add	r7, sp, #0
	SCB->AIRCR = (0x5FA<<16);
 8002de8:	4b05      	ldr	r3, [pc, #20]	; (8002e00 <NVIC_int+0x1c>)
 8002dea:	4a06      	ldr	r2, [pc, #24]	; (8002e04 <NVIC_int+0x20>)
 8002dec:	60da      	str	r2, [r3, #12]

	SCB->AIRCR = (0b101<<8);
 8002dee:	4b04      	ldr	r3, [pc, #16]	; (8002e00 <NVIC_int+0x1c>)
 8002df0:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8002df4:	60da      	str	r2, [r3, #12]
}
 8002df6:	bf00      	nop
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bc80      	pop	{r7}
 8002dfc:	4770      	bx	lr
 8002dfe:	bf00      	nop
 8002e00:	e000ed00 	.word	0xe000ed00
 8002e04:	05fa0000 	.word	0x05fa0000

08002e08 <main>:
		HAL_GPIO_SPEED_FREQ_MEDIUM, };
GPIO_t GPIO_OUT2 = { .Mode = HAL_GPIO_OUT_PP, .PIN = GPIO_PIN_6, .SPEED =
		HAL_GPIO_SPEED_FREQ_MEDIUM, };

int main(void)
{
 8002e08:	b5b0      	push	{r4, r5, r7, lr}
 8002e0a:	b0ca      	sub	sp, #296	; 0x128
 8002e0c:	af00      	add	r7, sp, #0
	SystemClock_Config(&RCC_REG);
 8002e0e:	484a      	ldr	r0, [pc, #296]	; (8002f38 <main+0x130>)
 8002e10:	f7fe fe10 	bl	8001a34 <SystemClock_Config>
	NVIC_int();
 8002e14:	f7ff ffe6 	bl	8002de4 <NVIC_int>
	SYSTICK_INIT(SYSTICK_INC,1000000);
 8002e18:	4948      	ldr	r1, [pc, #288]	; (8002f3c <main+0x134>)
 8002e1a:	4849      	ldr	r0, [pc, #292]	; (8002f40 <main+0x138>)
 8002e1c:	f7fd f9a8 	bl	8000170 <SYSTICK_INIT>
	ADC_init_t Adc={
 8002e20:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002e24:	22b8      	movs	r2, #184	; 0xb8
 8002e26:	2100      	movs	r1, #0
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f000 fa13 	bl	8003254 <memset>
 8002e2e:	2301      	movs	r3, #1
 8002e30:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002e32:	2301      	movs	r3, #1
 8002e34:	677b      	str	r3, [r7, #116]	; 0x74
 8002e36:	4b43      	ldr	r3, [pc, #268]	; (8002f44 <main+0x13c>)
 8002e38:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002e3c:	4b42      	ldr	r3, [pc, #264]	; (8002f48 <main+0x140>)
 8002e3e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8002e42:	2302      	movs	r3, #2
 8002e44:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8002e48:	2301      	movs	r3, #1
 8002e4a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
			.Init.Alignment=HAL_ADC_ALLIGNMENT_LEFT,
			.Init.Watchdog_EN=HAL_WATCHDOG_DISABLE,
			.ADC_Callback = ADC_Handler,
	};
	/*Configure USART */
	UART_t USART={
 8002e4e:	4b3f      	ldr	r3, [pc, #252]	; (8002f4c <main+0x144>)
 8002e50:	f107 0450 	add.w	r4, r7, #80	; 0x50
 8002e54:	461d      	mov	r5, r3
 8002e56:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002e58:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002e5a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002e5e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			.Parity=HAL_USART_NO_PAIRTY,
			.StopBits=HAL_USART_NO_STOP_BITS_1,
			.WordLength=HAL_USART_WORD_LENGTH_8,
			.RX_Callback=USART_handler,
	};
	TimerU_D_t TIMERX_1={
 8002e62:	f107 031c 	add.w	r3, r7, #28
 8002e66:	4618      	mov	r0, r3
 8002e68:	2334      	movs	r3, #52	; 0x34
 8002e6a:	461a      	mov	r2, r3
 8002e6c:	2100      	movs	r1, #0
 8002e6e:	f000 f9f1 	bl	8003254 <memset>
 8002e72:	f107 031c 	add.w	r3, r7, #28
 8002e76:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002e7a:	601a      	str	r2, [r3, #0]
 8002e7c:	f107 031c 	add.w	r3, r7, #28
 8002e80:	2205      	movs	r2, #5
 8002e82:	605a      	str	r2, [r3, #4]
 8002e84:	f107 031c 	add.w	r3, r7, #28
 8002e88:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002e8c:	609a      	str	r2, [r3, #8]
 8002e8e:	f107 031c 	add.w	r3, r7, #28
 8002e92:	f64f 7201 	movw	r2, #65281	; 0xff01
 8002e96:	60da      	str	r2, [r3, #12]
 8002e98:	f107 031c 	add.w	r3, r7, #28
 8002e9c:	2203      	movs	r2, #3
 8002e9e:	61da      	str	r2, [r3, #28]
 8002ea0:	f107 031c 	add.w	r3, r7, #28
 8002ea4:	2209      	movs	r2, #9
 8002ea6:	621a      	str	r2, [r3, #32]
 8002ea8:	f107 031c 	add.w	r3, r7, #28
 8002eac:	2201      	movs	r2, #1
 8002eae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002eb2:	f107 031c 	add.w	r3, r7, #28
 8002eb6:	f44f 7290 	mov.w	r2, #288	; 0x120
 8002eba:	629a      	str	r2, [r3, #40]	; 0x28
 8002ebc:	f107 031c 	add.w	r3, r7, #28
 8002ec0:	4a23      	ldr	r2, [pc, #140]	; (8002f50 <main+0x148>)
 8002ec2:	631a      	str	r2, [r3, #48]	; 0x30
				.TIMR_CH4_CBCK =TIM2_CAPT_VAL,
				.NO_CMP_CHNS=1,
				.Prescaler=288,
				.SH_EN=HAL_TIMER_SHR_EN,
	};
	GPIO_t GPIO_INT={
 8002ec4:	463b      	mov	r3, r7
 8002ec6:	461a      	mov	r2, r3
 8002ec8:	2300      	movs	r3, #0
 8002eca:	6013      	str	r3, [r2, #0]
 8002ecc:	6053      	str	r3, [r2, #4]
 8002ece:	6093      	str	r3, [r2, #8]
 8002ed0:	60d3      	str	r3, [r2, #12]
 8002ed2:	6113      	str	r3, [r2, #16]
 8002ed4:	6153      	str	r3, [r2, #20]
 8002ed6:	6193      	str	r3, [r2, #24]
 8002ed8:	463b      	mov	r3, r7
 8002eda:	2205      	movs	r2, #5
 8002edc:	601a      	str	r2, [r3, #0]
 8002ede:	463b      	mov	r3, r7
 8002ee0:	2201      	movs	r2, #1
 8002ee2:	741a      	strb	r2, [r3, #16]
 8002ee4:	463b      	mov	r3, r7
 8002ee6:	4a1b      	ldr	r2, [pc, #108]	; (8002f54 <main+0x14c>)
 8002ee8:	615a      	str	r2, [r3, #20]
			.EXTI_LINE=EXTI_LINE_0,
			.EXT_N=HAL_GPIO_INT_FLAG_EN,
			.Mode=HAL_GPIO_IN,
			.PULL=HAL_GPIO_NOPULL,
	};
	HAL_Init_PIN(GPIOA,&GPIO_OUT2);
 8002eea:	491b      	ldr	r1, [pc, #108]	; (8002f58 <main+0x150>)
 8002eec:	481b      	ldr	r0, [pc, #108]	; (8002f5c <main+0x154>)
 8002eee:	f7fe f84f 	bl	8000f90 <HAL_Init_PIN>
	HAL_Init_PIN(GPIOA,&GPIO_OUT);
 8002ef2:	491b      	ldr	r1, [pc, #108]	; (8002f60 <main+0x158>)
 8002ef4:	4819      	ldr	r0, [pc, #100]	; (8002f5c <main+0x154>)
 8002ef6:	f7fe f84b 	bl	8000f90 <HAL_Init_PIN>
	HAL_Init_PIN(GPIOA,&GPIO_INT);
 8002efa:	463b      	mov	r3, r7
 8002efc:	4619      	mov	r1, r3
 8002efe:	4817      	ldr	r0, [pc, #92]	; (8002f5c <main+0x154>)
 8002f00:	f7fe f846 	bl	8000f90 <HAL_Init_PIN>
	HAL_UART_Init(&USART);
 8002f04:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002f08:	4618      	mov	r0, r3
 8002f0a:	f7ff fd71 	bl	80029f0 <HAL_UART_Init>
	HAL_TIMER_init(&TIMERX_1);
 8002f0e:	f107 031c 	add.w	r3, r7, #28
 8002f12:	4618      	mov	r0, r3
 8002f14:	f7fe fe7c 	bl	8001c10 <HAL_TIMER_init>
	int8_t *Buffer="Ready To TX:";
 8002f18:	4b12      	ldr	r3, [pc, #72]	; (8002f64 <main+0x15c>)
 8002f1a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	HAL_UART_Buffer(USART.Instance,Buffer,12);
 8002f1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f20:	220c      	movs	r2, #12
 8002f22:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 8002f26:	4618      	mov	r0, r3
 8002f28:	f7ff ff07 	bl	8002d3a <HAL_UART_Buffer>
	HAL_ADC_Init(&Adc);
 8002f2c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002f30:	4618      	mov	r0, r3
 8002f32:	f7fd f9e5 	bl	8000300 <HAL_ADC_Init>
	while(1)
 8002f36:	e7fe      	b.n	8002f36 <main+0x12e>
 8002f38:	20000000 	.word	0x20000000
 8002f3c:	000f4240 	.word	0x000f4240
 8002f40:	08002f85 	.word	0x08002f85
 8002f44:	08002fd1 	.word	0x08002fd1
 8002f48:	40012400 	.word	0x40012400
 8002f4c:	0800414c 	.word	0x0800414c
 8002f50:	08002f69 	.word	0x08002f69
 8002f54:	08003051 	.word	0x08003051
 8002f58:	20000024 	.word	0x20000024
 8002f5c:	40010800 	.word	0x40010800
 8002f60:	20000008 	.word	0x20000008
 8002f64:	0800413c 	.word	0x0800413c

08002f68 <TIM2_CAPT_VAL>:

	}
}

void TIM2_CAPT_VAL(void)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	af00      	add	r7, sp, #0
	CapTure = TIM2->CCR4;
 8002f6c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f72:	b29a      	uxth	r2, r3
 8002f74:	4b02      	ldr	r3, [pc, #8]	; (8002f80 <TIM2_CAPT_VAL+0x18>)
 8002f76:	801a      	strh	r2, [r3, #0]
}
 8002f78:	bf00      	nop
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bc80      	pop	{r7}
 8002f7e:	4770      	bx	lr
 8002f80:	200000fa 	.word	0x200000fa

08002f84 <SYSTICK_INC>:

void SYSTICK_INC(void)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	af00      	add	r7, sp, #0
	Delay_Ms++;
 8002f88:	4b0c      	ldr	r3, [pc, #48]	; (8002fbc <SYSTICK_INC+0x38>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	3301      	adds	r3, #1
 8002f8e:	4a0b      	ldr	r2, [pc, #44]	; (8002fbc <SYSTICK_INC+0x38>)
 8002f90:	6013      	str	r3, [r2, #0]
	Delay_LED = Delay_Ms;
 8002f92:	4b0a      	ldr	r3, [pc, #40]	; (8002fbc <SYSTICK_INC+0x38>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a0a      	ldr	r2, [pc, #40]	; (8002fc0 <SYSTICK_INC+0x3c>)
 8002f98:	6013      	str	r3, [r2, #0]
	if (Delay_LED - Delay_LED_O >= 250) {
 8002f9a:	4b09      	ldr	r3, [pc, #36]	; (8002fc0 <SYSTICK_INC+0x3c>)
 8002f9c:	681a      	ldr	r2, [r3, #0]
 8002f9e:	4b09      	ldr	r3, [pc, #36]	; (8002fc4 <SYSTICK_INC+0x40>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	1ad3      	subs	r3, r2, r3
 8002fa4:	2bf9      	cmp	r3, #249	; 0xf9
 8002fa6:	d907      	bls.n	8002fb8 <SYSTICK_INC+0x34>
		HAL_Toggle_PIN(GPIOA, &GPIO_OUT2);
 8002fa8:	4907      	ldr	r1, [pc, #28]	; (8002fc8 <SYSTICK_INC+0x44>)
 8002faa:	4808      	ldr	r0, [pc, #32]	; (8002fcc <SYSTICK_INC+0x48>)
 8002fac:	f7fe f94c 	bl	8001248 <HAL_Toggle_PIN>
		Delay_LED_O = Delay_LED;
 8002fb0:	4b03      	ldr	r3, [pc, #12]	; (8002fc0 <SYSTICK_INC+0x3c>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a03      	ldr	r2, [pc, #12]	; (8002fc4 <SYSTICK_INC+0x40>)
 8002fb6:	6013      	str	r3, [r2, #0]
	}
}
 8002fb8:	bf00      	nop
 8002fba:	bd80      	pop	{r7, pc}
 8002fbc:	200000d8 	.word	0x200000d8
 8002fc0:	200000dc 	.word	0x200000dc
 8002fc4:	200000e0 	.word	0x200000e0
 8002fc8:	20000024 	.word	0x20000024
 8002fcc:	40010800 	.word	0x40010800

08002fd0 <ADC_Handler>:

void ADC_Handler(void)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	af00      	add	r7, sp, #0
	ADC_Val[0]=HAL_ADC_READ_INT(ADC1,1,HAL_ADC_ALLIGNMENT_LEFT);
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	2101      	movs	r1, #1
 8002fd8:	4807      	ldr	r0, [pc, #28]	; (8002ff8 <ADC_Handler+0x28>)
 8002fda:	f7fd ff1f 	bl	8000e1c <HAL_ADC_READ_INT>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	461a      	mov	r2, r3
 8002fe2:	4b06      	ldr	r3, [pc, #24]	; (8002ffc <ADC_Handler+0x2c>)
 8002fe4:	801a      	strh	r2, [r3, #0]
	printf("Timer_Val=%i\n\r", ADC_Val[0]);
 8002fe6:	4b05      	ldr	r3, [pc, #20]	; (8002ffc <ADC_Handler+0x2c>)
 8002fe8:	881b      	ldrh	r3, [r3, #0]
 8002fea:	4619      	mov	r1, r3
 8002fec:	4804      	ldr	r0, [pc, #16]	; (8003000 <ADC_Handler+0x30>)
 8002fee:	f000 f939 	bl	8003264 <iprintf>
}
 8002ff2:	bf00      	nop
 8002ff4:	bd80      	pop	{r7, pc}
 8002ff6:	bf00      	nop
 8002ff8:	40012400 	.word	0x40012400
 8002ffc:	20000100 	.word	0x20000100
 8003000:	08004168 	.word	0x08004168

08003004 <USART_handler>:

void USART_handler(void)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	af00      	add	r7, sp, #0
	Key_Pressed = USART3->DR;
 8003008:	4b0d      	ldr	r3, [pc, #52]	; (8003040 <USART_handler+0x3c>)
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	b25a      	sxtb	r2, r3
 800300e:	4b0d      	ldr	r3, [pc, #52]	; (8003044 <USART_handler+0x40>)
 8003010:	701a      	strb	r2, [r3, #0]
	if (Key_Pressed == 'a')
 8003012:	4b0c      	ldr	r3, [pc, #48]	; (8003044 <USART_handler+0x40>)
 8003014:	f993 3000 	ldrsb.w	r3, [r3]
 8003018:	2b61      	cmp	r3, #97	; 0x61
 800301a:	d105      	bne.n	8003028 <USART_handler+0x24>
		HAL_Write_PIN(GPIOA, &GPIO_OUT, GPIO_SET);
 800301c:	2200      	movs	r2, #0
 800301e:	490a      	ldr	r1, [pc, #40]	; (8003048 <USART_handler+0x44>)
 8003020:	480a      	ldr	r0, [pc, #40]	; (800304c <USART_handler+0x48>)
 8003022:	f7fe f8e1 	bl	80011e8 <HAL_Write_PIN>
	else if (Key_Pressed == 'b')
		HAL_Write_PIN(GPIOA, &GPIO_OUT, GPIO_RESET);
}
 8003026:	e009      	b.n	800303c <USART_handler+0x38>
	else if (Key_Pressed == 'b')
 8003028:	4b06      	ldr	r3, [pc, #24]	; (8003044 <USART_handler+0x40>)
 800302a:	f993 3000 	ldrsb.w	r3, [r3]
 800302e:	2b62      	cmp	r3, #98	; 0x62
 8003030:	d104      	bne.n	800303c <USART_handler+0x38>
		HAL_Write_PIN(GPIOA, &GPIO_OUT, GPIO_RESET);
 8003032:	2201      	movs	r2, #1
 8003034:	4904      	ldr	r1, [pc, #16]	; (8003048 <USART_handler+0x44>)
 8003036:	4805      	ldr	r0, [pc, #20]	; (800304c <USART_handler+0x48>)
 8003038:	f7fe f8d6 	bl	80011e8 <HAL_Write_PIN>
}
 800303c:	bf00      	nop
 800303e:	bd80      	pop	{r7, pc}
 8003040:	40004800 	.word	0x40004800
 8003044:	200000f6 	.word	0x200000f6
 8003048:	20000008 	.word	0x20000008
 800304c:	40010800 	.word	0x40010800

08003050 <PIN_Pressed>:

void PIN_Pressed(void){
 8003050:	b480      	push	{r7}
 8003052:	af00      	add	r7, sp, #0
	Counter++;
 8003054:	4b04      	ldr	r3, [pc, #16]	; (8003068 <PIN_Pressed+0x18>)
 8003056:	881b      	ldrh	r3, [r3, #0]
 8003058:	3301      	adds	r3, #1
 800305a:	b29a      	uxth	r2, r3
 800305c:	4b02      	ldr	r3, [pc, #8]	; (8003068 <PIN_Pressed+0x18>)
 800305e:	801a      	strh	r2, [r3, #0]
}
 8003060:	bf00      	nop
 8003062:	46bd      	mov	sp, r7
 8003064:	bc80      	pop	{r7}
 8003066:	4770      	bx	lr
 8003068:	200000f8 	.word	0x200000f8

0800306c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b086      	sub	sp, #24
 8003070:	af00      	add	r7, sp, #0
 8003072:	60f8      	str	r0, [r7, #12]
 8003074:	60b9      	str	r1, [r7, #8]
 8003076:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003078:	2300      	movs	r3, #0
 800307a:	617b      	str	r3, [r7, #20]
 800307c:	e00a      	b.n	8003094 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800307e:	f3af 8000 	nop.w
 8003082:	4601      	mov	r1, r0
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	1c5a      	adds	r2, r3, #1
 8003088:	60ba      	str	r2, [r7, #8]
 800308a:	b2ca      	uxtb	r2, r1
 800308c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	3301      	adds	r3, #1
 8003092:	617b      	str	r3, [r7, #20]
 8003094:	697a      	ldr	r2, [r7, #20]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	429a      	cmp	r2, r3
 800309a:	dbf0      	blt.n	800307e <_read+0x12>
	}

return len;
 800309c:	687b      	ldr	r3, [r7, #4]
}
 800309e:	4618      	mov	r0, r3
 80030a0:	3718      	adds	r7, #24
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}

080030a6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80030a6:	b580      	push	{r7, lr}
 80030a8:	b086      	sub	sp, #24
 80030aa:	af00      	add	r7, sp, #0
 80030ac:	60f8      	str	r0, [r7, #12]
 80030ae:	60b9      	str	r1, [r7, #8]
 80030b0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030b2:	2300      	movs	r3, #0
 80030b4:	617b      	str	r3, [r7, #20]
 80030b6:	e009      	b.n	80030cc <_write+0x26>
	{
		__io_putchar(*ptr++);
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	1c5a      	adds	r2, r3, #1
 80030bc:	60ba      	str	r2, [r7, #8]
 80030be:	781b      	ldrb	r3, [r3, #0]
 80030c0:	4618      	mov	r0, r3
 80030c2:	f7ff fe7d 	bl	8002dc0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	3301      	adds	r3, #1
 80030ca:	617b      	str	r3, [r7, #20]
 80030cc:	697a      	ldr	r2, [r7, #20]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	429a      	cmp	r2, r3
 80030d2:	dbf1      	blt.n	80030b8 <_write+0x12>
	}
	return len;
 80030d4:	687b      	ldr	r3, [r7, #4]
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	3718      	adds	r7, #24
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}

080030de <_close>:

int _close(int file)
{
 80030de:	b480      	push	{r7}
 80030e0:	b083      	sub	sp, #12
 80030e2:	af00      	add	r7, sp, #0
 80030e4:	6078      	str	r0, [r7, #4]
	return -1;
 80030e6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	370c      	adds	r7, #12
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bc80      	pop	{r7}
 80030f2:	4770      	bx	lr

080030f4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80030f4:	b480      	push	{r7}
 80030f6:	b083      	sub	sp, #12
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
 80030fc:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003104:	605a      	str	r2, [r3, #4]
	return 0;
 8003106:	2300      	movs	r3, #0
}
 8003108:	4618      	mov	r0, r3
 800310a:	370c      	adds	r7, #12
 800310c:	46bd      	mov	sp, r7
 800310e:	bc80      	pop	{r7}
 8003110:	4770      	bx	lr

08003112 <_isatty>:

int _isatty(int file)
{
 8003112:	b480      	push	{r7}
 8003114:	b083      	sub	sp, #12
 8003116:	af00      	add	r7, sp, #0
 8003118:	6078      	str	r0, [r7, #4]
	return 1;
 800311a:	2301      	movs	r3, #1
}
 800311c:	4618      	mov	r0, r3
 800311e:	370c      	adds	r7, #12
 8003120:	46bd      	mov	sp, r7
 8003122:	bc80      	pop	{r7}
 8003124:	4770      	bx	lr

08003126 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003126:	b480      	push	{r7}
 8003128:	b085      	sub	sp, #20
 800312a:	af00      	add	r7, sp, #0
 800312c:	60f8      	str	r0, [r7, #12]
 800312e:	60b9      	str	r1, [r7, #8]
 8003130:	607a      	str	r2, [r7, #4]
	return 0;
 8003132:	2300      	movs	r3, #0
}
 8003134:	4618      	mov	r0, r3
 8003136:	3714      	adds	r7, #20
 8003138:	46bd      	mov	sp, r7
 800313a:	bc80      	pop	{r7}
 800313c:	4770      	bx	lr
	...

08003140 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b086      	sub	sp, #24
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003148:	4a14      	ldr	r2, [pc, #80]	; (800319c <_sbrk+0x5c>)
 800314a:	4b15      	ldr	r3, [pc, #84]	; (80031a0 <_sbrk+0x60>)
 800314c:	1ad3      	subs	r3, r2, r3
 800314e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003154:	4b13      	ldr	r3, [pc, #76]	; (80031a4 <_sbrk+0x64>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d102      	bne.n	8003162 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800315c:	4b11      	ldr	r3, [pc, #68]	; (80031a4 <_sbrk+0x64>)
 800315e:	4a12      	ldr	r2, [pc, #72]	; (80031a8 <_sbrk+0x68>)
 8003160:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003162:	4b10      	ldr	r3, [pc, #64]	; (80031a4 <_sbrk+0x64>)
 8003164:	681a      	ldr	r2, [r3, #0]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	4413      	add	r3, r2
 800316a:	693a      	ldr	r2, [r7, #16]
 800316c:	429a      	cmp	r2, r3
 800316e:	d207      	bcs.n	8003180 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003170:	f000 f846 	bl	8003200 <__errno>
 8003174:	4603      	mov	r3, r0
 8003176:	220c      	movs	r2, #12
 8003178:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800317a:	f04f 33ff 	mov.w	r3, #4294967295
 800317e:	e009      	b.n	8003194 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003180:	4b08      	ldr	r3, [pc, #32]	; (80031a4 <_sbrk+0x64>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003186:	4b07      	ldr	r3, [pc, #28]	; (80031a4 <_sbrk+0x64>)
 8003188:	681a      	ldr	r2, [r3, #0]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	4413      	add	r3, r2
 800318e:	4a05      	ldr	r2, [pc, #20]	; (80031a4 <_sbrk+0x64>)
 8003190:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003192:	68fb      	ldr	r3, [r7, #12]
}
 8003194:	4618      	mov	r0, r3
 8003196:	3718      	adds	r7, #24
 8003198:	46bd      	mov	sp, r7
 800319a:	bd80      	pop	{r7, pc}
 800319c:	20005000 	.word	0x20005000
 80031a0:	00000400 	.word	0x00000400
 80031a4:	200000e4 	.word	0x200000e4
 80031a8:	20000118 	.word	0x20000118

080031ac <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80031ac:	480d      	ldr	r0, [pc, #52]	; (80031e4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80031ae:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80031b0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80031b4:	480c      	ldr	r0, [pc, #48]	; (80031e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80031b6:	490d      	ldr	r1, [pc, #52]	; (80031ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80031b8:	4a0d      	ldr	r2, [pc, #52]	; (80031f0 <LoopForever+0xe>)
  movs r3, #0
 80031ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80031bc:	e002      	b.n	80031c4 <LoopCopyDataInit>

080031be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80031be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80031c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80031c2:	3304      	adds	r3, #4

080031c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80031c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80031c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80031c8:	d3f9      	bcc.n	80031be <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80031ca:	4a0a      	ldr	r2, [pc, #40]	; (80031f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80031cc:	4c0a      	ldr	r4, [pc, #40]	; (80031f8 <LoopForever+0x16>)
  movs r3, #0
 80031ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80031d0:	e001      	b.n	80031d6 <LoopFillZerobss>

080031d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80031d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80031d4:	3204      	adds	r2, #4

080031d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80031d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80031d8:	d3fb      	bcc.n	80031d2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80031da:	f000 f817 	bl	800320c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80031de:	f7ff fe13 	bl	8002e08 <main>

080031e2 <LoopForever>:

LoopForever:
    b LoopForever
 80031e2:	e7fe      	b.n	80031e2 <LoopForever>
  ldr   r0, =_estack
 80031e4:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80031e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80031ec:	200000a4 	.word	0x200000a4
  ldr r2, =_sidata
 80031f0:	08004218 	.word	0x08004218
  ldr r2, =_sbss
 80031f4:	200000a4 	.word	0x200000a4
  ldr r4, =_ebss
 80031f8:	20000114 	.word	0x20000114

080031fc <ADC3_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80031fc:	e7fe      	b.n	80031fc <ADC3_IRQHandler>
	...

08003200 <__errno>:
 8003200:	4b01      	ldr	r3, [pc, #4]	; (8003208 <__errno+0x8>)
 8003202:	6818      	ldr	r0, [r3, #0]
 8003204:	4770      	bx	lr
 8003206:	bf00      	nop
 8003208:	20000040 	.word	0x20000040

0800320c <__libc_init_array>:
 800320c:	b570      	push	{r4, r5, r6, lr}
 800320e:	2600      	movs	r6, #0
 8003210:	4d0c      	ldr	r5, [pc, #48]	; (8003244 <__libc_init_array+0x38>)
 8003212:	4c0d      	ldr	r4, [pc, #52]	; (8003248 <__libc_init_array+0x3c>)
 8003214:	1b64      	subs	r4, r4, r5
 8003216:	10a4      	asrs	r4, r4, #2
 8003218:	42a6      	cmp	r6, r4
 800321a:	d109      	bne.n	8003230 <__libc_init_array+0x24>
 800321c:	f000 ff82 	bl	8004124 <_init>
 8003220:	2600      	movs	r6, #0
 8003222:	4d0a      	ldr	r5, [pc, #40]	; (800324c <__libc_init_array+0x40>)
 8003224:	4c0a      	ldr	r4, [pc, #40]	; (8003250 <__libc_init_array+0x44>)
 8003226:	1b64      	subs	r4, r4, r5
 8003228:	10a4      	asrs	r4, r4, #2
 800322a:	42a6      	cmp	r6, r4
 800322c:	d105      	bne.n	800323a <__libc_init_array+0x2e>
 800322e:	bd70      	pop	{r4, r5, r6, pc}
 8003230:	f855 3b04 	ldr.w	r3, [r5], #4
 8003234:	4798      	blx	r3
 8003236:	3601      	adds	r6, #1
 8003238:	e7ee      	b.n	8003218 <__libc_init_array+0xc>
 800323a:	f855 3b04 	ldr.w	r3, [r5], #4
 800323e:	4798      	blx	r3
 8003240:	3601      	adds	r6, #1
 8003242:	e7f2      	b.n	800322a <__libc_init_array+0x1e>
 8003244:	08004210 	.word	0x08004210
 8003248:	08004210 	.word	0x08004210
 800324c:	08004210 	.word	0x08004210
 8003250:	08004214 	.word	0x08004214

08003254 <memset>:
 8003254:	4603      	mov	r3, r0
 8003256:	4402      	add	r2, r0
 8003258:	4293      	cmp	r3, r2
 800325a:	d100      	bne.n	800325e <memset+0xa>
 800325c:	4770      	bx	lr
 800325e:	f803 1b01 	strb.w	r1, [r3], #1
 8003262:	e7f9      	b.n	8003258 <memset+0x4>

08003264 <iprintf>:
 8003264:	b40f      	push	{r0, r1, r2, r3}
 8003266:	4b0a      	ldr	r3, [pc, #40]	; (8003290 <iprintf+0x2c>)
 8003268:	b513      	push	{r0, r1, r4, lr}
 800326a:	681c      	ldr	r4, [r3, #0]
 800326c:	b124      	cbz	r4, 8003278 <iprintf+0x14>
 800326e:	69a3      	ldr	r3, [r4, #24]
 8003270:	b913      	cbnz	r3, 8003278 <iprintf+0x14>
 8003272:	4620      	mov	r0, r4
 8003274:	f000 f866 	bl	8003344 <__sinit>
 8003278:	ab05      	add	r3, sp, #20
 800327a:	4620      	mov	r0, r4
 800327c:	9a04      	ldr	r2, [sp, #16]
 800327e:	68a1      	ldr	r1, [r4, #8]
 8003280:	9301      	str	r3, [sp, #4]
 8003282:	f000 f981 	bl	8003588 <_vfiprintf_r>
 8003286:	b002      	add	sp, #8
 8003288:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800328c:	b004      	add	sp, #16
 800328e:	4770      	bx	lr
 8003290:	20000040 	.word	0x20000040

08003294 <std>:
 8003294:	2300      	movs	r3, #0
 8003296:	b510      	push	{r4, lr}
 8003298:	4604      	mov	r4, r0
 800329a:	e9c0 3300 	strd	r3, r3, [r0]
 800329e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80032a2:	6083      	str	r3, [r0, #8]
 80032a4:	8181      	strh	r1, [r0, #12]
 80032a6:	6643      	str	r3, [r0, #100]	; 0x64
 80032a8:	81c2      	strh	r2, [r0, #14]
 80032aa:	6183      	str	r3, [r0, #24]
 80032ac:	4619      	mov	r1, r3
 80032ae:	2208      	movs	r2, #8
 80032b0:	305c      	adds	r0, #92	; 0x5c
 80032b2:	f7ff ffcf 	bl	8003254 <memset>
 80032b6:	4b05      	ldr	r3, [pc, #20]	; (80032cc <std+0x38>)
 80032b8:	6224      	str	r4, [r4, #32]
 80032ba:	6263      	str	r3, [r4, #36]	; 0x24
 80032bc:	4b04      	ldr	r3, [pc, #16]	; (80032d0 <std+0x3c>)
 80032be:	62a3      	str	r3, [r4, #40]	; 0x28
 80032c0:	4b04      	ldr	r3, [pc, #16]	; (80032d4 <std+0x40>)
 80032c2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80032c4:	4b04      	ldr	r3, [pc, #16]	; (80032d8 <std+0x44>)
 80032c6:	6323      	str	r3, [r4, #48]	; 0x30
 80032c8:	bd10      	pop	{r4, pc}
 80032ca:	bf00      	nop
 80032cc:	08003b35 	.word	0x08003b35
 80032d0:	08003b57 	.word	0x08003b57
 80032d4:	08003b8f 	.word	0x08003b8f
 80032d8:	08003bb3 	.word	0x08003bb3

080032dc <_cleanup_r>:
 80032dc:	4901      	ldr	r1, [pc, #4]	; (80032e4 <_cleanup_r+0x8>)
 80032de:	f000 b8af 	b.w	8003440 <_fwalk_reent>
 80032e2:	bf00      	nop
 80032e4:	08003e8d 	.word	0x08003e8d

080032e8 <__sfmoreglue>:
 80032e8:	b570      	push	{r4, r5, r6, lr}
 80032ea:	2568      	movs	r5, #104	; 0x68
 80032ec:	1e4a      	subs	r2, r1, #1
 80032ee:	4355      	muls	r5, r2
 80032f0:	460e      	mov	r6, r1
 80032f2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80032f6:	f000 f8c5 	bl	8003484 <_malloc_r>
 80032fa:	4604      	mov	r4, r0
 80032fc:	b140      	cbz	r0, 8003310 <__sfmoreglue+0x28>
 80032fe:	2100      	movs	r1, #0
 8003300:	e9c0 1600 	strd	r1, r6, [r0]
 8003304:	300c      	adds	r0, #12
 8003306:	60a0      	str	r0, [r4, #8]
 8003308:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800330c:	f7ff ffa2 	bl	8003254 <memset>
 8003310:	4620      	mov	r0, r4
 8003312:	bd70      	pop	{r4, r5, r6, pc}

08003314 <__sfp_lock_acquire>:
 8003314:	4801      	ldr	r0, [pc, #4]	; (800331c <__sfp_lock_acquire+0x8>)
 8003316:	f000 b8b3 	b.w	8003480 <__retarget_lock_acquire_recursive>
 800331a:	bf00      	nop
 800331c:	2000010c 	.word	0x2000010c

08003320 <__sfp_lock_release>:
 8003320:	4801      	ldr	r0, [pc, #4]	; (8003328 <__sfp_lock_release+0x8>)
 8003322:	f000 b8ae 	b.w	8003482 <__retarget_lock_release_recursive>
 8003326:	bf00      	nop
 8003328:	2000010c 	.word	0x2000010c

0800332c <__sinit_lock_acquire>:
 800332c:	4801      	ldr	r0, [pc, #4]	; (8003334 <__sinit_lock_acquire+0x8>)
 800332e:	f000 b8a7 	b.w	8003480 <__retarget_lock_acquire_recursive>
 8003332:	bf00      	nop
 8003334:	20000107 	.word	0x20000107

08003338 <__sinit_lock_release>:
 8003338:	4801      	ldr	r0, [pc, #4]	; (8003340 <__sinit_lock_release+0x8>)
 800333a:	f000 b8a2 	b.w	8003482 <__retarget_lock_release_recursive>
 800333e:	bf00      	nop
 8003340:	20000107 	.word	0x20000107

08003344 <__sinit>:
 8003344:	b510      	push	{r4, lr}
 8003346:	4604      	mov	r4, r0
 8003348:	f7ff fff0 	bl	800332c <__sinit_lock_acquire>
 800334c:	69a3      	ldr	r3, [r4, #24]
 800334e:	b11b      	cbz	r3, 8003358 <__sinit+0x14>
 8003350:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003354:	f7ff bff0 	b.w	8003338 <__sinit_lock_release>
 8003358:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800335c:	6523      	str	r3, [r4, #80]	; 0x50
 800335e:	4b13      	ldr	r3, [pc, #76]	; (80033ac <__sinit+0x68>)
 8003360:	4a13      	ldr	r2, [pc, #76]	; (80033b0 <__sinit+0x6c>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	62a2      	str	r2, [r4, #40]	; 0x28
 8003366:	42a3      	cmp	r3, r4
 8003368:	bf08      	it	eq
 800336a:	2301      	moveq	r3, #1
 800336c:	4620      	mov	r0, r4
 800336e:	bf08      	it	eq
 8003370:	61a3      	streq	r3, [r4, #24]
 8003372:	f000 f81f 	bl	80033b4 <__sfp>
 8003376:	6060      	str	r0, [r4, #4]
 8003378:	4620      	mov	r0, r4
 800337a:	f000 f81b 	bl	80033b4 <__sfp>
 800337e:	60a0      	str	r0, [r4, #8]
 8003380:	4620      	mov	r0, r4
 8003382:	f000 f817 	bl	80033b4 <__sfp>
 8003386:	2200      	movs	r2, #0
 8003388:	2104      	movs	r1, #4
 800338a:	60e0      	str	r0, [r4, #12]
 800338c:	6860      	ldr	r0, [r4, #4]
 800338e:	f7ff ff81 	bl	8003294 <std>
 8003392:	2201      	movs	r2, #1
 8003394:	2109      	movs	r1, #9
 8003396:	68a0      	ldr	r0, [r4, #8]
 8003398:	f7ff ff7c 	bl	8003294 <std>
 800339c:	2202      	movs	r2, #2
 800339e:	2112      	movs	r1, #18
 80033a0:	68e0      	ldr	r0, [r4, #12]
 80033a2:	f7ff ff77 	bl	8003294 <std>
 80033a6:	2301      	movs	r3, #1
 80033a8:	61a3      	str	r3, [r4, #24]
 80033aa:	e7d1      	b.n	8003350 <__sinit+0xc>
 80033ac:	08004178 	.word	0x08004178
 80033b0:	080032dd 	.word	0x080032dd

080033b4 <__sfp>:
 80033b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033b6:	4607      	mov	r7, r0
 80033b8:	f7ff ffac 	bl	8003314 <__sfp_lock_acquire>
 80033bc:	4b1e      	ldr	r3, [pc, #120]	; (8003438 <__sfp+0x84>)
 80033be:	681e      	ldr	r6, [r3, #0]
 80033c0:	69b3      	ldr	r3, [r6, #24]
 80033c2:	b913      	cbnz	r3, 80033ca <__sfp+0x16>
 80033c4:	4630      	mov	r0, r6
 80033c6:	f7ff ffbd 	bl	8003344 <__sinit>
 80033ca:	3648      	adds	r6, #72	; 0x48
 80033cc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80033d0:	3b01      	subs	r3, #1
 80033d2:	d503      	bpl.n	80033dc <__sfp+0x28>
 80033d4:	6833      	ldr	r3, [r6, #0]
 80033d6:	b30b      	cbz	r3, 800341c <__sfp+0x68>
 80033d8:	6836      	ldr	r6, [r6, #0]
 80033da:	e7f7      	b.n	80033cc <__sfp+0x18>
 80033dc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80033e0:	b9d5      	cbnz	r5, 8003418 <__sfp+0x64>
 80033e2:	4b16      	ldr	r3, [pc, #88]	; (800343c <__sfp+0x88>)
 80033e4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80033e8:	60e3      	str	r3, [r4, #12]
 80033ea:	6665      	str	r5, [r4, #100]	; 0x64
 80033ec:	f000 f847 	bl	800347e <__retarget_lock_init_recursive>
 80033f0:	f7ff ff96 	bl	8003320 <__sfp_lock_release>
 80033f4:	2208      	movs	r2, #8
 80033f6:	4629      	mov	r1, r5
 80033f8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80033fc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003400:	6025      	str	r5, [r4, #0]
 8003402:	61a5      	str	r5, [r4, #24]
 8003404:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003408:	f7ff ff24 	bl	8003254 <memset>
 800340c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003410:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003414:	4620      	mov	r0, r4
 8003416:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003418:	3468      	adds	r4, #104	; 0x68
 800341a:	e7d9      	b.n	80033d0 <__sfp+0x1c>
 800341c:	2104      	movs	r1, #4
 800341e:	4638      	mov	r0, r7
 8003420:	f7ff ff62 	bl	80032e8 <__sfmoreglue>
 8003424:	4604      	mov	r4, r0
 8003426:	6030      	str	r0, [r6, #0]
 8003428:	2800      	cmp	r0, #0
 800342a:	d1d5      	bne.n	80033d8 <__sfp+0x24>
 800342c:	f7ff ff78 	bl	8003320 <__sfp_lock_release>
 8003430:	230c      	movs	r3, #12
 8003432:	603b      	str	r3, [r7, #0]
 8003434:	e7ee      	b.n	8003414 <__sfp+0x60>
 8003436:	bf00      	nop
 8003438:	08004178 	.word	0x08004178
 800343c:	ffff0001 	.word	0xffff0001

08003440 <_fwalk_reent>:
 8003440:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003444:	4606      	mov	r6, r0
 8003446:	4688      	mov	r8, r1
 8003448:	2700      	movs	r7, #0
 800344a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800344e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003452:	f1b9 0901 	subs.w	r9, r9, #1
 8003456:	d505      	bpl.n	8003464 <_fwalk_reent+0x24>
 8003458:	6824      	ldr	r4, [r4, #0]
 800345a:	2c00      	cmp	r4, #0
 800345c:	d1f7      	bne.n	800344e <_fwalk_reent+0xe>
 800345e:	4638      	mov	r0, r7
 8003460:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003464:	89ab      	ldrh	r3, [r5, #12]
 8003466:	2b01      	cmp	r3, #1
 8003468:	d907      	bls.n	800347a <_fwalk_reent+0x3a>
 800346a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800346e:	3301      	adds	r3, #1
 8003470:	d003      	beq.n	800347a <_fwalk_reent+0x3a>
 8003472:	4629      	mov	r1, r5
 8003474:	4630      	mov	r0, r6
 8003476:	47c0      	blx	r8
 8003478:	4307      	orrs	r7, r0
 800347a:	3568      	adds	r5, #104	; 0x68
 800347c:	e7e9      	b.n	8003452 <_fwalk_reent+0x12>

0800347e <__retarget_lock_init_recursive>:
 800347e:	4770      	bx	lr

08003480 <__retarget_lock_acquire_recursive>:
 8003480:	4770      	bx	lr

08003482 <__retarget_lock_release_recursive>:
 8003482:	4770      	bx	lr

08003484 <_malloc_r>:
 8003484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003486:	1ccd      	adds	r5, r1, #3
 8003488:	f025 0503 	bic.w	r5, r5, #3
 800348c:	3508      	adds	r5, #8
 800348e:	2d0c      	cmp	r5, #12
 8003490:	bf38      	it	cc
 8003492:	250c      	movcc	r5, #12
 8003494:	2d00      	cmp	r5, #0
 8003496:	4606      	mov	r6, r0
 8003498:	db01      	blt.n	800349e <_malloc_r+0x1a>
 800349a:	42a9      	cmp	r1, r5
 800349c:	d903      	bls.n	80034a6 <_malloc_r+0x22>
 800349e:	230c      	movs	r3, #12
 80034a0:	6033      	str	r3, [r6, #0]
 80034a2:	2000      	movs	r0, #0
 80034a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80034a6:	f000 fdb1 	bl	800400c <__malloc_lock>
 80034aa:	4921      	ldr	r1, [pc, #132]	; (8003530 <_malloc_r+0xac>)
 80034ac:	680a      	ldr	r2, [r1, #0]
 80034ae:	4614      	mov	r4, r2
 80034b0:	b99c      	cbnz	r4, 80034da <_malloc_r+0x56>
 80034b2:	4f20      	ldr	r7, [pc, #128]	; (8003534 <_malloc_r+0xb0>)
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	b923      	cbnz	r3, 80034c2 <_malloc_r+0x3e>
 80034b8:	4621      	mov	r1, r4
 80034ba:	4630      	mov	r0, r6
 80034bc:	f000 fb2a 	bl	8003b14 <_sbrk_r>
 80034c0:	6038      	str	r0, [r7, #0]
 80034c2:	4629      	mov	r1, r5
 80034c4:	4630      	mov	r0, r6
 80034c6:	f000 fb25 	bl	8003b14 <_sbrk_r>
 80034ca:	1c43      	adds	r3, r0, #1
 80034cc:	d123      	bne.n	8003516 <_malloc_r+0x92>
 80034ce:	230c      	movs	r3, #12
 80034d0:	4630      	mov	r0, r6
 80034d2:	6033      	str	r3, [r6, #0]
 80034d4:	f000 fda0 	bl	8004018 <__malloc_unlock>
 80034d8:	e7e3      	b.n	80034a2 <_malloc_r+0x1e>
 80034da:	6823      	ldr	r3, [r4, #0]
 80034dc:	1b5b      	subs	r3, r3, r5
 80034de:	d417      	bmi.n	8003510 <_malloc_r+0x8c>
 80034e0:	2b0b      	cmp	r3, #11
 80034e2:	d903      	bls.n	80034ec <_malloc_r+0x68>
 80034e4:	6023      	str	r3, [r4, #0]
 80034e6:	441c      	add	r4, r3
 80034e8:	6025      	str	r5, [r4, #0]
 80034ea:	e004      	b.n	80034f6 <_malloc_r+0x72>
 80034ec:	6863      	ldr	r3, [r4, #4]
 80034ee:	42a2      	cmp	r2, r4
 80034f0:	bf0c      	ite	eq
 80034f2:	600b      	streq	r3, [r1, #0]
 80034f4:	6053      	strne	r3, [r2, #4]
 80034f6:	4630      	mov	r0, r6
 80034f8:	f000 fd8e 	bl	8004018 <__malloc_unlock>
 80034fc:	f104 000b 	add.w	r0, r4, #11
 8003500:	1d23      	adds	r3, r4, #4
 8003502:	f020 0007 	bic.w	r0, r0, #7
 8003506:	1ac2      	subs	r2, r0, r3
 8003508:	d0cc      	beq.n	80034a4 <_malloc_r+0x20>
 800350a:	1a1b      	subs	r3, r3, r0
 800350c:	50a3      	str	r3, [r4, r2]
 800350e:	e7c9      	b.n	80034a4 <_malloc_r+0x20>
 8003510:	4622      	mov	r2, r4
 8003512:	6864      	ldr	r4, [r4, #4]
 8003514:	e7cc      	b.n	80034b0 <_malloc_r+0x2c>
 8003516:	1cc4      	adds	r4, r0, #3
 8003518:	f024 0403 	bic.w	r4, r4, #3
 800351c:	42a0      	cmp	r0, r4
 800351e:	d0e3      	beq.n	80034e8 <_malloc_r+0x64>
 8003520:	1a21      	subs	r1, r4, r0
 8003522:	4630      	mov	r0, r6
 8003524:	f000 faf6 	bl	8003b14 <_sbrk_r>
 8003528:	3001      	adds	r0, #1
 800352a:	d1dd      	bne.n	80034e8 <_malloc_r+0x64>
 800352c:	e7cf      	b.n	80034ce <_malloc_r+0x4a>
 800352e:	bf00      	nop
 8003530:	200000e8 	.word	0x200000e8
 8003534:	200000ec 	.word	0x200000ec

08003538 <__sfputc_r>:
 8003538:	6893      	ldr	r3, [r2, #8]
 800353a:	b410      	push	{r4}
 800353c:	3b01      	subs	r3, #1
 800353e:	2b00      	cmp	r3, #0
 8003540:	6093      	str	r3, [r2, #8]
 8003542:	da07      	bge.n	8003554 <__sfputc_r+0x1c>
 8003544:	6994      	ldr	r4, [r2, #24]
 8003546:	42a3      	cmp	r3, r4
 8003548:	db01      	blt.n	800354e <__sfputc_r+0x16>
 800354a:	290a      	cmp	r1, #10
 800354c:	d102      	bne.n	8003554 <__sfputc_r+0x1c>
 800354e:	bc10      	pop	{r4}
 8003550:	f000 bb34 	b.w	8003bbc <__swbuf_r>
 8003554:	6813      	ldr	r3, [r2, #0]
 8003556:	1c58      	adds	r0, r3, #1
 8003558:	6010      	str	r0, [r2, #0]
 800355a:	7019      	strb	r1, [r3, #0]
 800355c:	4608      	mov	r0, r1
 800355e:	bc10      	pop	{r4}
 8003560:	4770      	bx	lr

08003562 <__sfputs_r>:
 8003562:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003564:	4606      	mov	r6, r0
 8003566:	460f      	mov	r7, r1
 8003568:	4614      	mov	r4, r2
 800356a:	18d5      	adds	r5, r2, r3
 800356c:	42ac      	cmp	r4, r5
 800356e:	d101      	bne.n	8003574 <__sfputs_r+0x12>
 8003570:	2000      	movs	r0, #0
 8003572:	e007      	b.n	8003584 <__sfputs_r+0x22>
 8003574:	463a      	mov	r2, r7
 8003576:	4630      	mov	r0, r6
 8003578:	f814 1b01 	ldrb.w	r1, [r4], #1
 800357c:	f7ff ffdc 	bl	8003538 <__sfputc_r>
 8003580:	1c43      	adds	r3, r0, #1
 8003582:	d1f3      	bne.n	800356c <__sfputs_r+0xa>
 8003584:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003588 <_vfiprintf_r>:
 8003588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800358c:	460d      	mov	r5, r1
 800358e:	4614      	mov	r4, r2
 8003590:	4698      	mov	r8, r3
 8003592:	4606      	mov	r6, r0
 8003594:	b09d      	sub	sp, #116	; 0x74
 8003596:	b118      	cbz	r0, 80035a0 <_vfiprintf_r+0x18>
 8003598:	6983      	ldr	r3, [r0, #24]
 800359a:	b90b      	cbnz	r3, 80035a0 <_vfiprintf_r+0x18>
 800359c:	f7ff fed2 	bl	8003344 <__sinit>
 80035a0:	4b89      	ldr	r3, [pc, #548]	; (80037c8 <_vfiprintf_r+0x240>)
 80035a2:	429d      	cmp	r5, r3
 80035a4:	d11b      	bne.n	80035de <_vfiprintf_r+0x56>
 80035a6:	6875      	ldr	r5, [r6, #4]
 80035a8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80035aa:	07d9      	lsls	r1, r3, #31
 80035ac:	d405      	bmi.n	80035ba <_vfiprintf_r+0x32>
 80035ae:	89ab      	ldrh	r3, [r5, #12]
 80035b0:	059a      	lsls	r2, r3, #22
 80035b2:	d402      	bmi.n	80035ba <_vfiprintf_r+0x32>
 80035b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80035b6:	f7ff ff63 	bl	8003480 <__retarget_lock_acquire_recursive>
 80035ba:	89ab      	ldrh	r3, [r5, #12]
 80035bc:	071b      	lsls	r3, r3, #28
 80035be:	d501      	bpl.n	80035c4 <_vfiprintf_r+0x3c>
 80035c0:	692b      	ldr	r3, [r5, #16]
 80035c2:	b9eb      	cbnz	r3, 8003600 <_vfiprintf_r+0x78>
 80035c4:	4629      	mov	r1, r5
 80035c6:	4630      	mov	r0, r6
 80035c8:	f000 fb5c 	bl	8003c84 <__swsetup_r>
 80035cc:	b1c0      	cbz	r0, 8003600 <_vfiprintf_r+0x78>
 80035ce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80035d0:	07dc      	lsls	r4, r3, #31
 80035d2:	d50e      	bpl.n	80035f2 <_vfiprintf_r+0x6a>
 80035d4:	f04f 30ff 	mov.w	r0, #4294967295
 80035d8:	b01d      	add	sp, #116	; 0x74
 80035da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80035de:	4b7b      	ldr	r3, [pc, #492]	; (80037cc <_vfiprintf_r+0x244>)
 80035e0:	429d      	cmp	r5, r3
 80035e2:	d101      	bne.n	80035e8 <_vfiprintf_r+0x60>
 80035e4:	68b5      	ldr	r5, [r6, #8]
 80035e6:	e7df      	b.n	80035a8 <_vfiprintf_r+0x20>
 80035e8:	4b79      	ldr	r3, [pc, #484]	; (80037d0 <_vfiprintf_r+0x248>)
 80035ea:	429d      	cmp	r5, r3
 80035ec:	bf08      	it	eq
 80035ee:	68f5      	ldreq	r5, [r6, #12]
 80035f0:	e7da      	b.n	80035a8 <_vfiprintf_r+0x20>
 80035f2:	89ab      	ldrh	r3, [r5, #12]
 80035f4:	0598      	lsls	r0, r3, #22
 80035f6:	d4ed      	bmi.n	80035d4 <_vfiprintf_r+0x4c>
 80035f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80035fa:	f7ff ff42 	bl	8003482 <__retarget_lock_release_recursive>
 80035fe:	e7e9      	b.n	80035d4 <_vfiprintf_r+0x4c>
 8003600:	2300      	movs	r3, #0
 8003602:	9309      	str	r3, [sp, #36]	; 0x24
 8003604:	2320      	movs	r3, #32
 8003606:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800360a:	2330      	movs	r3, #48	; 0x30
 800360c:	f04f 0901 	mov.w	r9, #1
 8003610:	f8cd 800c 	str.w	r8, [sp, #12]
 8003614:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80037d4 <_vfiprintf_r+0x24c>
 8003618:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800361c:	4623      	mov	r3, r4
 800361e:	469a      	mov	sl, r3
 8003620:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003624:	b10a      	cbz	r2, 800362a <_vfiprintf_r+0xa2>
 8003626:	2a25      	cmp	r2, #37	; 0x25
 8003628:	d1f9      	bne.n	800361e <_vfiprintf_r+0x96>
 800362a:	ebba 0b04 	subs.w	fp, sl, r4
 800362e:	d00b      	beq.n	8003648 <_vfiprintf_r+0xc0>
 8003630:	465b      	mov	r3, fp
 8003632:	4622      	mov	r2, r4
 8003634:	4629      	mov	r1, r5
 8003636:	4630      	mov	r0, r6
 8003638:	f7ff ff93 	bl	8003562 <__sfputs_r>
 800363c:	3001      	adds	r0, #1
 800363e:	f000 80aa 	beq.w	8003796 <_vfiprintf_r+0x20e>
 8003642:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003644:	445a      	add	r2, fp
 8003646:	9209      	str	r2, [sp, #36]	; 0x24
 8003648:	f89a 3000 	ldrb.w	r3, [sl]
 800364c:	2b00      	cmp	r3, #0
 800364e:	f000 80a2 	beq.w	8003796 <_vfiprintf_r+0x20e>
 8003652:	2300      	movs	r3, #0
 8003654:	f04f 32ff 	mov.w	r2, #4294967295
 8003658:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800365c:	f10a 0a01 	add.w	sl, sl, #1
 8003660:	9304      	str	r3, [sp, #16]
 8003662:	9307      	str	r3, [sp, #28]
 8003664:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003668:	931a      	str	r3, [sp, #104]	; 0x68
 800366a:	4654      	mov	r4, sl
 800366c:	2205      	movs	r2, #5
 800366e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003672:	4858      	ldr	r0, [pc, #352]	; (80037d4 <_vfiprintf_r+0x24c>)
 8003674:	f000 fcbc 	bl	8003ff0 <memchr>
 8003678:	9a04      	ldr	r2, [sp, #16]
 800367a:	b9d8      	cbnz	r0, 80036b4 <_vfiprintf_r+0x12c>
 800367c:	06d1      	lsls	r1, r2, #27
 800367e:	bf44      	itt	mi
 8003680:	2320      	movmi	r3, #32
 8003682:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003686:	0713      	lsls	r3, r2, #28
 8003688:	bf44      	itt	mi
 800368a:	232b      	movmi	r3, #43	; 0x2b
 800368c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003690:	f89a 3000 	ldrb.w	r3, [sl]
 8003694:	2b2a      	cmp	r3, #42	; 0x2a
 8003696:	d015      	beq.n	80036c4 <_vfiprintf_r+0x13c>
 8003698:	4654      	mov	r4, sl
 800369a:	2000      	movs	r0, #0
 800369c:	f04f 0c0a 	mov.w	ip, #10
 80036a0:	9a07      	ldr	r2, [sp, #28]
 80036a2:	4621      	mov	r1, r4
 80036a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80036a8:	3b30      	subs	r3, #48	; 0x30
 80036aa:	2b09      	cmp	r3, #9
 80036ac:	d94e      	bls.n	800374c <_vfiprintf_r+0x1c4>
 80036ae:	b1b0      	cbz	r0, 80036de <_vfiprintf_r+0x156>
 80036b0:	9207      	str	r2, [sp, #28]
 80036b2:	e014      	b.n	80036de <_vfiprintf_r+0x156>
 80036b4:	eba0 0308 	sub.w	r3, r0, r8
 80036b8:	fa09 f303 	lsl.w	r3, r9, r3
 80036bc:	4313      	orrs	r3, r2
 80036be:	46a2      	mov	sl, r4
 80036c0:	9304      	str	r3, [sp, #16]
 80036c2:	e7d2      	b.n	800366a <_vfiprintf_r+0xe2>
 80036c4:	9b03      	ldr	r3, [sp, #12]
 80036c6:	1d19      	adds	r1, r3, #4
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	9103      	str	r1, [sp, #12]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	bfbb      	ittet	lt
 80036d0:	425b      	neglt	r3, r3
 80036d2:	f042 0202 	orrlt.w	r2, r2, #2
 80036d6:	9307      	strge	r3, [sp, #28]
 80036d8:	9307      	strlt	r3, [sp, #28]
 80036da:	bfb8      	it	lt
 80036dc:	9204      	strlt	r2, [sp, #16]
 80036de:	7823      	ldrb	r3, [r4, #0]
 80036e0:	2b2e      	cmp	r3, #46	; 0x2e
 80036e2:	d10c      	bne.n	80036fe <_vfiprintf_r+0x176>
 80036e4:	7863      	ldrb	r3, [r4, #1]
 80036e6:	2b2a      	cmp	r3, #42	; 0x2a
 80036e8:	d135      	bne.n	8003756 <_vfiprintf_r+0x1ce>
 80036ea:	9b03      	ldr	r3, [sp, #12]
 80036ec:	3402      	adds	r4, #2
 80036ee:	1d1a      	adds	r2, r3, #4
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	9203      	str	r2, [sp, #12]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	bfb8      	it	lt
 80036f8:	f04f 33ff 	movlt.w	r3, #4294967295
 80036fc:	9305      	str	r3, [sp, #20]
 80036fe:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80037e4 <_vfiprintf_r+0x25c>
 8003702:	2203      	movs	r2, #3
 8003704:	4650      	mov	r0, sl
 8003706:	7821      	ldrb	r1, [r4, #0]
 8003708:	f000 fc72 	bl	8003ff0 <memchr>
 800370c:	b140      	cbz	r0, 8003720 <_vfiprintf_r+0x198>
 800370e:	2340      	movs	r3, #64	; 0x40
 8003710:	eba0 000a 	sub.w	r0, r0, sl
 8003714:	fa03 f000 	lsl.w	r0, r3, r0
 8003718:	9b04      	ldr	r3, [sp, #16]
 800371a:	3401      	adds	r4, #1
 800371c:	4303      	orrs	r3, r0
 800371e:	9304      	str	r3, [sp, #16]
 8003720:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003724:	2206      	movs	r2, #6
 8003726:	482c      	ldr	r0, [pc, #176]	; (80037d8 <_vfiprintf_r+0x250>)
 8003728:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800372c:	f000 fc60 	bl	8003ff0 <memchr>
 8003730:	2800      	cmp	r0, #0
 8003732:	d03f      	beq.n	80037b4 <_vfiprintf_r+0x22c>
 8003734:	4b29      	ldr	r3, [pc, #164]	; (80037dc <_vfiprintf_r+0x254>)
 8003736:	bb1b      	cbnz	r3, 8003780 <_vfiprintf_r+0x1f8>
 8003738:	9b03      	ldr	r3, [sp, #12]
 800373a:	3307      	adds	r3, #7
 800373c:	f023 0307 	bic.w	r3, r3, #7
 8003740:	3308      	adds	r3, #8
 8003742:	9303      	str	r3, [sp, #12]
 8003744:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003746:	443b      	add	r3, r7
 8003748:	9309      	str	r3, [sp, #36]	; 0x24
 800374a:	e767      	b.n	800361c <_vfiprintf_r+0x94>
 800374c:	460c      	mov	r4, r1
 800374e:	2001      	movs	r0, #1
 8003750:	fb0c 3202 	mla	r2, ip, r2, r3
 8003754:	e7a5      	b.n	80036a2 <_vfiprintf_r+0x11a>
 8003756:	2300      	movs	r3, #0
 8003758:	f04f 0c0a 	mov.w	ip, #10
 800375c:	4619      	mov	r1, r3
 800375e:	3401      	adds	r4, #1
 8003760:	9305      	str	r3, [sp, #20]
 8003762:	4620      	mov	r0, r4
 8003764:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003768:	3a30      	subs	r2, #48	; 0x30
 800376a:	2a09      	cmp	r2, #9
 800376c:	d903      	bls.n	8003776 <_vfiprintf_r+0x1ee>
 800376e:	2b00      	cmp	r3, #0
 8003770:	d0c5      	beq.n	80036fe <_vfiprintf_r+0x176>
 8003772:	9105      	str	r1, [sp, #20]
 8003774:	e7c3      	b.n	80036fe <_vfiprintf_r+0x176>
 8003776:	4604      	mov	r4, r0
 8003778:	2301      	movs	r3, #1
 800377a:	fb0c 2101 	mla	r1, ip, r1, r2
 800377e:	e7f0      	b.n	8003762 <_vfiprintf_r+0x1da>
 8003780:	ab03      	add	r3, sp, #12
 8003782:	9300      	str	r3, [sp, #0]
 8003784:	462a      	mov	r2, r5
 8003786:	4630      	mov	r0, r6
 8003788:	4b15      	ldr	r3, [pc, #84]	; (80037e0 <_vfiprintf_r+0x258>)
 800378a:	a904      	add	r1, sp, #16
 800378c:	f3af 8000 	nop.w
 8003790:	4607      	mov	r7, r0
 8003792:	1c78      	adds	r0, r7, #1
 8003794:	d1d6      	bne.n	8003744 <_vfiprintf_r+0x1bc>
 8003796:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003798:	07d9      	lsls	r1, r3, #31
 800379a:	d405      	bmi.n	80037a8 <_vfiprintf_r+0x220>
 800379c:	89ab      	ldrh	r3, [r5, #12]
 800379e:	059a      	lsls	r2, r3, #22
 80037a0:	d402      	bmi.n	80037a8 <_vfiprintf_r+0x220>
 80037a2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80037a4:	f7ff fe6d 	bl	8003482 <__retarget_lock_release_recursive>
 80037a8:	89ab      	ldrh	r3, [r5, #12]
 80037aa:	065b      	lsls	r3, r3, #25
 80037ac:	f53f af12 	bmi.w	80035d4 <_vfiprintf_r+0x4c>
 80037b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80037b2:	e711      	b.n	80035d8 <_vfiprintf_r+0x50>
 80037b4:	ab03      	add	r3, sp, #12
 80037b6:	9300      	str	r3, [sp, #0]
 80037b8:	462a      	mov	r2, r5
 80037ba:	4630      	mov	r0, r6
 80037bc:	4b08      	ldr	r3, [pc, #32]	; (80037e0 <_vfiprintf_r+0x258>)
 80037be:	a904      	add	r1, sp, #16
 80037c0:	f000 f882 	bl	80038c8 <_printf_i>
 80037c4:	e7e4      	b.n	8003790 <_vfiprintf_r+0x208>
 80037c6:	bf00      	nop
 80037c8:	0800419c 	.word	0x0800419c
 80037cc:	080041bc 	.word	0x080041bc
 80037d0:	0800417c 	.word	0x0800417c
 80037d4:	080041dc 	.word	0x080041dc
 80037d8:	080041e6 	.word	0x080041e6
 80037dc:	00000000 	.word	0x00000000
 80037e0:	08003563 	.word	0x08003563
 80037e4:	080041e2 	.word	0x080041e2

080037e8 <_printf_common>:
 80037e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80037ec:	4616      	mov	r6, r2
 80037ee:	4699      	mov	r9, r3
 80037f0:	688a      	ldr	r2, [r1, #8]
 80037f2:	690b      	ldr	r3, [r1, #16]
 80037f4:	4607      	mov	r7, r0
 80037f6:	4293      	cmp	r3, r2
 80037f8:	bfb8      	it	lt
 80037fa:	4613      	movlt	r3, r2
 80037fc:	6033      	str	r3, [r6, #0]
 80037fe:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003802:	460c      	mov	r4, r1
 8003804:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003808:	b10a      	cbz	r2, 800380e <_printf_common+0x26>
 800380a:	3301      	adds	r3, #1
 800380c:	6033      	str	r3, [r6, #0]
 800380e:	6823      	ldr	r3, [r4, #0]
 8003810:	0699      	lsls	r1, r3, #26
 8003812:	bf42      	ittt	mi
 8003814:	6833      	ldrmi	r3, [r6, #0]
 8003816:	3302      	addmi	r3, #2
 8003818:	6033      	strmi	r3, [r6, #0]
 800381a:	6825      	ldr	r5, [r4, #0]
 800381c:	f015 0506 	ands.w	r5, r5, #6
 8003820:	d106      	bne.n	8003830 <_printf_common+0x48>
 8003822:	f104 0a19 	add.w	sl, r4, #25
 8003826:	68e3      	ldr	r3, [r4, #12]
 8003828:	6832      	ldr	r2, [r6, #0]
 800382a:	1a9b      	subs	r3, r3, r2
 800382c:	42ab      	cmp	r3, r5
 800382e:	dc28      	bgt.n	8003882 <_printf_common+0x9a>
 8003830:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003834:	1e13      	subs	r3, r2, #0
 8003836:	6822      	ldr	r2, [r4, #0]
 8003838:	bf18      	it	ne
 800383a:	2301      	movne	r3, #1
 800383c:	0692      	lsls	r2, r2, #26
 800383e:	d42d      	bmi.n	800389c <_printf_common+0xb4>
 8003840:	4649      	mov	r1, r9
 8003842:	4638      	mov	r0, r7
 8003844:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003848:	47c0      	blx	r8
 800384a:	3001      	adds	r0, #1
 800384c:	d020      	beq.n	8003890 <_printf_common+0xa8>
 800384e:	6823      	ldr	r3, [r4, #0]
 8003850:	68e5      	ldr	r5, [r4, #12]
 8003852:	f003 0306 	and.w	r3, r3, #6
 8003856:	2b04      	cmp	r3, #4
 8003858:	bf18      	it	ne
 800385a:	2500      	movne	r5, #0
 800385c:	6832      	ldr	r2, [r6, #0]
 800385e:	f04f 0600 	mov.w	r6, #0
 8003862:	68a3      	ldr	r3, [r4, #8]
 8003864:	bf08      	it	eq
 8003866:	1aad      	subeq	r5, r5, r2
 8003868:	6922      	ldr	r2, [r4, #16]
 800386a:	bf08      	it	eq
 800386c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003870:	4293      	cmp	r3, r2
 8003872:	bfc4      	itt	gt
 8003874:	1a9b      	subgt	r3, r3, r2
 8003876:	18ed      	addgt	r5, r5, r3
 8003878:	341a      	adds	r4, #26
 800387a:	42b5      	cmp	r5, r6
 800387c:	d11a      	bne.n	80038b4 <_printf_common+0xcc>
 800387e:	2000      	movs	r0, #0
 8003880:	e008      	b.n	8003894 <_printf_common+0xac>
 8003882:	2301      	movs	r3, #1
 8003884:	4652      	mov	r2, sl
 8003886:	4649      	mov	r1, r9
 8003888:	4638      	mov	r0, r7
 800388a:	47c0      	blx	r8
 800388c:	3001      	adds	r0, #1
 800388e:	d103      	bne.n	8003898 <_printf_common+0xb0>
 8003890:	f04f 30ff 	mov.w	r0, #4294967295
 8003894:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003898:	3501      	adds	r5, #1
 800389a:	e7c4      	b.n	8003826 <_printf_common+0x3e>
 800389c:	2030      	movs	r0, #48	; 0x30
 800389e:	18e1      	adds	r1, r4, r3
 80038a0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80038a4:	1c5a      	adds	r2, r3, #1
 80038a6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80038aa:	4422      	add	r2, r4
 80038ac:	3302      	adds	r3, #2
 80038ae:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80038b2:	e7c5      	b.n	8003840 <_printf_common+0x58>
 80038b4:	2301      	movs	r3, #1
 80038b6:	4622      	mov	r2, r4
 80038b8:	4649      	mov	r1, r9
 80038ba:	4638      	mov	r0, r7
 80038bc:	47c0      	blx	r8
 80038be:	3001      	adds	r0, #1
 80038c0:	d0e6      	beq.n	8003890 <_printf_common+0xa8>
 80038c2:	3601      	adds	r6, #1
 80038c4:	e7d9      	b.n	800387a <_printf_common+0x92>
	...

080038c8 <_printf_i>:
 80038c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80038cc:	460c      	mov	r4, r1
 80038ce:	7e27      	ldrb	r7, [r4, #24]
 80038d0:	4691      	mov	r9, r2
 80038d2:	2f78      	cmp	r7, #120	; 0x78
 80038d4:	4680      	mov	r8, r0
 80038d6:	469a      	mov	sl, r3
 80038d8:	990c      	ldr	r1, [sp, #48]	; 0x30
 80038da:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80038de:	d807      	bhi.n	80038f0 <_printf_i+0x28>
 80038e0:	2f62      	cmp	r7, #98	; 0x62
 80038e2:	d80a      	bhi.n	80038fa <_printf_i+0x32>
 80038e4:	2f00      	cmp	r7, #0
 80038e6:	f000 80d9 	beq.w	8003a9c <_printf_i+0x1d4>
 80038ea:	2f58      	cmp	r7, #88	; 0x58
 80038ec:	f000 80a4 	beq.w	8003a38 <_printf_i+0x170>
 80038f0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80038f4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80038f8:	e03a      	b.n	8003970 <_printf_i+0xa8>
 80038fa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80038fe:	2b15      	cmp	r3, #21
 8003900:	d8f6      	bhi.n	80038f0 <_printf_i+0x28>
 8003902:	a001      	add	r0, pc, #4	; (adr r0, 8003908 <_printf_i+0x40>)
 8003904:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003908:	08003961 	.word	0x08003961
 800390c:	08003975 	.word	0x08003975
 8003910:	080038f1 	.word	0x080038f1
 8003914:	080038f1 	.word	0x080038f1
 8003918:	080038f1 	.word	0x080038f1
 800391c:	080038f1 	.word	0x080038f1
 8003920:	08003975 	.word	0x08003975
 8003924:	080038f1 	.word	0x080038f1
 8003928:	080038f1 	.word	0x080038f1
 800392c:	080038f1 	.word	0x080038f1
 8003930:	080038f1 	.word	0x080038f1
 8003934:	08003a83 	.word	0x08003a83
 8003938:	080039a5 	.word	0x080039a5
 800393c:	08003a65 	.word	0x08003a65
 8003940:	080038f1 	.word	0x080038f1
 8003944:	080038f1 	.word	0x080038f1
 8003948:	08003aa5 	.word	0x08003aa5
 800394c:	080038f1 	.word	0x080038f1
 8003950:	080039a5 	.word	0x080039a5
 8003954:	080038f1 	.word	0x080038f1
 8003958:	080038f1 	.word	0x080038f1
 800395c:	08003a6d 	.word	0x08003a6d
 8003960:	680b      	ldr	r3, [r1, #0]
 8003962:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003966:	1d1a      	adds	r2, r3, #4
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	600a      	str	r2, [r1, #0]
 800396c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003970:	2301      	movs	r3, #1
 8003972:	e0a4      	b.n	8003abe <_printf_i+0x1f6>
 8003974:	6825      	ldr	r5, [r4, #0]
 8003976:	6808      	ldr	r0, [r1, #0]
 8003978:	062e      	lsls	r6, r5, #24
 800397a:	f100 0304 	add.w	r3, r0, #4
 800397e:	d50a      	bpl.n	8003996 <_printf_i+0xce>
 8003980:	6805      	ldr	r5, [r0, #0]
 8003982:	600b      	str	r3, [r1, #0]
 8003984:	2d00      	cmp	r5, #0
 8003986:	da03      	bge.n	8003990 <_printf_i+0xc8>
 8003988:	232d      	movs	r3, #45	; 0x2d
 800398a:	426d      	negs	r5, r5
 800398c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003990:	230a      	movs	r3, #10
 8003992:	485e      	ldr	r0, [pc, #376]	; (8003b0c <_printf_i+0x244>)
 8003994:	e019      	b.n	80039ca <_printf_i+0x102>
 8003996:	f015 0f40 	tst.w	r5, #64	; 0x40
 800399a:	6805      	ldr	r5, [r0, #0]
 800399c:	600b      	str	r3, [r1, #0]
 800399e:	bf18      	it	ne
 80039a0:	b22d      	sxthne	r5, r5
 80039a2:	e7ef      	b.n	8003984 <_printf_i+0xbc>
 80039a4:	680b      	ldr	r3, [r1, #0]
 80039a6:	6825      	ldr	r5, [r4, #0]
 80039a8:	1d18      	adds	r0, r3, #4
 80039aa:	6008      	str	r0, [r1, #0]
 80039ac:	0628      	lsls	r0, r5, #24
 80039ae:	d501      	bpl.n	80039b4 <_printf_i+0xec>
 80039b0:	681d      	ldr	r5, [r3, #0]
 80039b2:	e002      	b.n	80039ba <_printf_i+0xf2>
 80039b4:	0669      	lsls	r1, r5, #25
 80039b6:	d5fb      	bpl.n	80039b0 <_printf_i+0xe8>
 80039b8:	881d      	ldrh	r5, [r3, #0]
 80039ba:	2f6f      	cmp	r7, #111	; 0x6f
 80039bc:	bf0c      	ite	eq
 80039be:	2308      	moveq	r3, #8
 80039c0:	230a      	movne	r3, #10
 80039c2:	4852      	ldr	r0, [pc, #328]	; (8003b0c <_printf_i+0x244>)
 80039c4:	2100      	movs	r1, #0
 80039c6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80039ca:	6866      	ldr	r6, [r4, #4]
 80039cc:	2e00      	cmp	r6, #0
 80039ce:	bfa8      	it	ge
 80039d0:	6821      	ldrge	r1, [r4, #0]
 80039d2:	60a6      	str	r6, [r4, #8]
 80039d4:	bfa4      	itt	ge
 80039d6:	f021 0104 	bicge.w	r1, r1, #4
 80039da:	6021      	strge	r1, [r4, #0]
 80039dc:	b90d      	cbnz	r5, 80039e2 <_printf_i+0x11a>
 80039de:	2e00      	cmp	r6, #0
 80039e0:	d04d      	beq.n	8003a7e <_printf_i+0x1b6>
 80039e2:	4616      	mov	r6, r2
 80039e4:	fbb5 f1f3 	udiv	r1, r5, r3
 80039e8:	fb03 5711 	mls	r7, r3, r1, r5
 80039ec:	5dc7      	ldrb	r7, [r0, r7]
 80039ee:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80039f2:	462f      	mov	r7, r5
 80039f4:	42bb      	cmp	r3, r7
 80039f6:	460d      	mov	r5, r1
 80039f8:	d9f4      	bls.n	80039e4 <_printf_i+0x11c>
 80039fa:	2b08      	cmp	r3, #8
 80039fc:	d10b      	bne.n	8003a16 <_printf_i+0x14e>
 80039fe:	6823      	ldr	r3, [r4, #0]
 8003a00:	07df      	lsls	r7, r3, #31
 8003a02:	d508      	bpl.n	8003a16 <_printf_i+0x14e>
 8003a04:	6923      	ldr	r3, [r4, #16]
 8003a06:	6861      	ldr	r1, [r4, #4]
 8003a08:	4299      	cmp	r1, r3
 8003a0a:	bfde      	ittt	le
 8003a0c:	2330      	movle	r3, #48	; 0x30
 8003a0e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003a12:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003a16:	1b92      	subs	r2, r2, r6
 8003a18:	6122      	str	r2, [r4, #16]
 8003a1a:	464b      	mov	r3, r9
 8003a1c:	4621      	mov	r1, r4
 8003a1e:	4640      	mov	r0, r8
 8003a20:	f8cd a000 	str.w	sl, [sp]
 8003a24:	aa03      	add	r2, sp, #12
 8003a26:	f7ff fedf 	bl	80037e8 <_printf_common>
 8003a2a:	3001      	adds	r0, #1
 8003a2c:	d14c      	bne.n	8003ac8 <_printf_i+0x200>
 8003a2e:	f04f 30ff 	mov.w	r0, #4294967295
 8003a32:	b004      	add	sp, #16
 8003a34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a38:	4834      	ldr	r0, [pc, #208]	; (8003b0c <_printf_i+0x244>)
 8003a3a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003a3e:	680e      	ldr	r6, [r1, #0]
 8003a40:	6823      	ldr	r3, [r4, #0]
 8003a42:	f856 5b04 	ldr.w	r5, [r6], #4
 8003a46:	061f      	lsls	r7, r3, #24
 8003a48:	600e      	str	r6, [r1, #0]
 8003a4a:	d514      	bpl.n	8003a76 <_printf_i+0x1ae>
 8003a4c:	07d9      	lsls	r1, r3, #31
 8003a4e:	bf44      	itt	mi
 8003a50:	f043 0320 	orrmi.w	r3, r3, #32
 8003a54:	6023      	strmi	r3, [r4, #0]
 8003a56:	b91d      	cbnz	r5, 8003a60 <_printf_i+0x198>
 8003a58:	6823      	ldr	r3, [r4, #0]
 8003a5a:	f023 0320 	bic.w	r3, r3, #32
 8003a5e:	6023      	str	r3, [r4, #0]
 8003a60:	2310      	movs	r3, #16
 8003a62:	e7af      	b.n	80039c4 <_printf_i+0xfc>
 8003a64:	6823      	ldr	r3, [r4, #0]
 8003a66:	f043 0320 	orr.w	r3, r3, #32
 8003a6a:	6023      	str	r3, [r4, #0]
 8003a6c:	2378      	movs	r3, #120	; 0x78
 8003a6e:	4828      	ldr	r0, [pc, #160]	; (8003b10 <_printf_i+0x248>)
 8003a70:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003a74:	e7e3      	b.n	8003a3e <_printf_i+0x176>
 8003a76:	065e      	lsls	r6, r3, #25
 8003a78:	bf48      	it	mi
 8003a7a:	b2ad      	uxthmi	r5, r5
 8003a7c:	e7e6      	b.n	8003a4c <_printf_i+0x184>
 8003a7e:	4616      	mov	r6, r2
 8003a80:	e7bb      	b.n	80039fa <_printf_i+0x132>
 8003a82:	680b      	ldr	r3, [r1, #0]
 8003a84:	6826      	ldr	r6, [r4, #0]
 8003a86:	1d1d      	adds	r5, r3, #4
 8003a88:	6960      	ldr	r0, [r4, #20]
 8003a8a:	600d      	str	r5, [r1, #0]
 8003a8c:	0635      	lsls	r5, r6, #24
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	d501      	bpl.n	8003a96 <_printf_i+0x1ce>
 8003a92:	6018      	str	r0, [r3, #0]
 8003a94:	e002      	b.n	8003a9c <_printf_i+0x1d4>
 8003a96:	0671      	lsls	r1, r6, #25
 8003a98:	d5fb      	bpl.n	8003a92 <_printf_i+0x1ca>
 8003a9a:	8018      	strh	r0, [r3, #0]
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	4616      	mov	r6, r2
 8003aa0:	6123      	str	r3, [r4, #16]
 8003aa2:	e7ba      	b.n	8003a1a <_printf_i+0x152>
 8003aa4:	680b      	ldr	r3, [r1, #0]
 8003aa6:	1d1a      	adds	r2, r3, #4
 8003aa8:	600a      	str	r2, [r1, #0]
 8003aaa:	681e      	ldr	r6, [r3, #0]
 8003aac:	2100      	movs	r1, #0
 8003aae:	4630      	mov	r0, r6
 8003ab0:	6862      	ldr	r2, [r4, #4]
 8003ab2:	f000 fa9d 	bl	8003ff0 <memchr>
 8003ab6:	b108      	cbz	r0, 8003abc <_printf_i+0x1f4>
 8003ab8:	1b80      	subs	r0, r0, r6
 8003aba:	6060      	str	r0, [r4, #4]
 8003abc:	6863      	ldr	r3, [r4, #4]
 8003abe:	6123      	str	r3, [r4, #16]
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003ac6:	e7a8      	b.n	8003a1a <_printf_i+0x152>
 8003ac8:	4632      	mov	r2, r6
 8003aca:	4649      	mov	r1, r9
 8003acc:	4640      	mov	r0, r8
 8003ace:	6923      	ldr	r3, [r4, #16]
 8003ad0:	47d0      	blx	sl
 8003ad2:	3001      	adds	r0, #1
 8003ad4:	d0ab      	beq.n	8003a2e <_printf_i+0x166>
 8003ad6:	6823      	ldr	r3, [r4, #0]
 8003ad8:	079b      	lsls	r3, r3, #30
 8003ada:	d413      	bmi.n	8003b04 <_printf_i+0x23c>
 8003adc:	68e0      	ldr	r0, [r4, #12]
 8003ade:	9b03      	ldr	r3, [sp, #12]
 8003ae0:	4298      	cmp	r0, r3
 8003ae2:	bfb8      	it	lt
 8003ae4:	4618      	movlt	r0, r3
 8003ae6:	e7a4      	b.n	8003a32 <_printf_i+0x16a>
 8003ae8:	2301      	movs	r3, #1
 8003aea:	4632      	mov	r2, r6
 8003aec:	4649      	mov	r1, r9
 8003aee:	4640      	mov	r0, r8
 8003af0:	47d0      	blx	sl
 8003af2:	3001      	adds	r0, #1
 8003af4:	d09b      	beq.n	8003a2e <_printf_i+0x166>
 8003af6:	3501      	adds	r5, #1
 8003af8:	68e3      	ldr	r3, [r4, #12]
 8003afa:	9903      	ldr	r1, [sp, #12]
 8003afc:	1a5b      	subs	r3, r3, r1
 8003afe:	42ab      	cmp	r3, r5
 8003b00:	dcf2      	bgt.n	8003ae8 <_printf_i+0x220>
 8003b02:	e7eb      	b.n	8003adc <_printf_i+0x214>
 8003b04:	2500      	movs	r5, #0
 8003b06:	f104 0619 	add.w	r6, r4, #25
 8003b0a:	e7f5      	b.n	8003af8 <_printf_i+0x230>
 8003b0c:	080041ed 	.word	0x080041ed
 8003b10:	080041fe 	.word	0x080041fe

08003b14 <_sbrk_r>:
 8003b14:	b538      	push	{r3, r4, r5, lr}
 8003b16:	2300      	movs	r3, #0
 8003b18:	4d05      	ldr	r5, [pc, #20]	; (8003b30 <_sbrk_r+0x1c>)
 8003b1a:	4604      	mov	r4, r0
 8003b1c:	4608      	mov	r0, r1
 8003b1e:	602b      	str	r3, [r5, #0]
 8003b20:	f7ff fb0e 	bl	8003140 <_sbrk>
 8003b24:	1c43      	adds	r3, r0, #1
 8003b26:	d102      	bne.n	8003b2e <_sbrk_r+0x1a>
 8003b28:	682b      	ldr	r3, [r5, #0]
 8003b2a:	b103      	cbz	r3, 8003b2e <_sbrk_r+0x1a>
 8003b2c:	6023      	str	r3, [r4, #0]
 8003b2e:	bd38      	pop	{r3, r4, r5, pc}
 8003b30:	20000110 	.word	0x20000110

08003b34 <__sread>:
 8003b34:	b510      	push	{r4, lr}
 8003b36:	460c      	mov	r4, r1
 8003b38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b3c:	f000 fabe 	bl	80040bc <_read_r>
 8003b40:	2800      	cmp	r0, #0
 8003b42:	bfab      	itete	ge
 8003b44:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003b46:	89a3      	ldrhlt	r3, [r4, #12]
 8003b48:	181b      	addge	r3, r3, r0
 8003b4a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003b4e:	bfac      	ite	ge
 8003b50:	6563      	strge	r3, [r4, #84]	; 0x54
 8003b52:	81a3      	strhlt	r3, [r4, #12]
 8003b54:	bd10      	pop	{r4, pc}

08003b56 <__swrite>:
 8003b56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b5a:	461f      	mov	r7, r3
 8003b5c:	898b      	ldrh	r3, [r1, #12]
 8003b5e:	4605      	mov	r5, r0
 8003b60:	05db      	lsls	r3, r3, #23
 8003b62:	460c      	mov	r4, r1
 8003b64:	4616      	mov	r6, r2
 8003b66:	d505      	bpl.n	8003b74 <__swrite+0x1e>
 8003b68:	2302      	movs	r3, #2
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b70:	f000 f9c8 	bl	8003f04 <_lseek_r>
 8003b74:	89a3      	ldrh	r3, [r4, #12]
 8003b76:	4632      	mov	r2, r6
 8003b78:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003b7c:	81a3      	strh	r3, [r4, #12]
 8003b7e:	4628      	mov	r0, r5
 8003b80:	463b      	mov	r3, r7
 8003b82:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003b86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003b8a:	f000 b869 	b.w	8003c60 <_write_r>

08003b8e <__sseek>:
 8003b8e:	b510      	push	{r4, lr}
 8003b90:	460c      	mov	r4, r1
 8003b92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b96:	f000 f9b5 	bl	8003f04 <_lseek_r>
 8003b9a:	1c43      	adds	r3, r0, #1
 8003b9c:	89a3      	ldrh	r3, [r4, #12]
 8003b9e:	bf15      	itete	ne
 8003ba0:	6560      	strne	r0, [r4, #84]	; 0x54
 8003ba2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003ba6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003baa:	81a3      	strheq	r3, [r4, #12]
 8003bac:	bf18      	it	ne
 8003bae:	81a3      	strhne	r3, [r4, #12]
 8003bb0:	bd10      	pop	{r4, pc}

08003bb2 <__sclose>:
 8003bb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003bb6:	f000 b8d3 	b.w	8003d60 <_close_r>
	...

08003bbc <__swbuf_r>:
 8003bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bbe:	460e      	mov	r6, r1
 8003bc0:	4614      	mov	r4, r2
 8003bc2:	4605      	mov	r5, r0
 8003bc4:	b118      	cbz	r0, 8003bce <__swbuf_r+0x12>
 8003bc6:	6983      	ldr	r3, [r0, #24]
 8003bc8:	b90b      	cbnz	r3, 8003bce <__swbuf_r+0x12>
 8003bca:	f7ff fbbb 	bl	8003344 <__sinit>
 8003bce:	4b21      	ldr	r3, [pc, #132]	; (8003c54 <__swbuf_r+0x98>)
 8003bd0:	429c      	cmp	r4, r3
 8003bd2:	d12b      	bne.n	8003c2c <__swbuf_r+0x70>
 8003bd4:	686c      	ldr	r4, [r5, #4]
 8003bd6:	69a3      	ldr	r3, [r4, #24]
 8003bd8:	60a3      	str	r3, [r4, #8]
 8003bda:	89a3      	ldrh	r3, [r4, #12]
 8003bdc:	071a      	lsls	r2, r3, #28
 8003bde:	d52f      	bpl.n	8003c40 <__swbuf_r+0x84>
 8003be0:	6923      	ldr	r3, [r4, #16]
 8003be2:	b36b      	cbz	r3, 8003c40 <__swbuf_r+0x84>
 8003be4:	6923      	ldr	r3, [r4, #16]
 8003be6:	6820      	ldr	r0, [r4, #0]
 8003be8:	b2f6      	uxtb	r6, r6
 8003bea:	1ac0      	subs	r0, r0, r3
 8003bec:	6963      	ldr	r3, [r4, #20]
 8003bee:	4637      	mov	r7, r6
 8003bf0:	4283      	cmp	r3, r0
 8003bf2:	dc04      	bgt.n	8003bfe <__swbuf_r+0x42>
 8003bf4:	4621      	mov	r1, r4
 8003bf6:	4628      	mov	r0, r5
 8003bf8:	f000 f948 	bl	8003e8c <_fflush_r>
 8003bfc:	bb30      	cbnz	r0, 8003c4c <__swbuf_r+0x90>
 8003bfe:	68a3      	ldr	r3, [r4, #8]
 8003c00:	3001      	adds	r0, #1
 8003c02:	3b01      	subs	r3, #1
 8003c04:	60a3      	str	r3, [r4, #8]
 8003c06:	6823      	ldr	r3, [r4, #0]
 8003c08:	1c5a      	adds	r2, r3, #1
 8003c0a:	6022      	str	r2, [r4, #0]
 8003c0c:	701e      	strb	r6, [r3, #0]
 8003c0e:	6963      	ldr	r3, [r4, #20]
 8003c10:	4283      	cmp	r3, r0
 8003c12:	d004      	beq.n	8003c1e <__swbuf_r+0x62>
 8003c14:	89a3      	ldrh	r3, [r4, #12]
 8003c16:	07db      	lsls	r3, r3, #31
 8003c18:	d506      	bpl.n	8003c28 <__swbuf_r+0x6c>
 8003c1a:	2e0a      	cmp	r6, #10
 8003c1c:	d104      	bne.n	8003c28 <__swbuf_r+0x6c>
 8003c1e:	4621      	mov	r1, r4
 8003c20:	4628      	mov	r0, r5
 8003c22:	f000 f933 	bl	8003e8c <_fflush_r>
 8003c26:	b988      	cbnz	r0, 8003c4c <__swbuf_r+0x90>
 8003c28:	4638      	mov	r0, r7
 8003c2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003c2c:	4b0a      	ldr	r3, [pc, #40]	; (8003c58 <__swbuf_r+0x9c>)
 8003c2e:	429c      	cmp	r4, r3
 8003c30:	d101      	bne.n	8003c36 <__swbuf_r+0x7a>
 8003c32:	68ac      	ldr	r4, [r5, #8]
 8003c34:	e7cf      	b.n	8003bd6 <__swbuf_r+0x1a>
 8003c36:	4b09      	ldr	r3, [pc, #36]	; (8003c5c <__swbuf_r+0xa0>)
 8003c38:	429c      	cmp	r4, r3
 8003c3a:	bf08      	it	eq
 8003c3c:	68ec      	ldreq	r4, [r5, #12]
 8003c3e:	e7ca      	b.n	8003bd6 <__swbuf_r+0x1a>
 8003c40:	4621      	mov	r1, r4
 8003c42:	4628      	mov	r0, r5
 8003c44:	f000 f81e 	bl	8003c84 <__swsetup_r>
 8003c48:	2800      	cmp	r0, #0
 8003c4a:	d0cb      	beq.n	8003be4 <__swbuf_r+0x28>
 8003c4c:	f04f 37ff 	mov.w	r7, #4294967295
 8003c50:	e7ea      	b.n	8003c28 <__swbuf_r+0x6c>
 8003c52:	bf00      	nop
 8003c54:	0800419c 	.word	0x0800419c
 8003c58:	080041bc 	.word	0x080041bc
 8003c5c:	0800417c 	.word	0x0800417c

08003c60 <_write_r>:
 8003c60:	b538      	push	{r3, r4, r5, lr}
 8003c62:	4604      	mov	r4, r0
 8003c64:	4608      	mov	r0, r1
 8003c66:	4611      	mov	r1, r2
 8003c68:	2200      	movs	r2, #0
 8003c6a:	4d05      	ldr	r5, [pc, #20]	; (8003c80 <_write_r+0x20>)
 8003c6c:	602a      	str	r2, [r5, #0]
 8003c6e:	461a      	mov	r2, r3
 8003c70:	f7ff fa19 	bl	80030a6 <_write>
 8003c74:	1c43      	adds	r3, r0, #1
 8003c76:	d102      	bne.n	8003c7e <_write_r+0x1e>
 8003c78:	682b      	ldr	r3, [r5, #0]
 8003c7a:	b103      	cbz	r3, 8003c7e <_write_r+0x1e>
 8003c7c:	6023      	str	r3, [r4, #0]
 8003c7e:	bd38      	pop	{r3, r4, r5, pc}
 8003c80:	20000110 	.word	0x20000110

08003c84 <__swsetup_r>:
 8003c84:	4b32      	ldr	r3, [pc, #200]	; (8003d50 <__swsetup_r+0xcc>)
 8003c86:	b570      	push	{r4, r5, r6, lr}
 8003c88:	681d      	ldr	r5, [r3, #0]
 8003c8a:	4606      	mov	r6, r0
 8003c8c:	460c      	mov	r4, r1
 8003c8e:	b125      	cbz	r5, 8003c9a <__swsetup_r+0x16>
 8003c90:	69ab      	ldr	r3, [r5, #24]
 8003c92:	b913      	cbnz	r3, 8003c9a <__swsetup_r+0x16>
 8003c94:	4628      	mov	r0, r5
 8003c96:	f7ff fb55 	bl	8003344 <__sinit>
 8003c9a:	4b2e      	ldr	r3, [pc, #184]	; (8003d54 <__swsetup_r+0xd0>)
 8003c9c:	429c      	cmp	r4, r3
 8003c9e:	d10f      	bne.n	8003cc0 <__swsetup_r+0x3c>
 8003ca0:	686c      	ldr	r4, [r5, #4]
 8003ca2:	89a3      	ldrh	r3, [r4, #12]
 8003ca4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003ca8:	0719      	lsls	r1, r3, #28
 8003caa:	d42c      	bmi.n	8003d06 <__swsetup_r+0x82>
 8003cac:	06dd      	lsls	r5, r3, #27
 8003cae:	d411      	bmi.n	8003cd4 <__swsetup_r+0x50>
 8003cb0:	2309      	movs	r3, #9
 8003cb2:	6033      	str	r3, [r6, #0]
 8003cb4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003cb8:	f04f 30ff 	mov.w	r0, #4294967295
 8003cbc:	81a3      	strh	r3, [r4, #12]
 8003cbe:	e03e      	b.n	8003d3e <__swsetup_r+0xba>
 8003cc0:	4b25      	ldr	r3, [pc, #148]	; (8003d58 <__swsetup_r+0xd4>)
 8003cc2:	429c      	cmp	r4, r3
 8003cc4:	d101      	bne.n	8003cca <__swsetup_r+0x46>
 8003cc6:	68ac      	ldr	r4, [r5, #8]
 8003cc8:	e7eb      	b.n	8003ca2 <__swsetup_r+0x1e>
 8003cca:	4b24      	ldr	r3, [pc, #144]	; (8003d5c <__swsetup_r+0xd8>)
 8003ccc:	429c      	cmp	r4, r3
 8003cce:	bf08      	it	eq
 8003cd0:	68ec      	ldreq	r4, [r5, #12]
 8003cd2:	e7e6      	b.n	8003ca2 <__swsetup_r+0x1e>
 8003cd4:	0758      	lsls	r0, r3, #29
 8003cd6:	d512      	bpl.n	8003cfe <__swsetup_r+0x7a>
 8003cd8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003cda:	b141      	cbz	r1, 8003cee <__swsetup_r+0x6a>
 8003cdc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003ce0:	4299      	cmp	r1, r3
 8003ce2:	d002      	beq.n	8003cea <__swsetup_r+0x66>
 8003ce4:	4630      	mov	r0, r6
 8003ce6:	f000 f99d 	bl	8004024 <_free_r>
 8003cea:	2300      	movs	r3, #0
 8003cec:	6363      	str	r3, [r4, #52]	; 0x34
 8003cee:	89a3      	ldrh	r3, [r4, #12]
 8003cf0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003cf4:	81a3      	strh	r3, [r4, #12]
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	6063      	str	r3, [r4, #4]
 8003cfa:	6923      	ldr	r3, [r4, #16]
 8003cfc:	6023      	str	r3, [r4, #0]
 8003cfe:	89a3      	ldrh	r3, [r4, #12]
 8003d00:	f043 0308 	orr.w	r3, r3, #8
 8003d04:	81a3      	strh	r3, [r4, #12]
 8003d06:	6923      	ldr	r3, [r4, #16]
 8003d08:	b94b      	cbnz	r3, 8003d1e <__swsetup_r+0x9a>
 8003d0a:	89a3      	ldrh	r3, [r4, #12]
 8003d0c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003d10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d14:	d003      	beq.n	8003d1e <__swsetup_r+0x9a>
 8003d16:	4621      	mov	r1, r4
 8003d18:	4630      	mov	r0, r6
 8003d1a:	f000 f929 	bl	8003f70 <__smakebuf_r>
 8003d1e:	89a0      	ldrh	r0, [r4, #12]
 8003d20:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003d24:	f010 0301 	ands.w	r3, r0, #1
 8003d28:	d00a      	beq.n	8003d40 <__swsetup_r+0xbc>
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	60a3      	str	r3, [r4, #8]
 8003d2e:	6963      	ldr	r3, [r4, #20]
 8003d30:	425b      	negs	r3, r3
 8003d32:	61a3      	str	r3, [r4, #24]
 8003d34:	6923      	ldr	r3, [r4, #16]
 8003d36:	b943      	cbnz	r3, 8003d4a <__swsetup_r+0xc6>
 8003d38:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003d3c:	d1ba      	bne.n	8003cb4 <__swsetup_r+0x30>
 8003d3e:	bd70      	pop	{r4, r5, r6, pc}
 8003d40:	0781      	lsls	r1, r0, #30
 8003d42:	bf58      	it	pl
 8003d44:	6963      	ldrpl	r3, [r4, #20]
 8003d46:	60a3      	str	r3, [r4, #8]
 8003d48:	e7f4      	b.n	8003d34 <__swsetup_r+0xb0>
 8003d4a:	2000      	movs	r0, #0
 8003d4c:	e7f7      	b.n	8003d3e <__swsetup_r+0xba>
 8003d4e:	bf00      	nop
 8003d50:	20000040 	.word	0x20000040
 8003d54:	0800419c 	.word	0x0800419c
 8003d58:	080041bc 	.word	0x080041bc
 8003d5c:	0800417c 	.word	0x0800417c

08003d60 <_close_r>:
 8003d60:	b538      	push	{r3, r4, r5, lr}
 8003d62:	2300      	movs	r3, #0
 8003d64:	4d05      	ldr	r5, [pc, #20]	; (8003d7c <_close_r+0x1c>)
 8003d66:	4604      	mov	r4, r0
 8003d68:	4608      	mov	r0, r1
 8003d6a:	602b      	str	r3, [r5, #0]
 8003d6c:	f7ff f9b7 	bl	80030de <_close>
 8003d70:	1c43      	adds	r3, r0, #1
 8003d72:	d102      	bne.n	8003d7a <_close_r+0x1a>
 8003d74:	682b      	ldr	r3, [r5, #0]
 8003d76:	b103      	cbz	r3, 8003d7a <_close_r+0x1a>
 8003d78:	6023      	str	r3, [r4, #0]
 8003d7a:	bd38      	pop	{r3, r4, r5, pc}
 8003d7c:	20000110 	.word	0x20000110

08003d80 <__sflush_r>:
 8003d80:	898a      	ldrh	r2, [r1, #12]
 8003d82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003d86:	4605      	mov	r5, r0
 8003d88:	0710      	lsls	r0, r2, #28
 8003d8a:	460c      	mov	r4, r1
 8003d8c:	d458      	bmi.n	8003e40 <__sflush_r+0xc0>
 8003d8e:	684b      	ldr	r3, [r1, #4]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	dc05      	bgt.n	8003da0 <__sflush_r+0x20>
 8003d94:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	dc02      	bgt.n	8003da0 <__sflush_r+0x20>
 8003d9a:	2000      	movs	r0, #0
 8003d9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003da0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003da2:	2e00      	cmp	r6, #0
 8003da4:	d0f9      	beq.n	8003d9a <__sflush_r+0x1a>
 8003da6:	2300      	movs	r3, #0
 8003da8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003dac:	682f      	ldr	r7, [r5, #0]
 8003dae:	602b      	str	r3, [r5, #0]
 8003db0:	d032      	beq.n	8003e18 <__sflush_r+0x98>
 8003db2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003db4:	89a3      	ldrh	r3, [r4, #12]
 8003db6:	075a      	lsls	r2, r3, #29
 8003db8:	d505      	bpl.n	8003dc6 <__sflush_r+0x46>
 8003dba:	6863      	ldr	r3, [r4, #4]
 8003dbc:	1ac0      	subs	r0, r0, r3
 8003dbe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003dc0:	b10b      	cbz	r3, 8003dc6 <__sflush_r+0x46>
 8003dc2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003dc4:	1ac0      	subs	r0, r0, r3
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	4602      	mov	r2, r0
 8003dca:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003dcc:	4628      	mov	r0, r5
 8003dce:	6a21      	ldr	r1, [r4, #32]
 8003dd0:	47b0      	blx	r6
 8003dd2:	1c43      	adds	r3, r0, #1
 8003dd4:	89a3      	ldrh	r3, [r4, #12]
 8003dd6:	d106      	bne.n	8003de6 <__sflush_r+0x66>
 8003dd8:	6829      	ldr	r1, [r5, #0]
 8003dda:	291d      	cmp	r1, #29
 8003ddc:	d82c      	bhi.n	8003e38 <__sflush_r+0xb8>
 8003dde:	4a2a      	ldr	r2, [pc, #168]	; (8003e88 <__sflush_r+0x108>)
 8003de0:	40ca      	lsrs	r2, r1
 8003de2:	07d6      	lsls	r6, r2, #31
 8003de4:	d528      	bpl.n	8003e38 <__sflush_r+0xb8>
 8003de6:	2200      	movs	r2, #0
 8003de8:	6062      	str	r2, [r4, #4]
 8003dea:	6922      	ldr	r2, [r4, #16]
 8003dec:	04d9      	lsls	r1, r3, #19
 8003dee:	6022      	str	r2, [r4, #0]
 8003df0:	d504      	bpl.n	8003dfc <__sflush_r+0x7c>
 8003df2:	1c42      	adds	r2, r0, #1
 8003df4:	d101      	bne.n	8003dfa <__sflush_r+0x7a>
 8003df6:	682b      	ldr	r3, [r5, #0]
 8003df8:	b903      	cbnz	r3, 8003dfc <__sflush_r+0x7c>
 8003dfa:	6560      	str	r0, [r4, #84]	; 0x54
 8003dfc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003dfe:	602f      	str	r7, [r5, #0]
 8003e00:	2900      	cmp	r1, #0
 8003e02:	d0ca      	beq.n	8003d9a <__sflush_r+0x1a>
 8003e04:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003e08:	4299      	cmp	r1, r3
 8003e0a:	d002      	beq.n	8003e12 <__sflush_r+0x92>
 8003e0c:	4628      	mov	r0, r5
 8003e0e:	f000 f909 	bl	8004024 <_free_r>
 8003e12:	2000      	movs	r0, #0
 8003e14:	6360      	str	r0, [r4, #52]	; 0x34
 8003e16:	e7c1      	b.n	8003d9c <__sflush_r+0x1c>
 8003e18:	6a21      	ldr	r1, [r4, #32]
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	4628      	mov	r0, r5
 8003e1e:	47b0      	blx	r6
 8003e20:	1c41      	adds	r1, r0, #1
 8003e22:	d1c7      	bne.n	8003db4 <__sflush_r+0x34>
 8003e24:	682b      	ldr	r3, [r5, #0]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d0c4      	beq.n	8003db4 <__sflush_r+0x34>
 8003e2a:	2b1d      	cmp	r3, #29
 8003e2c:	d001      	beq.n	8003e32 <__sflush_r+0xb2>
 8003e2e:	2b16      	cmp	r3, #22
 8003e30:	d101      	bne.n	8003e36 <__sflush_r+0xb6>
 8003e32:	602f      	str	r7, [r5, #0]
 8003e34:	e7b1      	b.n	8003d9a <__sflush_r+0x1a>
 8003e36:	89a3      	ldrh	r3, [r4, #12]
 8003e38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e3c:	81a3      	strh	r3, [r4, #12]
 8003e3e:	e7ad      	b.n	8003d9c <__sflush_r+0x1c>
 8003e40:	690f      	ldr	r7, [r1, #16]
 8003e42:	2f00      	cmp	r7, #0
 8003e44:	d0a9      	beq.n	8003d9a <__sflush_r+0x1a>
 8003e46:	0793      	lsls	r3, r2, #30
 8003e48:	bf18      	it	ne
 8003e4a:	2300      	movne	r3, #0
 8003e4c:	680e      	ldr	r6, [r1, #0]
 8003e4e:	bf08      	it	eq
 8003e50:	694b      	ldreq	r3, [r1, #20]
 8003e52:	eba6 0807 	sub.w	r8, r6, r7
 8003e56:	600f      	str	r7, [r1, #0]
 8003e58:	608b      	str	r3, [r1, #8]
 8003e5a:	f1b8 0f00 	cmp.w	r8, #0
 8003e5e:	dd9c      	ble.n	8003d9a <__sflush_r+0x1a>
 8003e60:	4643      	mov	r3, r8
 8003e62:	463a      	mov	r2, r7
 8003e64:	4628      	mov	r0, r5
 8003e66:	6a21      	ldr	r1, [r4, #32]
 8003e68:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003e6a:	47b0      	blx	r6
 8003e6c:	2800      	cmp	r0, #0
 8003e6e:	dc06      	bgt.n	8003e7e <__sflush_r+0xfe>
 8003e70:	89a3      	ldrh	r3, [r4, #12]
 8003e72:	f04f 30ff 	mov.w	r0, #4294967295
 8003e76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e7a:	81a3      	strh	r3, [r4, #12]
 8003e7c:	e78e      	b.n	8003d9c <__sflush_r+0x1c>
 8003e7e:	4407      	add	r7, r0
 8003e80:	eba8 0800 	sub.w	r8, r8, r0
 8003e84:	e7e9      	b.n	8003e5a <__sflush_r+0xda>
 8003e86:	bf00      	nop
 8003e88:	20400001 	.word	0x20400001

08003e8c <_fflush_r>:
 8003e8c:	b538      	push	{r3, r4, r5, lr}
 8003e8e:	690b      	ldr	r3, [r1, #16]
 8003e90:	4605      	mov	r5, r0
 8003e92:	460c      	mov	r4, r1
 8003e94:	b913      	cbnz	r3, 8003e9c <_fflush_r+0x10>
 8003e96:	2500      	movs	r5, #0
 8003e98:	4628      	mov	r0, r5
 8003e9a:	bd38      	pop	{r3, r4, r5, pc}
 8003e9c:	b118      	cbz	r0, 8003ea6 <_fflush_r+0x1a>
 8003e9e:	6983      	ldr	r3, [r0, #24]
 8003ea0:	b90b      	cbnz	r3, 8003ea6 <_fflush_r+0x1a>
 8003ea2:	f7ff fa4f 	bl	8003344 <__sinit>
 8003ea6:	4b14      	ldr	r3, [pc, #80]	; (8003ef8 <_fflush_r+0x6c>)
 8003ea8:	429c      	cmp	r4, r3
 8003eaa:	d11b      	bne.n	8003ee4 <_fflush_r+0x58>
 8003eac:	686c      	ldr	r4, [r5, #4]
 8003eae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d0ef      	beq.n	8003e96 <_fflush_r+0xa>
 8003eb6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003eb8:	07d0      	lsls	r0, r2, #31
 8003eba:	d404      	bmi.n	8003ec6 <_fflush_r+0x3a>
 8003ebc:	0599      	lsls	r1, r3, #22
 8003ebe:	d402      	bmi.n	8003ec6 <_fflush_r+0x3a>
 8003ec0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003ec2:	f7ff fadd 	bl	8003480 <__retarget_lock_acquire_recursive>
 8003ec6:	4628      	mov	r0, r5
 8003ec8:	4621      	mov	r1, r4
 8003eca:	f7ff ff59 	bl	8003d80 <__sflush_r>
 8003ece:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003ed0:	4605      	mov	r5, r0
 8003ed2:	07da      	lsls	r2, r3, #31
 8003ed4:	d4e0      	bmi.n	8003e98 <_fflush_r+0xc>
 8003ed6:	89a3      	ldrh	r3, [r4, #12]
 8003ed8:	059b      	lsls	r3, r3, #22
 8003eda:	d4dd      	bmi.n	8003e98 <_fflush_r+0xc>
 8003edc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003ede:	f7ff fad0 	bl	8003482 <__retarget_lock_release_recursive>
 8003ee2:	e7d9      	b.n	8003e98 <_fflush_r+0xc>
 8003ee4:	4b05      	ldr	r3, [pc, #20]	; (8003efc <_fflush_r+0x70>)
 8003ee6:	429c      	cmp	r4, r3
 8003ee8:	d101      	bne.n	8003eee <_fflush_r+0x62>
 8003eea:	68ac      	ldr	r4, [r5, #8]
 8003eec:	e7df      	b.n	8003eae <_fflush_r+0x22>
 8003eee:	4b04      	ldr	r3, [pc, #16]	; (8003f00 <_fflush_r+0x74>)
 8003ef0:	429c      	cmp	r4, r3
 8003ef2:	bf08      	it	eq
 8003ef4:	68ec      	ldreq	r4, [r5, #12]
 8003ef6:	e7da      	b.n	8003eae <_fflush_r+0x22>
 8003ef8:	0800419c 	.word	0x0800419c
 8003efc:	080041bc 	.word	0x080041bc
 8003f00:	0800417c 	.word	0x0800417c

08003f04 <_lseek_r>:
 8003f04:	b538      	push	{r3, r4, r5, lr}
 8003f06:	4604      	mov	r4, r0
 8003f08:	4608      	mov	r0, r1
 8003f0a:	4611      	mov	r1, r2
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	4d05      	ldr	r5, [pc, #20]	; (8003f24 <_lseek_r+0x20>)
 8003f10:	602a      	str	r2, [r5, #0]
 8003f12:	461a      	mov	r2, r3
 8003f14:	f7ff f907 	bl	8003126 <_lseek>
 8003f18:	1c43      	adds	r3, r0, #1
 8003f1a:	d102      	bne.n	8003f22 <_lseek_r+0x1e>
 8003f1c:	682b      	ldr	r3, [r5, #0]
 8003f1e:	b103      	cbz	r3, 8003f22 <_lseek_r+0x1e>
 8003f20:	6023      	str	r3, [r4, #0]
 8003f22:	bd38      	pop	{r3, r4, r5, pc}
 8003f24:	20000110 	.word	0x20000110

08003f28 <__swhatbuf_r>:
 8003f28:	b570      	push	{r4, r5, r6, lr}
 8003f2a:	460e      	mov	r6, r1
 8003f2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f30:	4614      	mov	r4, r2
 8003f32:	2900      	cmp	r1, #0
 8003f34:	461d      	mov	r5, r3
 8003f36:	b096      	sub	sp, #88	; 0x58
 8003f38:	da07      	bge.n	8003f4a <__swhatbuf_r+0x22>
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	602b      	str	r3, [r5, #0]
 8003f3e:	89b3      	ldrh	r3, [r6, #12]
 8003f40:	061a      	lsls	r2, r3, #24
 8003f42:	d410      	bmi.n	8003f66 <__swhatbuf_r+0x3e>
 8003f44:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003f48:	e00e      	b.n	8003f68 <__swhatbuf_r+0x40>
 8003f4a:	466a      	mov	r2, sp
 8003f4c:	f000 f8c8 	bl	80040e0 <_fstat_r>
 8003f50:	2800      	cmp	r0, #0
 8003f52:	dbf2      	blt.n	8003f3a <__swhatbuf_r+0x12>
 8003f54:	9a01      	ldr	r2, [sp, #4]
 8003f56:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003f5a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003f5e:	425a      	negs	r2, r3
 8003f60:	415a      	adcs	r2, r3
 8003f62:	602a      	str	r2, [r5, #0]
 8003f64:	e7ee      	b.n	8003f44 <__swhatbuf_r+0x1c>
 8003f66:	2340      	movs	r3, #64	; 0x40
 8003f68:	2000      	movs	r0, #0
 8003f6a:	6023      	str	r3, [r4, #0]
 8003f6c:	b016      	add	sp, #88	; 0x58
 8003f6e:	bd70      	pop	{r4, r5, r6, pc}

08003f70 <__smakebuf_r>:
 8003f70:	898b      	ldrh	r3, [r1, #12]
 8003f72:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003f74:	079d      	lsls	r5, r3, #30
 8003f76:	4606      	mov	r6, r0
 8003f78:	460c      	mov	r4, r1
 8003f7a:	d507      	bpl.n	8003f8c <__smakebuf_r+0x1c>
 8003f7c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003f80:	6023      	str	r3, [r4, #0]
 8003f82:	6123      	str	r3, [r4, #16]
 8003f84:	2301      	movs	r3, #1
 8003f86:	6163      	str	r3, [r4, #20]
 8003f88:	b002      	add	sp, #8
 8003f8a:	bd70      	pop	{r4, r5, r6, pc}
 8003f8c:	466a      	mov	r2, sp
 8003f8e:	ab01      	add	r3, sp, #4
 8003f90:	f7ff ffca 	bl	8003f28 <__swhatbuf_r>
 8003f94:	9900      	ldr	r1, [sp, #0]
 8003f96:	4605      	mov	r5, r0
 8003f98:	4630      	mov	r0, r6
 8003f9a:	f7ff fa73 	bl	8003484 <_malloc_r>
 8003f9e:	b948      	cbnz	r0, 8003fb4 <__smakebuf_r+0x44>
 8003fa0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003fa4:	059a      	lsls	r2, r3, #22
 8003fa6:	d4ef      	bmi.n	8003f88 <__smakebuf_r+0x18>
 8003fa8:	f023 0303 	bic.w	r3, r3, #3
 8003fac:	f043 0302 	orr.w	r3, r3, #2
 8003fb0:	81a3      	strh	r3, [r4, #12]
 8003fb2:	e7e3      	b.n	8003f7c <__smakebuf_r+0xc>
 8003fb4:	4b0d      	ldr	r3, [pc, #52]	; (8003fec <__smakebuf_r+0x7c>)
 8003fb6:	62b3      	str	r3, [r6, #40]	; 0x28
 8003fb8:	89a3      	ldrh	r3, [r4, #12]
 8003fba:	6020      	str	r0, [r4, #0]
 8003fbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fc0:	81a3      	strh	r3, [r4, #12]
 8003fc2:	9b00      	ldr	r3, [sp, #0]
 8003fc4:	6120      	str	r0, [r4, #16]
 8003fc6:	6163      	str	r3, [r4, #20]
 8003fc8:	9b01      	ldr	r3, [sp, #4]
 8003fca:	b15b      	cbz	r3, 8003fe4 <__smakebuf_r+0x74>
 8003fcc:	4630      	mov	r0, r6
 8003fce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003fd2:	f000 f897 	bl	8004104 <_isatty_r>
 8003fd6:	b128      	cbz	r0, 8003fe4 <__smakebuf_r+0x74>
 8003fd8:	89a3      	ldrh	r3, [r4, #12]
 8003fda:	f023 0303 	bic.w	r3, r3, #3
 8003fde:	f043 0301 	orr.w	r3, r3, #1
 8003fe2:	81a3      	strh	r3, [r4, #12]
 8003fe4:	89a0      	ldrh	r0, [r4, #12]
 8003fe6:	4305      	orrs	r5, r0
 8003fe8:	81a5      	strh	r5, [r4, #12]
 8003fea:	e7cd      	b.n	8003f88 <__smakebuf_r+0x18>
 8003fec:	080032dd 	.word	0x080032dd

08003ff0 <memchr>:
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	b510      	push	{r4, lr}
 8003ff4:	b2c9      	uxtb	r1, r1
 8003ff6:	4402      	add	r2, r0
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	d101      	bne.n	8004002 <memchr+0x12>
 8003ffe:	2000      	movs	r0, #0
 8004000:	e003      	b.n	800400a <memchr+0x1a>
 8004002:	7804      	ldrb	r4, [r0, #0]
 8004004:	3301      	adds	r3, #1
 8004006:	428c      	cmp	r4, r1
 8004008:	d1f6      	bne.n	8003ff8 <memchr+0x8>
 800400a:	bd10      	pop	{r4, pc}

0800400c <__malloc_lock>:
 800400c:	4801      	ldr	r0, [pc, #4]	; (8004014 <__malloc_lock+0x8>)
 800400e:	f7ff ba37 	b.w	8003480 <__retarget_lock_acquire_recursive>
 8004012:	bf00      	nop
 8004014:	20000108 	.word	0x20000108

08004018 <__malloc_unlock>:
 8004018:	4801      	ldr	r0, [pc, #4]	; (8004020 <__malloc_unlock+0x8>)
 800401a:	f7ff ba32 	b.w	8003482 <__retarget_lock_release_recursive>
 800401e:	bf00      	nop
 8004020:	20000108 	.word	0x20000108

08004024 <_free_r>:
 8004024:	b538      	push	{r3, r4, r5, lr}
 8004026:	4605      	mov	r5, r0
 8004028:	2900      	cmp	r1, #0
 800402a:	d043      	beq.n	80040b4 <_free_r+0x90>
 800402c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004030:	1f0c      	subs	r4, r1, #4
 8004032:	2b00      	cmp	r3, #0
 8004034:	bfb8      	it	lt
 8004036:	18e4      	addlt	r4, r4, r3
 8004038:	f7ff ffe8 	bl	800400c <__malloc_lock>
 800403c:	4a1e      	ldr	r2, [pc, #120]	; (80040b8 <_free_r+0x94>)
 800403e:	6813      	ldr	r3, [r2, #0]
 8004040:	4610      	mov	r0, r2
 8004042:	b933      	cbnz	r3, 8004052 <_free_r+0x2e>
 8004044:	6063      	str	r3, [r4, #4]
 8004046:	6014      	str	r4, [r2, #0]
 8004048:	4628      	mov	r0, r5
 800404a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800404e:	f7ff bfe3 	b.w	8004018 <__malloc_unlock>
 8004052:	42a3      	cmp	r3, r4
 8004054:	d90a      	bls.n	800406c <_free_r+0x48>
 8004056:	6821      	ldr	r1, [r4, #0]
 8004058:	1862      	adds	r2, r4, r1
 800405a:	4293      	cmp	r3, r2
 800405c:	bf01      	itttt	eq
 800405e:	681a      	ldreq	r2, [r3, #0]
 8004060:	685b      	ldreq	r3, [r3, #4]
 8004062:	1852      	addeq	r2, r2, r1
 8004064:	6022      	streq	r2, [r4, #0]
 8004066:	6063      	str	r3, [r4, #4]
 8004068:	6004      	str	r4, [r0, #0]
 800406a:	e7ed      	b.n	8004048 <_free_r+0x24>
 800406c:	461a      	mov	r2, r3
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	b10b      	cbz	r3, 8004076 <_free_r+0x52>
 8004072:	42a3      	cmp	r3, r4
 8004074:	d9fa      	bls.n	800406c <_free_r+0x48>
 8004076:	6811      	ldr	r1, [r2, #0]
 8004078:	1850      	adds	r0, r2, r1
 800407a:	42a0      	cmp	r0, r4
 800407c:	d10b      	bne.n	8004096 <_free_r+0x72>
 800407e:	6820      	ldr	r0, [r4, #0]
 8004080:	4401      	add	r1, r0
 8004082:	1850      	adds	r0, r2, r1
 8004084:	4283      	cmp	r3, r0
 8004086:	6011      	str	r1, [r2, #0]
 8004088:	d1de      	bne.n	8004048 <_free_r+0x24>
 800408a:	6818      	ldr	r0, [r3, #0]
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	4401      	add	r1, r0
 8004090:	6011      	str	r1, [r2, #0]
 8004092:	6053      	str	r3, [r2, #4]
 8004094:	e7d8      	b.n	8004048 <_free_r+0x24>
 8004096:	d902      	bls.n	800409e <_free_r+0x7a>
 8004098:	230c      	movs	r3, #12
 800409a:	602b      	str	r3, [r5, #0]
 800409c:	e7d4      	b.n	8004048 <_free_r+0x24>
 800409e:	6820      	ldr	r0, [r4, #0]
 80040a0:	1821      	adds	r1, r4, r0
 80040a2:	428b      	cmp	r3, r1
 80040a4:	bf01      	itttt	eq
 80040a6:	6819      	ldreq	r1, [r3, #0]
 80040a8:	685b      	ldreq	r3, [r3, #4]
 80040aa:	1809      	addeq	r1, r1, r0
 80040ac:	6021      	streq	r1, [r4, #0]
 80040ae:	6063      	str	r3, [r4, #4]
 80040b0:	6054      	str	r4, [r2, #4]
 80040b2:	e7c9      	b.n	8004048 <_free_r+0x24>
 80040b4:	bd38      	pop	{r3, r4, r5, pc}
 80040b6:	bf00      	nop
 80040b8:	200000e8 	.word	0x200000e8

080040bc <_read_r>:
 80040bc:	b538      	push	{r3, r4, r5, lr}
 80040be:	4604      	mov	r4, r0
 80040c0:	4608      	mov	r0, r1
 80040c2:	4611      	mov	r1, r2
 80040c4:	2200      	movs	r2, #0
 80040c6:	4d05      	ldr	r5, [pc, #20]	; (80040dc <_read_r+0x20>)
 80040c8:	602a      	str	r2, [r5, #0]
 80040ca:	461a      	mov	r2, r3
 80040cc:	f7fe ffce 	bl	800306c <_read>
 80040d0:	1c43      	adds	r3, r0, #1
 80040d2:	d102      	bne.n	80040da <_read_r+0x1e>
 80040d4:	682b      	ldr	r3, [r5, #0]
 80040d6:	b103      	cbz	r3, 80040da <_read_r+0x1e>
 80040d8:	6023      	str	r3, [r4, #0]
 80040da:	bd38      	pop	{r3, r4, r5, pc}
 80040dc:	20000110 	.word	0x20000110

080040e0 <_fstat_r>:
 80040e0:	b538      	push	{r3, r4, r5, lr}
 80040e2:	2300      	movs	r3, #0
 80040e4:	4d06      	ldr	r5, [pc, #24]	; (8004100 <_fstat_r+0x20>)
 80040e6:	4604      	mov	r4, r0
 80040e8:	4608      	mov	r0, r1
 80040ea:	4611      	mov	r1, r2
 80040ec:	602b      	str	r3, [r5, #0]
 80040ee:	f7ff f801 	bl	80030f4 <_fstat>
 80040f2:	1c43      	adds	r3, r0, #1
 80040f4:	d102      	bne.n	80040fc <_fstat_r+0x1c>
 80040f6:	682b      	ldr	r3, [r5, #0]
 80040f8:	b103      	cbz	r3, 80040fc <_fstat_r+0x1c>
 80040fa:	6023      	str	r3, [r4, #0]
 80040fc:	bd38      	pop	{r3, r4, r5, pc}
 80040fe:	bf00      	nop
 8004100:	20000110 	.word	0x20000110

08004104 <_isatty_r>:
 8004104:	b538      	push	{r3, r4, r5, lr}
 8004106:	2300      	movs	r3, #0
 8004108:	4d05      	ldr	r5, [pc, #20]	; (8004120 <_isatty_r+0x1c>)
 800410a:	4604      	mov	r4, r0
 800410c:	4608      	mov	r0, r1
 800410e:	602b      	str	r3, [r5, #0]
 8004110:	f7fe ffff 	bl	8003112 <_isatty>
 8004114:	1c43      	adds	r3, r0, #1
 8004116:	d102      	bne.n	800411e <_isatty_r+0x1a>
 8004118:	682b      	ldr	r3, [r5, #0]
 800411a:	b103      	cbz	r3, 800411e <_isatty_r+0x1a>
 800411c:	6023      	str	r3, [r4, #0]
 800411e:	bd38      	pop	{r3, r4, r5, pc}
 8004120:	20000110 	.word	0x20000110

08004124 <_init>:
 8004124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004126:	bf00      	nop
 8004128:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800412a:	bc08      	pop	{r3}
 800412c:	469e      	mov	lr, r3
 800412e:	4770      	bx	lr

08004130 <_fini>:
 8004130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004132:	bf00      	nop
 8004134:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004136:	bc08      	pop	{r3}
 8004138:	469e      	mov	lr, r3
 800413a:	4770      	bx	lr
