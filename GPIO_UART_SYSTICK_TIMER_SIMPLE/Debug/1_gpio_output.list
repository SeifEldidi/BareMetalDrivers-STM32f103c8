
1_gpio_output.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002cf4  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  08002e24  08002e24  00012e24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002efc  08002efc  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  08002efc  08002efc  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002efc  08002efc  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002efc  08002efc  00012efc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002f00  08002f00  00012f00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08002f04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000048  20000064  08002f68  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ac  08002f68  000200ac  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   000044dd  00000000  00000000  0002008d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000102f  00000000  00000000  0002456a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000002b0  00000000  00000000  000255a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000228  00000000  00000000  00025850  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00012daf  00000000  00000000  00025a78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00003ddb  00000000  00000000  00038827  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005cb94  00000000  00000000  0003c602  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00099196  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001120  00000000  00000000  000991ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000064 	.word	0x20000064
 800014c:	00000000 	.word	0x00000000
 8000150:	08002e0c 	.word	0x08002e0c

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000068 	.word	0x20000068
 800016c:	08002e0c 	.word	0x08002e0c

08000170 <SYSTICK_INIT>:
uint32_t SYS_CLK;

uint32_t PLL_CLK_CALC();

void SYSTICK_INIT()
{
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0
	/*Simple Function to calculate SYSCLK*/
	switch ((RCC->CFGR & (0x00000003 << RCC_SL_SWS_POS)) >> RCC_SL_SWS_POS) {
 8000174:	4b0a      	ldr	r3, [pc, #40]	; (80001a0 <SYSTICK_INIT+0x30>)
 8000176:	685b      	ldr	r3, [r3, #4]
 8000178:	089b      	lsrs	r3, r3, #2
 800017a:	f003 0303 	and.w	r3, r3, #3
 800017e:	2b01      	cmp	r3, #1
 8000180:	d902      	bls.n	8000188 <SYSTICK_INIT+0x18>
 8000182:	2b02      	cmp	r3, #2
 8000184:	d004      	beq.n	8000190 <SYSTICK_INIT+0x20>
			break;
		case 0x00000002UL:/*---PLL----*/
			SYS_CLK = PLL_CLK_CALC();
			break;
	}
}
 8000186:	e009      	b.n	800019c <SYSTICK_INIT+0x2c>
			SYS_CLK = 8000000UL;
 8000188:	4b06      	ldr	r3, [pc, #24]	; (80001a4 <SYSTICK_INIT+0x34>)
 800018a:	4a07      	ldr	r2, [pc, #28]	; (80001a8 <SYSTICK_INIT+0x38>)
 800018c:	601a      	str	r2, [r3, #0]
			break;
 800018e:	e005      	b.n	800019c <SYSTICK_INIT+0x2c>
			SYS_CLK = PLL_CLK_CALC();
 8000190:	f001 faca 	bl	8001728 <PLL_CLK_CALC>
 8000194:	4603      	mov	r3, r0
 8000196:	4a03      	ldr	r2, [pc, #12]	; (80001a4 <SYSTICK_INIT+0x34>)
 8000198:	6013      	str	r3, [r2, #0]
			break;
 800019a:	bf00      	nop
}
 800019c:	bf00      	nop
 800019e:	bd80      	pop	{r7, pc}
 80001a0:	40021000 	.word	0x40021000
 80001a4:	20000090 	.word	0x20000090
 80001a8:	007a1200 	.word	0x007a1200

080001ac <SYSTICK_Delay_ms>:

void SYSTICK_Delay_ms(int32_t Delay)
{
 80001ac:	b480      	push	{r7}
 80001ae:	b085      	sub	sp, #20
 80001b0:	af00      	add	r7, sp, #0
 80001b2:	6078      	str	r0, [r7, #4]
	int32_t delay=0;
 80001b4:	2300      	movs	r3, #0
 80001b6:	60fb      	str	r3, [r7, #12]
	int32_t LOAD_VAL;
	LOAD_VAL = (SYS_CLK/1000);
 80001b8:	4b15      	ldr	r3, [pc, #84]	; (8000210 <SYSTICK_Delay_ms+0x64>)
 80001ba:	681b      	ldr	r3, [r3, #0]
 80001bc:	4a15      	ldr	r2, [pc, #84]	; (8000214 <SYSTICK_Delay_ms+0x68>)
 80001be:	fba2 2303 	umull	r2, r3, r2, r3
 80001c2:	099b      	lsrs	r3, r3, #6
 80001c4:	60bb      	str	r3, [r7, #8]
	SYSTICK->RVR = LOAD_VAL; /*---Reload---*/
 80001c6:	4a14      	ldr	r2, [pc, #80]	; (8000218 <SYSTICK_Delay_ms+0x6c>)
 80001c8:	68bb      	ldr	r3, [r7, #8]
 80001ca:	6053      	str	r3, [r2, #4]
	SYSTICK->CVR = SYSTICK_CLEAR_VAL; /*----Clear Current---*/
 80001cc:	4b12      	ldr	r3, [pc, #72]	; (8000218 <SYSTICK_Delay_ms+0x6c>)
 80001ce:	2200      	movs	r2, #0
 80001d0:	609a      	str	r2, [r3, #8]
	SYSTICK->CSR  |= SYSTICK_CNT_EN |SYSTICK_CLKSRC_PROC;  /*------Enable ------*/
 80001d2:	4b11      	ldr	r3, [pc, #68]	; (8000218 <SYSTICK_Delay_ms+0x6c>)
 80001d4:	681b      	ldr	r3, [r3, #0]
 80001d6:	4a10      	ldr	r2, [pc, #64]	; (8000218 <SYSTICK_Delay_ms+0x6c>)
 80001d8:	f043 0305 	orr.w	r3, r3, #5
 80001dc:	6013      	str	r3, [r2, #0]

	for(delay=0;delay<=Delay-1;delay++)
 80001de:	2300      	movs	r3, #0
 80001e0:	60fb      	str	r3, [r7, #12]
 80001e2:	e009      	b.n	80001f8 <SYSTICK_Delay_ms+0x4c>
	{
		while((SYSTICK->CSR & SYSTICK_CNTFLAG_MSK)==0);/*Polling Method*/
 80001e4:	bf00      	nop
 80001e6:	4b0c      	ldr	r3, [pc, #48]	; (8000218 <SYSTICK_Delay_ms+0x6c>)
 80001e8:	681b      	ldr	r3, [r3, #0]
 80001ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80001ee:	2b00      	cmp	r3, #0
 80001f0:	d0f9      	beq.n	80001e6 <SYSTICK_Delay_ms+0x3a>
	for(delay=0;delay<=Delay-1;delay++)
 80001f2:	68fb      	ldr	r3, [r7, #12]
 80001f4:	3301      	adds	r3, #1
 80001f6:	60fb      	str	r3, [r7, #12]
 80001f8:	687a      	ldr	r2, [r7, #4]
 80001fa:	68fb      	ldr	r3, [r7, #12]
 80001fc:	429a      	cmp	r2, r3
 80001fe:	dcf1      	bgt.n	80001e4 <SYSTICK_Delay_ms+0x38>
	}

	SYSTICK->CSR = SYSTICK_CLEAR_VAL;
 8000200:	4b05      	ldr	r3, [pc, #20]	; (8000218 <SYSTICK_Delay_ms+0x6c>)
 8000202:	2200      	movs	r2, #0
 8000204:	601a      	str	r2, [r3, #0]
}
 8000206:	bf00      	nop
 8000208:	3714      	adds	r7, #20
 800020a:	46bd      	mov	sp, r7
 800020c:	bc80      	pop	{r7}
 800020e:	4770      	bx	lr
 8000210:	20000090 	.word	0x20000090
 8000214:	10624dd3 	.word	0x10624dd3
 8000218:	e000e010 	.word	0xe000e010

0800021c <HAL_ADC_Init>:

static void HAL_SHN_Init(ADC_CH_t *Channel);
static void HAL_MULT_SING_Init(ADC_init_t *ADC);

void HAL_ADC_Init(ADC_init_t *ADC)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	b082      	sub	sp, #8
 8000220:	af00      	add	r7, sp, #0
 8000222:	6078      	str	r0, [r7, #4]
	if(ADC != NULL)
 8000224:	687b      	ldr	r3, [r7, #4]
 8000226:	2b00      	cmp	r3, #0
 8000228:	d033      	beq.n	8000292 <HAL_ADC_Init+0x76>
	{
		switch(ADC->ADC_Mode)
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	681b      	ldr	r3, [r3, #0]
 800022e:	2b03      	cmp	r3, #3
 8000230:	d82f      	bhi.n	8000292 <HAL_ADC_Init+0x76>
 8000232:	a201      	add	r2, pc, #4	; (adr r2, 8000238 <HAL_ADC_Init+0x1c>)
 8000234:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000238:	08000249 	.word	0x08000249
 800023c:	0800025f 	.word	0x0800025f
 8000240:	08000289 	.word	0x08000289
 8000244:	08000291 	.word	0x08000291
		{
			case HAL_ADC_SCHN_SN_CONV:
				HAL_SHN_Init(&ADC->Init);
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	3398      	adds	r3, #152	; 0x98
 800024c:	4618      	mov	r0, r3
 800024e:	f000 fcb3 	bl	8000bb8 <HAL_SHN_Init>
				ADC->Init.Sample_Time=ADC->Sample_Time[0];
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	689a      	ldr	r2, [r3, #8]
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
				break;
 800025c:	e019      	b.n	8000292 <HAL_ADC_Init+0x76>
			case HAL_ADC_SCHN_AUTO_CONV:
				HAL_SHN_Init(&ADC->Init);
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	3398      	adds	r3, #152	; 0x98
 8000262:	4618      	mov	r0, r3
 8000264:	f000 fca8 	bl	8000bb8 <HAL_SHN_Init>
				ADC->Init.Instance->CR2 |= CONTINOUS_CONV;
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800026e:	689a      	ldr	r2, [r3, #8]
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000276:	f042 0202 	orr.w	r2, r2, #2
 800027a:	609a      	str	r2, [r3, #8]
				ADC->Init.Sample_Time=ADC->Sample_Time[0];
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	689a      	ldr	r2, [r3, #8]
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
				break;
 8000286:	e004      	b.n	8000292 <HAL_ADC_Init+0x76>
			case HAL_ADC_MCHN_SN_CONV:
				HAL_MULT_SING_Init(ADC);
 8000288:	6878      	ldr	r0, [r7, #4]
 800028a:	f000 fcdf 	bl	8000c4c <HAL_MULT_SING_Init>
				break;
 800028e:	e000      	b.n	8000292 <HAL_ADC_Init+0x76>
			case HAL_ADC_MCHN_AUTO_CONV:

				break;
 8000290:	bf00      	nop
		}
	}else{

	}
}
 8000292:	bf00      	nop
 8000294:	3708      	adds	r7, #8
 8000296:	46bd      	mov	sp, r7
 8000298:	bd80      	pop	{r7, pc}
 800029a:	bf00      	nop

0800029c <HAL_ADC_WTD_EN>:

static void HAL_ADC_WTD_EN(ADC_CH_t *Channel,uint32_t Channel_NO)
{
 800029c:	b480      	push	{r7}
 800029e:	b083      	sub	sp, #12
 80002a0:	af00      	add	r7, sp, #0
 80002a2:	6078      	str	r0, [r7, #4]
 80002a4:	6039      	str	r1, [r7, #0]
	switch (Channel->Watchdog_EN) {
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	68db      	ldr	r3, [r3, #12]
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d002      	beq.n	80002b4 <HAL_ADC_WTD_EN+0x18>
 80002ae:	2b01      	cmp	r3, #1
 80002b0:	d01b      	beq.n	80002ea <HAL_ADC_WTD_EN+0x4e>
			break;
		case HAL_WATCHDOG_DISABLE:
			Channel->Instance->CR1 &= AWDEN_DIS_MSK;
			break;
		default:
			break;
 80002b2:	e023      	b.n	80002fc <HAL_ADC_WTD_EN+0x60>
			Channel->Instance->CR1 |= AWDEN_EN_MSK;
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	685a      	ldr	r2, [r3, #4]
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	681b      	ldr	r3, [r3, #0]
 80002be:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80002c2:	605a      	str	r2, [r3, #4]
			Channel->Instance->CR1 |= Channel_NO;
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	6859      	ldr	r1, [r3, #4]
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	681b      	ldr	r3, [r3, #0]
 80002ce:	683a      	ldr	r2, [r7, #0]
 80002d0:	430a      	orrs	r2, r1
 80002d2:	605a      	str	r2, [r3, #4]
			Channel->Instance->HTR =Channel->Watchog_High;
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	681b      	ldr	r3, [r3, #0]
 80002d8:	687a      	ldr	r2, [r7, #4]
 80002da:	6912      	ldr	r2, [r2, #16]
 80002dc:	625a      	str	r2, [r3, #36]	; 0x24
			Channel->Instance->LTR =Channel->Watchdog_LOW;
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	681b      	ldr	r3, [r3, #0]
 80002e2:	687a      	ldr	r2, [r7, #4]
 80002e4:	6952      	ldr	r2, [r2, #20]
 80002e6:	629a      	str	r2, [r3, #40]	; 0x28
			break;
 80002e8:	e008      	b.n	80002fc <HAL_ADC_WTD_EN+0x60>
			Channel->Instance->CR1 &= AWDEN_DIS_MSK;
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	681b      	ldr	r3, [r3, #0]
 80002ee:	685a      	ldr	r2, [r3, #4]
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	681b      	ldr	r3, [r3, #0]
 80002f4:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 80002f8:	605a      	str	r2, [r3, #4]
			break;
 80002fa:	bf00      	nop
	}
}
 80002fc:	bf00      	nop
 80002fe:	370c      	adds	r7, #12
 8000300:	46bd      	mov	sp, r7
 8000302:	bc80      	pop	{r7}
 8000304:	4770      	bx	lr
	...

08000308 <HAL_ADC_CHN_SET>:

static void HAL_ADC_CHN_SET(ADC_CH_t *Channel) {
 8000308:	b580      	push	{r7, lr}
 800030a:	b086      	sub	sp, #24
 800030c:	af00      	add	r7, sp, #0
 800030e:	6078      	str	r0, [r7, #4]
	GPIO_t GPIO_IN;
	GPIO_IN.Mode=HAL_GPIO_IN_AN;
 8000310:	2306      	movs	r3, #6
 8000312:	60bb      	str	r3, [r7, #8]

	switch (Channel->Channel_NO) {
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	685b      	ldr	r3, [r3, #4]
 8000318:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800031c:	f000 81c1 	beq.w	80006a2 <HAL_ADC_CHN_SET+0x39a>
 8000320:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000324:	f200 81cc 	bhi.w	80006c0 <HAL_ADC_CHN_SET+0x3b8>
 8000328:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800032c:	f000 81aa 	beq.w	8000684 <HAL_ADC_CHN_SET+0x37c>
 8000330:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000334:	f200 81c4 	bhi.w	80006c0 <HAL_ADC_CHN_SET+0x3b8>
 8000338:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800033c:	f000 8193 	beq.w	8000666 <HAL_ADC_CHN_SET+0x35e>
 8000340:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000344:	f200 81bc 	bhi.w	80006c0 <HAL_ADC_CHN_SET+0x3b8>
 8000348:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800034c:	f000 817c 	beq.w	8000648 <HAL_ADC_CHN_SET+0x340>
 8000350:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000354:	f200 81b4 	bhi.w	80006c0 <HAL_ADC_CHN_SET+0x3b8>
 8000358:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800035c:	f000 8165 	beq.w	800062a <HAL_ADC_CHN_SET+0x322>
 8000360:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000364:	f200 81ac 	bhi.w	80006c0 <HAL_ADC_CHN_SET+0x3b8>
 8000368:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800036c:	f000 814f 	beq.w	800060e <HAL_ADC_CHN_SET+0x306>
 8000370:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000374:	f200 81a4 	bhi.w	80006c0 <HAL_ADC_CHN_SET+0x3b8>
 8000378:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800037c:	f000 8130 	beq.w	80005e0 <HAL_ADC_CHN_SET+0x2d8>
 8000380:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000384:	f200 819c 	bhi.w	80006c0 <HAL_ADC_CHN_SET+0x3b8>
 8000388:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800038c:	f000 8111 	beq.w	80005b2 <HAL_ADC_CHN_SET+0x2aa>
 8000390:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000394:	f200 8194 	bhi.w	80006c0 <HAL_ADC_CHN_SET+0x3b8>
 8000398:	2b80      	cmp	r3, #128	; 0x80
 800039a:	f000 80f3 	beq.w	8000584 <HAL_ADC_CHN_SET+0x27c>
 800039e:	2b80      	cmp	r3, #128	; 0x80
 80003a0:	f200 818e 	bhi.w	80006c0 <HAL_ADC_CHN_SET+0x3b8>
 80003a4:	2b20      	cmp	r3, #32
 80003a6:	d849      	bhi.n	800043c <HAL_ADC_CHN_SET+0x134>
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	f000 8189 	beq.w	80006c0 <HAL_ADC_CHN_SET+0x3b8>
 80003ae:	3b01      	subs	r3, #1
 80003b0:	2b1f      	cmp	r3, #31
 80003b2:	f200 8185 	bhi.w	80006c0 <HAL_ADC_CHN_SET+0x3b8>
 80003b6:	a201      	add	r2, pc, #4	; (adr r2, 80003bc <HAL_ADC_CHN_SET+0xb4>)
 80003b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003bc:	08000445 	.word	0x08000445
 80003c0:	08000471 	.word	0x08000471
 80003c4:	080006c1 	.word	0x080006c1
 80003c8:	0800049f 	.word	0x0800049f
 80003cc:	080006c1 	.word	0x080006c1
 80003d0:	080006c1 	.word	0x080006c1
 80003d4:	080006c1 	.word	0x080006c1
 80003d8:	080004cd 	.word	0x080004cd
 80003dc:	080006c1 	.word	0x080006c1
 80003e0:	080006c1 	.word	0x080006c1
 80003e4:	080006c1 	.word	0x080006c1
 80003e8:	080006c1 	.word	0x080006c1
 80003ec:	080006c1 	.word	0x080006c1
 80003f0:	080006c1 	.word	0x080006c1
 80003f4:	080006c1 	.word	0x080006c1
 80003f8:	080004fb 	.word	0x080004fb
 80003fc:	080006c1 	.word	0x080006c1
 8000400:	080006c1 	.word	0x080006c1
 8000404:	080006c1 	.word	0x080006c1
 8000408:	080006c1 	.word	0x080006c1
 800040c:	080006c1 	.word	0x080006c1
 8000410:	080006c1 	.word	0x080006c1
 8000414:	080006c1 	.word	0x080006c1
 8000418:	080006c1 	.word	0x080006c1
 800041c:	080006c1 	.word	0x080006c1
 8000420:	080006c1 	.word	0x080006c1
 8000424:	080006c1 	.word	0x080006c1
 8000428:	080006c1 	.word	0x080006c1
 800042c:	080006c1 	.word	0x080006c1
 8000430:	080006c1 	.word	0x080006c1
 8000434:	080006c1 	.word	0x080006c1
 8000438:	08000529 	.word	0x08000529
 800043c:	2b40      	cmp	r3, #64	; 0x40
 800043e:	f000 808a 	beq.w	8000556 <HAL_ADC_CHN_SET+0x24e>
			HAL_ADC_WTD_EN(Channel, AWDCH_CHN_15);
			Channel->Instance->SQR3  = AWDCH_CHN_15;
			Channel->Instance->SMPR1 = (Channel->Sample_Time<<15);
			break;
	}
}
 8000442:	e13d      	b.n	80006c0 <HAL_ADC_CHN_SET+0x3b8>
			HAL_ADC_WTD_EN(Channel, AWDCH_CHN_0);
 8000444:	2100      	movs	r1, #0
 8000446:	6878      	ldr	r0, [r7, #4]
 8000448:	f7ff ff28 	bl	800029c <HAL_ADC_WTD_EN>
			Channel->Instance->SQR3 = AWDCH_CHN_0;
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	2200      	movs	r2, #0
 8000452:	635a      	str	r2, [r3, #52]	; 0x34
			Channel->Instance->SMPR2 = (Channel->Sample_Time<<0);
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	687a      	ldr	r2, [r7, #4]
 800045a:	6992      	ldr	r2, [r2, #24]
 800045c:	611a      	str	r2, [r3, #16]
			GPIO_IN.PIN = GPIO_PIN_0;
 800045e:	2300      	movs	r3, #0
 8000460:	613b      	str	r3, [r7, #16]
			HAL_Init_PIN(GPIOA,&GPIO_IN);
 8000462:	f107 0308 	add.w	r3, r7, #8
 8000466:	4619      	mov	r1, r3
 8000468:	4897      	ldr	r0, [pc, #604]	; (80006c8 <HAL_ADC_CHN_SET+0x3c0>)
 800046a:	f000 fd11 	bl	8000e90 <HAL_Init_PIN>
			break;
 800046e:	e127      	b.n	80006c0 <HAL_ADC_CHN_SET+0x3b8>
			HAL_ADC_WTD_EN(Channel, AWDCH_CHN_1);
 8000470:	2101      	movs	r1, #1
 8000472:	6878      	ldr	r0, [r7, #4]
 8000474:	f7ff ff12 	bl	800029c <HAL_ADC_WTD_EN>
			Channel->Instance->SQR3 = AWDCH_CHN_1;
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	2201      	movs	r2, #1
 800047e:	635a      	str	r2, [r3, #52]	; 0x34
			Channel->Instance->SMPR2 = (Channel->Sample_Time<<3);
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	699a      	ldr	r2, [r3, #24]
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	00d2      	lsls	r2, r2, #3
 800048a:	611a      	str	r2, [r3, #16]
			GPIO_IN.PIN = GPIO_PIN_1;
 800048c:	2301      	movs	r3, #1
 800048e:	613b      	str	r3, [r7, #16]
			HAL_Init_PIN(GPIOA,&GPIO_IN);
 8000490:	f107 0308 	add.w	r3, r7, #8
 8000494:	4619      	mov	r1, r3
 8000496:	488c      	ldr	r0, [pc, #560]	; (80006c8 <HAL_ADC_CHN_SET+0x3c0>)
 8000498:	f000 fcfa 	bl	8000e90 <HAL_Init_PIN>
			break;
 800049c:	e110      	b.n	80006c0 <HAL_ADC_CHN_SET+0x3b8>
			HAL_ADC_WTD_EN(Channel, AWDCH_CHN_2);
 800049e:	2102      	movs	r1, #2
 80004a0:	6878      	ldr	r0, [r7, #4]
 80004a2:	f7ff fefb 	bl	800029c <HAL_ADC_WTD_EN>
			Channel->Instance->SQR3 = AWDCH_CHN_2;
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	681b      	ldr	r3, [r3, #0]
 80004aa:	2202      	movs	r2, #2
 80004ac:	635a      	str	r2, [r3, #52]	; 0x34
			Channel->Instance->SMPR2 = (Channel->Sample_Time<<6);
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	699a      	ldr	r2, [r3, #24]
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	0192      	lsls	r2, r2, #6
 80004b8:	611a      	str	r2, [r3, #16]
			GPIO_IN.PIN = GPIO_PIN_2;
 80004ba:	2302      	movs	r3, #2
 80004bc:	613b      	str	r3, [r7, #16]
			HAL_Init_PIN(GPIOA,&GPIO_IN);
 80004be:	f107 0308 	add.w	r3, r7, #8
 80004c2:	4619      	mov	r1, r3
 80004c4:	4880      	ldr	r0, [pc, #512]	; (80006c8 <HAL_ADC_CHN_SET+0x3c0>)
 80004c6:	f000 fce3 	bl	8000e90 <HAL_Init_PIN>
			break;
 80004ca:	e0f9      	b.n	80006c0 <HAL_ADC_CHN_SET+0x3b8>
			HAL_ADC_WTD_EN(Channel, AWDCH_CHN_3);
 80004cc:	2103      	movs	r1, #3
 80004ce:	6878      	ldr	r0, [r7, #4]
 80004d0:	f7ff fee4 	bl	800029c <HAL_ADC_WTD_EN>
			Channel->Instance->SQR3 = AWDCH_CHN_3;
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	2203      	movs	r2, #3
 80004da:	635a      	str	r2, [r3, #52]	; 0x34
			Channel->Instance->SMPR2 = (Channel->Sample_Time<<9);
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	699a      	ldr	r2, [r3, #24]
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	0252      	lsls	r2, r2, #9
 80004e6:	611a      	str	r2, [r3, #16]
			GPIO_IN.PIN = GPIO_PIN_3;
 80004e8:	2303      	movs	r3, #3
 80004ea:	613b      	str	r3, [r7, #16]
			HAL_Init_PIN(GPIOA,&GPIO_IN);
 80004ec:	f107 0308 	add.w	r3, r7, #8
 80004f0:	4619      	mov	r1, r3
 80004f2:	4875      	ldr	r0, [pc, #468]	; (80006c8 <HAL_ADC_CHN_SET+0x3c0>)
 80004f4:	f000 fccc 	bl	8000e90 <HAL_Init_PIN>
			break;
 80004f8:	e0e2      	b.n	80006c0 <HAL_ADC_CHN_SET+0x3b8>
			HAL_ADC_WTD_EN(Channel, AWDCH_CHN_4);
 80004fa:	2104      	movs	r1, #4
 80004fc:	6878      	ldr	r0, [r7, #4]
 80004fe:	f7ff fecd 	bl	800029c <HAL_ADC_WTD_EN>
			Channel->Instance->SQR3 = AWDCH_CHN_4;
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	2204      	movs	r2, #4
 8000508:	635a      	str	r2, [r3, #52]	; 0x34
			Channel->Instance->SMPR2 = (Channel->Sample_Time<<12);
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	699a      	ldr	r2, [r3, #24]
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	0312      	lsls	r2, r2, #12
 8000514:	611a      	str	r2, [r3, #16]
			GPIO_IN.PIN = GPIO_PIN_4;
 8000516:	2304      	movs	r3, #4
 8000518:	613b      	str	r3, [r7, #16]
			HAL_Init_PIN(GPIOA,&GPIO_IN);
 800051a:	f107 0308 	add.w	r3, r7, #8
 800051e:	4619      	mov	r1, r3
 8000520:	4869      	ldr	r0, [pc, #420]	; (80006c8 <HAL_ADC_CHN_SET+0x3c0>)
 8000522:	f000 fcb5 	bl	8000e90 <HAL_Init_PIN>
			break;
 8000526:	e0cb      	b.n	80006c0 <HAL_ADC_CHN_SET+0x3b8>
			HAL_ADC_WTD_EN(Channel, AWDCH_CHN_5);
 8000528:	2105      	movs	r1, #5
 800052a:	6878      	ldr	r0, [r7, #4]
 800052c:	f7ff feb6 	bl	800029c <HAL_ADC_WTD_EN>
			Channel->Instance->SQR3 = AWDCH_CHN_5;
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	2205      	movs	r2, #5
 8000536:	635a      	str	r2, [r3, #52]	; 0x34
			Channel->Instance->SMPR2 = (Channel->Sample_Time<<15);
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	699a      	ldr	r2, [r3, #24]
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	03d2      	lsls	r2, r2, #15
 8000542:	611a      	str	r2, [r3, #16]
			GPIO_IN.PIN = GPIO_PIN_5;
 8000544:	2305      	movs	r3, #5
 8000546:	613b      	str	r3, [r7, #16]
			HAL_Init_PIN(GPIOA,&GPIO_IN);
 8000548:	f107 0308 	add.w	r3, r7, #8
 800054c:	4619      	mov	r1, r3
 800054e:	485e      	ldr	r0, [pc, #376]	; (80006c8 <HAL_ADC_CHN_SET+0x3c0>)
 8000550:	f000 fc9e 	bl	8000e90 <HAL_Init_PIN>
			break;
 8000554:	e0b4      	b.n	80006c0 <HAL_ADC_CHN_SET+0x3b8>
			HAL_ADC_WTD_EN(Channel, AWDCH_CHN_6);
 8000556:	2106      	movs	r1, #6
 8000558:	6878      	ldr	r0, [r7, #4]
 800055a:	f7ff fe9f 	bl	800029c <HAL_ADC_WTD_EN>
			Channel->Instance->SQR3 = AWDCH_CHN_6;
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	2206      	movs	r2, #6
 8000564:	635a      	str	r2, [r3, #52]	; 0x34
			Channel->Instance->SMPR2 = (Channel->Sample_Time<<18);
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	699a      	ldr	r2, [r3, #24]
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	0492      	lsls	r2, r2, #18
 8000570:	611a      	str	r2, [r3, #16]
			GPIO_IN.PIN = GPIO_PIN_6;
 8000572:	2306      	movs	r3, #6
 8000574:	613b      	str	r3, [r7, #16]
			HAL_Init_PIN(GPIOA,&GPIO_IN);
 8000576:	f107 0308 	add.w	r3, r7, #8
 800057a:	4619      	mov	r1, r3
 800057c:	4852      	ldr	r0, [pc, #328]	; (80006c8 <HAL_ADC_CHN_SET+0x3c0>)
 800057e:	f000 fc87 	bl	8000e90 <HAL_Init_PIN>
			break;
 8000582:	e09d      	b.n	80006c0 <HAL_ADC_CHN_SET+0x3b8>
			HAL_ADC_WTD_EN(Channel, AWDCH_CHN_7);
 8000584:	2107      	movs	r1, #7
 8000586:	6878      	ldr	r0, [r7, #4]
 8000588:	f7ff fe88 	bl	800029c <HAL_ADC_WTD_EN>
			Channel->Instance->SQR3 = AWDCH_CHN_7;
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	2207      	movs	r2, #7
 8000592:	635a      	str	r2, [r3, #52]	; 0x34
			Channel->Instance->SMPR2 = (Channel->Sample_Time<<21);
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	699a      	ldr	r2, [r3, #24]
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	0552      	lsls	r2, r2, #21
 800059e:	611a      	str	r2, [r3, #16]
			GPIO_IN.PIN = GPIO_PIN_7;
 80005a0:	2307      	movs	r3, #7
 80005a2:	613b      	str	r3, [r7, #16]
			HAL_Init_PIN(GPIOA,&GPIO_IN);
 80005a4:	f107 0308 	add.w	r3, r7, #8
 80005a8:	4619      	mov	r1, r3
 80005aa:	4847      	ldr	r0, [pc, #284]	; (80006c8 <HAL_ADC_CHN_SET+0x3c0>)
 80005ac:	f000 fc70 	bl	8000e90 <HAL_Init_PIN>
			break;
 80005b0:	e086      	b.n	80006c0 <HAL_ADC_CHN_SET+0x3b8>
			HAL_ADC_WTD_EN(Channel, AWDCH_CHN_8);
 80005b2:	2108      	movs	r1, #8
 80005b4:	6878      	ldr	r0, [r7, #4]
 80005b6:	f7ff fe71 	bl	800029c <HAL_ADC_WTD_EN>
			Channel->Instance->SQR3 = AWDCH_CHN_8;
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	2208      	movs	r2, #8
 80005c0:	635a      	str	r2, [r3, #52]	; 0x34
			Channel->Instance->SMPR2 = (Channel->Sample_Time<<24);
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	699a      	ldr	r2, [r3, #24]
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	0612      	lsls	r2, r2, #24
 80005cc:	611a      	str	r2, [r3, #16]
			GPIO_IN.PIN = GPIO_PIN_0;
 80005ce:	2300      	movs	r3, #0
 80005d0:	613b      	str	r3, [r7, #16]
			HAL_Init_PIN(GPIOB,&GPIO_IN);
 80005d2:	f107 0308 	add.w	r3, r7, #8
 80005d6:	4619      	mov	r1, r3
 80005d8:	483c      	ldr	r0, [pc, #240]	; (80006cc <HAL_ADC_CHN_SET+0x3c4>)
 80005da:	f000 fc59 	bl	8000e90 <HAL_Init_PIN>
			break;
 80005de:	e06f      	b.n	80006c0 <HAL_ADC_CHN_SET+0x3b8>
			HAL_ADC_WTD_EN(Channel, AWDCH_CHN_9);
 80005e0:	2109      	movs	r1, #9
 80005e2:	6878      	ldr	r0, [r7, #4]
 80005e4:	f7ff fe5a 	bl	800029c <HAL_ADC_WTD_EN>
			Channel->Instance->SQR3 = AWDCH_CHN_9;
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	2209      	movs	r2, #9
 80005ee:	635a      	str	r2, [r3, #52]	; 0x34
			Channel->Instance->SMPR2 = (Channel->Sample_Time<<27);
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	699a      	ldr	r2, [r3, #24]
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	06d2      	lsls	r2, r2, #27
 80005fa:	611a      	str	r2, [r3, #16]
			GPIO_IN.PIN = GPIO_PIN_1;
 80005fc:	2301      	movs	r3, #1
 80005fe:	613b      	str	r3, [r7, #16]
			HAL_Init_PIN(GPIOB,&GPIO_IN);
 8000600:	f107 0308 	add.w	r3, r7, #8
 8000604:	4619      	mov	r1, r3
 8000606:	4831      	ldr	r0, [pc, #196]	; (80006cc <HAL_ADC_CHN_SET+0x3c4>)
 8000608:	f000 fc42 	bl	8000e90 <HAL_Init_PIN>
			break;
 800060c:	e058      	b.n	80006c0 <HAL_ADC_CHN_SET+0x3b8>
			HAL_ADC_WTD_EN(Channel, AWDCH_CHN_10);
 800060e:	210a      	movs	r1, #10
 8000610:	6878      	ldr	r0, [r7, #4]
 8000612:	f7ff fe43 	bl	800029c <HAL_ADC_WTD_EN>
			Channel->Instance->SQR3 = AWDCH_CHN_10;
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	220a      	movs	r2, #10
 800061c:	635a      	str	r2, [r3, #52]	; 0x34
			Channel->Instance->SMPR1 = (Channel->Sample_Time<<0);
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	687a      	ldr	r2, [r7, #4]
 8000624:	6992      	ldr	r2, [r2, #24]
 8000626:	60da      	str	r2, [r3, #12]
			break;
 8000628:	e04a      	b.n	80006c0 <HAL_ADC_CHN_SET+0x3b8>
			HAL_ADC_WTD_EN(Channel, AWDCH_CHN_11);
 800062a:	210b      	movs	r1, #11
 800062c:	6878      	ldr	r0, [r7, #4]
 800062e:	f7ff fe35 	bl	800029c <HAL_ADC_WTD_EN>
			Channel->Instance->SQR3 = AWDCH_CHN_11;
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	220b      	movs	r2, #11
 8000638:	635a      	str	r2, [r3, #52]	; 0x34
			Channel->Instance->SMPR1 = (Channel->Sample_Time<<3);
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	699a      	ldr	r2, [r3, #24]
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	00d2      	lsls	r2, r2, #3
 8000644:	60da      	str	r2, [r3, #12]
			break;
 8000646:	e03b      	b.n	80006c0 <HAL_ADC_CHN_SET+0x3b8>
			HAL_ADC_WTD_EN(Channel, AWDCH_CHN_12);
 8000648:	210c      	movs	r1, #12
 800064a:	6878      	ldr	r0, [r7, #4]
 800064c:	f7ff fe26 	bl	800029c <HAL_ADC_WTD_EN>
			Channel->Instance->SQR3 = AWDCH_CHN_12;
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	220c      	movs	r2, #12
 8000656:	635a      	str	r2, [r3, #52]	; 0x34
			Channel->Instance->SMPR1 = (Channel->Sample_Time<<6);
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	699a      	ldr	r2, [r3, #24]
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	0192      	lsls	r2, r2, #6
 8000662:	60da      	str	r2, [r3, #12]
			break;
 8000664:	e02c      	b.n	80006c0 <HAL_ADC_CHN_SET+0x3b8>
			HAL_ADC_WTD_EN(Channel, AWDCH_CHN_13);
 8000666:	210d      	movs	r1, #13
 8000668:	6878      	ldr	r0, [r7, #4]
 800066a:	f7ff fe17 	bl	800029c <HAL_ADC_WTD_EN>
			Channel->Instance->SQR3 = AWDCH_CHN_13;
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	220d      	movs	r2, #13
 8000674:	635a      	str	r2, [r3, #52]	; 0x34
			Channel->Instance->SMPR1 = (Channel->Sample_Time<<9);
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	699a      	ldr	r2, [r3, #24]
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	0252      	lsls	r2, r2, #9
 8000680:	60da      	str	r2, [r3, #12]
			break;
 8000682:	e01d      	b.n	80006c0 <HAL_ADC_CHN_SET+0x3b8>
			HAL_ADC_WTD_EN(Channel, AWDCH_CHN_14);
 8000684:	210e      	movs	r1, #14
 8000686:	6878      	ldr	r0, [r7, #4]
 8000688:	f7ff fe08 	bl	800029c <HAL_ADC_WTD_EN>
			Channel->Instance->SQR3 = AWDCH_CHN_14;
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	220e      	movs	r2, #14
 8000692:	635a      	str	r2, [r3, #52]	; 0x34
			Channel->Instance->SMPR1 = (Channel->Sample_Time<<12);
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	699a      	ldr	r2, [r3, #24]
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	0312      	lsls	r2, r2, #12
 800069e:	60da      	str	r2, [r3, #12]
			break;
 80006a0:	e00e      	b.n	80006c0 <HAL_ADC_CHN_SET+0x3b8>
			HAL_ADC_WTD_EN(Channel, AWDCH_CHN_15);
 80006a2:	210f      	movs	r1, #15
 80006a4:	6878      	ldr	r0, [r7, #4]
 80006a6:	f7ff fdf9 	bl	800029c <HAL_ADC_WTD_EN>
			Channel->Instance->SQR3  = AWDCH_CHN_15;
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	220f      	movs	r2, #15
 80006b0:	635a      	str	r2, [r3, #52]	; 0x34
			Channel->Instance->SMPR1 = (Channel->Sample_Time<<15);
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	699a      	ldr	r2, [r3, #24]
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	03d2      	lsls	r2, r2, #15
 80006bc:	60da      	str	r2, [r3, #12]
			break;
 80006be:	bf00      	nop
}
 80006c0:	bf00      	nop
 80006c2:	3718      	adds	r7, #24
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	40010800 	.word	0x40010800
 80006cc:	40010c00 	.word	0x40010c00

080006d0 <HAL_SHN_ALLGN_SET>:

static void HAL_SHN_ALLGN_SET(ADC_CH_t *Channel)
{
 80006d0:	b480      	push	{r7}
 80006d2:	b083      	sub	sp, #12
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
	switch (Channel->Alignment) {
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	689b      	ldr	r3, [r3, #8]
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d002      	beq.n	80006e6 <HAL_SHN_ALLGN_SET+0x16>
 80006e0:	2b01      	cmp	r3, #1
 80006e2:	d009      	beq.n	80006f8 <HAL_SHN_ALLGN_SET+0x28>
			break;
		case HAL_ADC_ALLIGNMENT_RIGHT:
			Channel->Instance->CR2 &= ALLIGN_RIGH_MSK;
			break;
	}
}
 80006e4:	e011      	b.n	800070a <HAL_SHN_ALLGN_SET+0x3a>
			Channel->Instance->CR2 |= ALLIGN_LEFT_MSK;
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	689a      	ldr	r2, [r3, #8]
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80006f4:	609a      	str	r2, [r3, #8]
			break;
 80006f6:	e008      	b.n	800070a <HAL_SHN_ALLGN_SET+0x3a>
			Channel->Instance->CR2 &= ALLIGN_RIGH_MSK;
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	689a      	ldr	r2, [r3, #8]
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000706:	609a      	str	r2, [r3, #8]
			break;
 8000708:	bf00      	nop
}
 800070a:	bf00      	nop
 800070c:	370c      	adds	r7, #12
 800070e:	46bd      	mov	sp, r7
 8000710:	bc80      	pop	{r7}
 8000712:	4770      	bx	lr

08000714 <HAL_ADC_MULTCHN_SET>:

static void HAL_ADC_MULTCHN_SET(ADC_init_t *Channel,uint8_t POS) {
 8000714:	b580      	push	{r7, lr}
 8000716:	b088      	sub	sp, #32
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
 800071c:	460b      	mov	r3, r1
 800071e:	70fb      	strb	r3, [r7, #3]

	GPIO_t GPIO_IN;
	GPIO_IN.Mode=HAL_GPIO_IN_AN;
 8000720:	2306      	movs	r3, #6
 8000722:	60bb      	str	r3, [r7, #8]
	volatile uint32_t *CONFIG_REG=NULL;
 8000724:	2300      	movs	r3, #0
 8000726:	61fb      	str	r3, [r7, #28]
	uint32_t OFFSET=0;
 8000728:	2300      	movs	r3, #0
 800072a:	61bb      	str	r3, [r7, #24]
	CONFIG_REG=(POS<=6)?&Channel->Init.Instance->SQR3:(POS>6 && POS<=12)?&Channel->Init.Instance->SQR2:&Channel->Init.Instance->SQR1;
 800072c:	78fb      	ldrb	r3, [r7, #3]
 800072e:	2b06      	cmp	r3, #6
 8000730:	d804      	bhi.n	800073c <HAL_ADC_MULTCHN_SET+0x28>
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000738:	3334      	adds	r3, #52	; 0x34
 800073a:	e00e      	b.n	800075a <HAL_ADC_MULTCHN_SET+0x46>
 800073c:	78fb      	ldrb	r3, [r7, #3]
 800073e:	2b06      	cmp	r3, #6
 8000740:	d907      	bls.n	8000752 <HAL_ADC_MULTCHN_SET+0x3e>
 8000742:	78fb      	ldrb	r3, [r7, #3]
 8000744:	2b0c      	cmp	r3, #12
 8000746:	d804      	bhi.n	8000752 <HAL_ADC_MULTCHN_SET+0x3e>
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800074e:	3330      	adds	r3, #48	; 0x30
 8000750:	e003      	b.n	800075a <HAL_ADC_MULTCHN_SET+0x46>
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000758:	332c      	adds	r3, #44	; 0x2c
 800075a:	61fb      	str	r3, [r7, #28]
	OFFSET=(POS<=6)?POS:(POS>6 && POS<=12)?POS-6:POS-13;
 800075c:	78fb      	ldrb	r3, [r7, #3]
 800075e:	2b06      	cmp	r3, #6
 8000760:	d801      	bhi.n	8000766 <HAL_ADC_MULTCHN_SET+0x52>
 8000762:	78fb      	ldrb	r3, [r7, #3]
 8000764:	e00a      	b.n	800077c <HAL_ADC_MULTCHN_SET+0x68>
 8000766:	78fb      	ldrb	r3, [r7, #3]
 8000768:	2b06      	cmp	r3, #6
 800076a:	d905      	bls.n	8000778 <HAL_ADC_MULTCHN_SET+0x64>
 800076c:	78fb      	ldrb	r3, [r7, #3]
 800076e:	2b0c      	cmp	r3, #12
 8000770:	d802      	bhi.n	8000778 <HAL_ADC_MULTCHN_SET+0x64>
 8000772:	78fb      	ldrb	r3, [r7, #3]
 8000774:	3b06      	subs	r3, #6
 8000776:	e001      	b.n	800077c <HAL_ADC_MULTCHN_SET+0x68>
 8000778:	78fb      	ldrb	r3, [r7, #3]
 800077a:	3b0d      	subs	r3, #13
 800077c:	61bb      	str	r3, [r7, #24]

	switch (Channel->CHANNEL_POS[POS]) {
 800077e:	78fa      	ldrb	r2, [r7, #3]
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	3214      	adds	r2, #20
 8000784:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000788:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800078c:	f000 81f8 	beq.w	8000b80 <HAL_ADC_MULTCHN_SET+0x46c>
 8000790:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000794:	f200 8207 	bhi.w	8000ba6 <HAL_ADC_MULTCHN_SET+0x492>
 8000798:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800079c:	f000 81dd 	beq.w	8000b5a <HAL_ADC_MULTCHN_SET+0x446>
 80007a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80007a4:	f200 81ff 	bhi.w	8000ba6 <HAL_ADC_MULTCHN_SET+0x492>
 80007a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80007ac:	f000 81c2 	beq.w	8000b34 <HAL_ADC_MULTCHN_SET+0x420>
 80007b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80007b4:	f200 81f7 	bhi.w	8000ba6 <HAL_ADC_MULTCHN_SET+0x492>
 80007b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80007bc:	f000 81a7 	beq.w	8000b0e <HAL_ADC_MULTCHN_SET+0x3fa>
 80007c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80007c4:	f200 81ef 	bhi.w	8000ba6 <HAL_ADC_MULTCHN_SET+0x492>
 80007c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80007cc:	f000 818c 	beq.w	8000ae8 <HAL_ADC_MULTCHN_SET+0x3d4>
 80007d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80007d4:	f200 81e7 	bhi.w	8000ba6 <HAL_ADC_MULTCHN_SET+0x492>
 80007d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80007dc:	f000 8172 	beq.w	8000ac4 <HAL_ADC_MULTCHN_SET+0x3b0>
 80007e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80007e4:	f200 81df 	bhi.w	8000ba6 <HAL_ADC_MULTCHN_SET+0x492>
 80007e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80007ec:	f000 814f 	beq.w	8000a8e <HAL_ADC_MULTCHN_SET+0x37a>
 80007f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80007f4:	f200 81d7 	bhi.w	8000ba6 <HAL_ADC_MULTCHN_SET+0x492>
 80007f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80007fc:	f000 812c 	beq.w	8000a58 <HAL_ADC_MULTCHN_SET+0x344>
 8000800:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000804:	f200 81cf 	bhi.w	8000ba6 <HAL_ADC_MULTCHN_SET+0x492>
 8000808:	2b80      	cmp	r3, #128	; 0x80
 800080a:	f000 810a 	beq.w	8000a22 <HAL_ADC_MULTCHN_SET+0x30e>
 800080e:	2b80      	cmp	r3, #128	; 0x80
 8000810:	f200 81c9 	bhi.w	8000ba6 <HAL_ADC_MULTCHN_SET+0x492>
 8000814:	2b20      	cmp	r3, #32
 8000816:	d849      	bhi.n	80008ac <HAL_ADC_MULTCHN_SET+0x198>
 8000818:	2b00      	cmp	r3, #0
 800081a:	f000 81c4 	beq.w	8000ba6 <HAL_ADC_MULTCHN_SET+0x492>
 800081e:	3b01      	subs	r3, #1
 8000820:	2b1f      	cmp	r3, #31
 8000822:	f200 81c0 	bhi.w	8000ba6 <HAL_ADC_MULTCHN_SET+0x492>
 8000826:	a201      	add	r2, pc, #4	; (adr r2, 800082c <HAL_ADC_MULTCHN_SET+0x118>)
 8000828:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800082c:	080008b5 	.word	0x080008b5
 8000830:	080008df 	.word	0x080008df
 8000834:	08000ba7 	.word	0x08000ba7
 8000838:	08000915 	.word	0x08000915
 800083c:	08000ba7 	.word	0x08000ba7
 8000840:	08000ba7 	.word	0x08000ba7
 8000844:	08000ba7 	.word	0x08000ba7
 8000848:	0800094b 	.word	0x0800094b
 800084c:	08000ba7 	.word	0x08000ba7
 8000850:	08000ba7 	.word	0x08000ba7
 8000854:	08000ba7 	.word	0x08000ba7
 8000858:	08000ba7 	.word	0x08000ba7
 800085c:	08000ba7 	.word	0x08000ba7
 8000860:	08000ba7 	.word	0x08000ba7
 8000864:	08000ba7 	.word	0x08000ba7
 8000868:	08000981 	.word	0x08000981
 800086c:	08000ba7 	.word	0x08000ba7
 8000870:	08000ba7 	.word	0x08000ba7
 8000874:	08000ba7 	.word	0x08000ba7
 8000878:	08000ba7 	.word	0x08000ba7
 800087c:	08000ba7 	.word	0x08000ba7
 8000880:	08000ba7 	.word	0x08000ba7
 8000884:	08000ba7 	.word	0x08000ba7
 8000888:	08000ba7 	.word	0x08000ba7
 800088c:	08000ba7 	.word	0x08000ba7
 8000890:	08000ba7 	.word	0x08000ba7
 8000894:	08000ba7 	.word	0x08000ba7
 8000898:	08000ba7 	.word	0x08000ba7
 800089c:	08000ba7 	.word	0x08000ba7
 80008a0:	08000ba7 	.word	0x08000ba7
 80008a4:	08000ba7 	.word	0x08000ba7
 80008a8:	080009b7 	.word	0x080009b7
 80008ac:	2b40      	cmp	r3, #64	; 0x40
 80008ae:	f000 809d 	beq.w	80009ec <HAL_ADC_MULTCHN_SET+0x2d8>

			*CONFIG_REG  = AWDCH_CHN_15<<5*OFFSET;
			Channel->Init.Instance->SMPR1 = (Channel->Sample_Time[POS]<<15);
			break;
	}
}
 80008b2:	e178      	b.n	8000ba6 <HAL_ADC_MULTCHN_SET+0x492>
			*CONFIG_REG = (AWDCH_CHN_0<<5*OFFSET);
 80008b4:	69fb      	ldr	r3, [r7, #28]
 80008b6:	2200      	movs	r2, #0
 80008b8:	601a      	str	r2, [r3, #0]
			Channel->Init.Instance->SMPR2 = (Channel->Sample_Time[POS]<<0);
 80008ba:	78f9      	ldrb	r1, [r7, #3]
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80008c2:	687a      	ldr	r2, [r7, #4]
 80008c4:	3102      	adds	r1, #2
 80008c6:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80008ca:	611a      	str	r2, [r3, #16]
			GPIO_IN.PIN = GPIO_PIN_0;
 80008cc:	2300      	movs	r3, #0
 80008ce:	613b      	str	r3, [r7, #16]
			HAL_Init_PIN(GPIOA,&GPIO_IN);
 80008d0:	f107 0308 	add.w	r3, r7, #8
 80008d4:	4619      	mov	r1, r3
 80008d6:	48b6      	ldr	r0, [pc, #728]	; (8000bb0 <HAL_ADC_MULTCHN_SET+0x49c>)
 80008d8:	f000 fada 	bl	8000e90 <HAL_Init_PIN>
			break;
 80008dc:	e163      	b.n	8000ba6 <HAL_ADC_MULTCHN_SET+0x492>
			*CONFIG_REG = AWDCH_CHN_1<<5*OFFSET;
 80008de:	69ba      	ldr	r2, [r7, #24]
 80008e0:	4613      	mov	r3, r2
 80008e2:	009b      	lsls	r3, r3, #2
 80008e4:	4413      	add	r3, r2
 80008e6:	2201      	movs	r2, #1
 80008e8:	409a      	lsls	r2, r3
 80008ea:	69fb      	ldr	r3, [r7, #28]
 80008ec:	601a      	str	r2, [r3, #0]
			Channel->Init.Instance->SMPR2 = (Channel->Sample_Time[POS]<<3);
 80008ee:	78fa      	ldrb	r2, [r7, #3]
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	3202      	adds	r2, #2
 80008f4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80008fe:	00d2      	lsls	r2, r2, #3
 8000900:	611a      	str	r2, [r3, #16]
			GPIO_IN.PIN = GPIO_PIN_1;
 8000902:	2301      	movs	r3, #1
 8000904:	613b      	str	r3, [r7, #16]
			HAL_Init_PIN(GPIOA,&GPIO_IN);
 8000906:	f107 0308 	add.w	r3, r7, #8
 800090a:	4619      	mov	r1, r3
 800090c:	48a8      	ldr	r0, [pc, #672]	; (8000bb0 <HAL_ADC_MULTCHN_SET+0x49c>)
 800090e:	f000 fabf 	bl	8000e90 <HAL_Init_PIN>
			break;
 8000912:	e148      	b.n	8000ba6 <HAL_ADC_MULTCHN_SET+0x492>
			*CONFIG_REG = AWDCH_CHN_2<<5*OFFSET;
 8000914:	69ba      	ldr	r2, [r7, #24]
 8000916:	4613      	mov	r3, r2
 8000918:	009b      	lsls	r3, r3, #2
 800091a:	4413      	add	r3, r2
 800091c:	2202      	movs	r2, #2
 800091e:	409a      	lsls	r2, r3
 8000920:	69fb      	ldr	r3, [r7, #28]
 8000922:	601a      	str	r2, [r3, #0]
			Channel->Init.Instance->SMPR2 = (Channel->Sample_Time[POS]<<6);
 8000924:	78fa      	ldrb	r2, [r7, #3]
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	3202      	adds	r2, #2
 800092a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000934:	0192      	lsls	r2, r2, #6
 8000936:	611a      	str	r2, [r3, #16]
			GPIO_IN.PIN = GPIO_PIN_2;
 8000938:	2302      	movs	r3, #2
 800093a:	613b      	str	r3, [r7, #16]
			HAL_Init_PIN(GPIOA,&GPIO_IN);
 800093c:	f107 0308 	add.w	r3, r7, #8
 8000940:	4619      	mov	r1, r3
 8000942:	489b      	ldr	r0, [pc, #620]	; (8000bb0 <HAL_ADC_MULTCHN_SET+0x49c>)
 8000944:	f000 faa4 	bl	8000e90 <HAL_Init_PIN>
			break;
 8000948:	e12d      	b.n	8000ba6 <HAL_ADC_MULTCHN_SET+0x492>
			*CONFIG_REG = AWDCH_CHN_3<<5*OFFSET;
 800094a:	69ba      	ldr	r2, [r7, #24]
 800094c:	4613      	mov	r3, r2
 800094e:	009b      	lsls	r3, r3, #2
 8000950:	4413      	add	r3, r2
 8000952:	2203      	movs	r2, #3
 8000954:	409a      	lsls	r2, r3
 8000956:	69fb      	ldr	r3, [r7, #28]
 8000958:	601a      	str	r2, [r3, #0]
			Channel->Init.Instance->SMPR2 = (Channel->Sample_Time[POS]<<9);
 800095a:	78fa      	ldrb	r2, [r7, #3]
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	3202      	adds	r2, #2
 8000960:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800096a:	0252      	lsls	r2, r2, #9
 800096c:	611a      	str	r2, [r3, #16]
			GPIO_IN.PIN = GPIO_PIN_3;
 800096e:	2303      	movs	r3, #3
 8000970:	613b      	str	r3, [r7, #16]
			HAL_Init_PIN(GPIOA,&GPIO_IN);
 8000972:	f107 0308 	add.w	r3, r7, #8
 8000976:	4619      	mov	r1, r3
 8000978:	488d      	ldr	r0, [pc, #564]	; (8000bb0 <HAL_ADC_MULTCHN_SET+0x49c>)
 800097a:	f000 fa89 	bl	8000e90 <HAL_Init_PIN>
			break;
 800097e:	e112      	b.n	8000ba6 <HAL_ADC_MULTCHN_SET+0x492>
			*CONFIG_REG = AWDCH_CHN_4<<5*OFFSET;
 8000980:	69ba      	ldr	r2, [r7, #24]
 8000982:	4613      	mov	r3, r2
 8000984:	009b      	lsls	r3, r3, #2
 8000986:	4413      	add	r3, r2
 8000988:	2204      	movs	r2, #4
 800098a:	409a      	lsls	r2, r3
 800098c:	69fb      	ldr	r3, [r7, #28]
 800098e:	601a      	str	r2, [r3, #0]
			Channel->Init.Instance->SMPR2 = (Channel->Sample_Time[POS]<<12);
 8000990:	78fa      	ldrb	r2, [r7, #3]
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	3202      	adds	r2, #2
 8000996:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80009a0:	0312      	lsls	r2, r2, #12
 80009a2:	611a      	str	r2, [r3, #16]
			GPIO_IN.PIN = GPIO_PIN_4;
 80009a4:	2304      	movs	r3, #4
 80009a6:	613b      	str	r3, [r7, #16]
			HAL_Init_PIN(GPIOA,&GPIO_IN);
 80009a8:	f107 0308 	add.w	r3, r7, #8
 80009ac:	4619      	mov	r1, r3
 80009ae:	4880      	ldr	r0, [pc, #512]	; (8000bb0 <HAL_ADC_MULTCHN_SET+0x49c>)
 80009b0:	f000 fa6e 	bl	8000e90 <HAL_Init_PIN>
			break;
 80009b4:	e0f7      	b.n	8000ba6 <HAL_ADC_MULTCHN_SET+0x492>
			*CONFIG_REG = AWDCH_CHN_5<<5*OFFSET;
 80009b6:	69ba      	ldr	r2, [r7, #24]
 80009b8:	4613      	mov	r3, r2
 80009ba:	009b      	lsls	r3, r3, #2
 80009bc:	4413      	add	r3, r2
 80009be:	2205      	movs	r2, #5
 80009c0:	409a      	lsls	r2, r3
 80009c2:	69fb      	ldr	r3, [r7, #28]
 80009c4:	601a      	str	r2, [r3, #0]
			Channel->Init.Instance->SMPR2 = (Channel->Sample_Time[POS]<<15);
 80009c6:	78fa      	ldrb	r2, [r7, #3]
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	3202      	adds	r2, #2
 80009cc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80009d6:	03d2      	lsls	r2, r2, #15
 80009d8:	611a      	str	r2, [r3, #16]
			GPIO_IN.PIN = GPIO_PIN_5;
 80009da:	2305      	movs	r3, #5
 80009dc:	613b      	str	r3, [r7, #16]
			HAL_Init_PIN(GPIOA,&GPIO_IN);
 80009de:	f107 0308 	add.w	r3, r7, #8
 80009e2:	4619      	mov	r1, r3
 80009e4:	4872      	ldr	r0, [pc, #456]	; (8000bb0 <HAL_ADC_MULTCHN_SET+0x49c>)
 80009e6:	f000 fa53 	bl	8000e90 <HAL_Init_PIN>
			break;
 80009ea:	e0dc      	b.n	8000ba6 <HAL_ADC_MULTCHN_SET+0x492>
			*CONFIG_REG = AWDCH_CHN_6<<5*OFFSET;
 80009ec:	69ba      	ldr	r2, [r7, #24]
 80009ee:	4613      	mov	r3, r2
 80009f0:	009b      	lsls	r3, r3, #2
 80009f2:	4413      	add	r3, r2
 80009f4:	2206      	movs	r2, #6
 80009f6:	409a      	lsls	r2, r3
 80009f8:	69fb      	ldr	r3, [r7, #28]
 80009fa:	601a      	str	r2, [r3, #0]
			Channel->Init.Instance->SMPR2 = (Channel->Sample_Time[POS]<<18);
 80009fc:	78fa      	ldrb	r2, [r7, #3]
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	3202      	adds	r2, #2
 8000a02:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000a0c:	0492      	lsls	r2, r2, #18
 8000a0e:	611a      	str	r2, [r3, #16]
			GPIO_IN.PIN = GPIO_PIN_6;
 8000a10:	2306      	movs	r3, #6
 8000a12:	613b      	str	r3, [r7, #16]
			HAL_Init_PIN(GPIOA,&GPIO_IN);
 8000a14:	f107 0308 	add.w	r3, r7, #8
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4865      	ldr	r0, [pc, #404]	; (8000bb0 <HAL_ADC_MULTCHN_SET+0x49c>)
 8000a1c:	f000 fa38 	bl	8000e90 <HAL_Init_PIN>
			break;
 8000a20:	e0c1      	b.n	8000ba6 <HAL_ADC_MULTCHN_SET+0x492>
			*CONFIG_REG = AWDCH_CHN_7<<5*OFFSET;
 8000a22:	69ba      	ldr	r2, [r7, #24]
 8000a24:	4613      	mov	r3, r2
 8000a26:	009b      	lsls	r3, r3, #2
 8000a28:	4413      	add	r3, r2
 8000a2a:	2207      	movs	r2, #7
 8000a2c:	409a      	lsls	r2, r3
 8000a2e:	69fb      	ldr	r3, [r7, #28]
 8000a30:	601a      	str	r2, [r3, #0]
			Channel->Init.Instance->SMPR2 = (Channel->Sample_Time[POS]<<21);
 8000a32:	78fa      	ldrb	r2, [r7, #3]
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	3202      	adds	r2, #2
 8000a38:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000a42:	0552      	lsls	r2, r2, #21
 8000a44:	611a      	str	r2, [r3, #16]
			GPIO_IN.PIN = GPIO_PIN_7;
 8000a46:	2307      	movs	r3, #7
 8000a48:	613b      	str	r3, [r7, #16]
			HAL_Init_PIN(GPIOA,&GPIO_IN);
 8000a4a:	f107 0308 	add.w	r3, r7, #8
 8000a4e:	4619      	mov	r1, r3
 8000a50:	4857      	ldr	r0, [pc, #348]	; (8000bb0 <HAL_ADC_MULTCHN_SET+0x49c>)
 8000a52:	f000 fa1d 	bl	8000e90 <HAL_Init_PIN>
			break;
 8000a56:	e0a6      	b.n	8000ba6 <HAL_ADC_MULTCHN_SET+0x492>
			*CONFIG_REG = AWDCH_CHN_8<<5*OFFSET;
 8000a58:	69ba      	ldr	r2, [r7, #24]
 8000a5a:	4613      	mov	r3, r2
 8000a5c:	009b      	lsls	r3, r3, #2
 8000a5e:	4413      	add	r3, r2
 8000a60:	2208      	movs	r2, #8
 8000a62:	409a      	lsls	r2, r3
 8000a64:	69fb      	ldr	r3, [r7, #28]
 8000a66:	601a      	str	r2, [r3, #0]
			Channel->Init.Instance->SMPR2 = (Channel->Sample_Time[POS]<<24);
 8000a68:	78fa      	ldrb	r2, [r7, #3]
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	3202      	adds	r2, #2
 8000a6e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000a78:	0612      	lsls	r2, r2, #24
 8000a7a:	611a      	str	r2, [r3, #16]
			GPIO_IN.PIN = GPIO_PIN_0;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	613b      	str	r3, [r7, #16]
			HAL_Init_PIN(GPIOB,&GPIO_IN);
 8000a80:	f107 0308 	add.w	r3, r7, #8
 8000a84:	4619      	mov	r1, r3
 8000a86:	484b      	ldr	r0, [pc, #300]	; (8000bb4 <HAL_ADC_MULTCHN_SET+0x4a0>)
 8000a88:	f000 fa02 	bl	8000e90 <HAL_Init_PIN>
			break;
 8000a8c:	e08b      	b.n	8000ba6 <HAL_ADC_MULTCHN_SET+0x492>
			*CONFIG_REG = AWDCH_CHN_9<<5*OFFSET;
 8000a8e:	69ba      	ldr	r2, [r7, #24]
 8000a90:	4613      	mov	r3, r2
 8000a92:	009b      	lsls	r3, r3, #2
 8000a94:	4413      	add	r3, r2
 8000a96:	2209      	movs	r2, #9
 8000a98:	409a      	lsls	r2, r3
 8000a9a:	69fb      	ldr	r3, [r7, #28]
 8000a9c:	601a      	str	r2, [r3, #0]
			Channel->Init.Instance->SMPR2 = (Channel->Sample_Time[POS]<<27);
 8000a9e:	78fa      	ldrb	r2, [r7, #3]
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	3202      	adds	r2, #2
 8000aa4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000aae:	06d2      	lsls	r2, r2, #27
 8000ab0:	611a      	str	r2, [r3, #16]
			GPIO_IN.PIN = GPIO_PIN_1;
 8000ab2:	2301      	movs	r3, #1
 8000ab4:	613b      	str	r3, [r7, #16]
			HAL_Init_PIN(GPIOB,&GPIO_IN);
 8000ab6:	f107 0308 	add.w	r3, r7, #8
 8000aba:	4619      	mov	r1, r3
 8000abc:	483d      	ldr	r0, [pc, #244]	; (8000bb4 <HAL_ADC_MULTCHN_SET+0x4a0>)
 8000abe:	f000 f9e7 	bl	8000e90 <HAL_Init_PIN>
			break;
 8000ac2:	e070      	b.n	8000ba6 <HAL_ADC_MULTCHN_SET+0x492>
			*CONFIG_REG = AWDCH_CHN_10<<5*OFFSET;
 8000ac4:	69ba      	ldr	r2, [r7, #24]
 8000ac6:	4613      	mov	r3, r2
 8000ac8:	009b      	lsls	r3, r3, #2
 8000aca:	4413      	add	r3, r2
 8000acc:	220a      	movs	r2, #10
 8000ace:	409a      	lsls	r2, r3
 8000ad0:	69fb      	ldr	r3, [r7, #28]
 8000ad2:	601a      	str	r2, [r3, #0]
			Channel->Init.Instance->SMPR1 = (Channel->Sample_Time[POS]<<0);
 8000ad4:	78f9      	ldrb	r1, [r7, #3]
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000adc:	687a      	ldr	r2, [r7, #4]
 8000ade:	3102      	adds	r1, #2
 8000ae0:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8000ae4:	60da      	str	r2, [r3, #12]
			break;
 8000ae6:	e05e      	b.n	8000ba6 <HAL_ADC_MULTCHN_SET+0x492>
			*CONFIG_REG = AWDCH_CHN_11<<5*OFFSET;
 8000ae8:	69ba      	ldr	r2, [r7, #24]
 8000aea:	4613      	mov	r3, r2
 8000aec:	009b      	lsls	r3, r3, #2
 8000aee:	4413      	add	r3, r2
 8000af0:	220b      	movs	r2, #11
 8000af2:	409a      	lsls	r2, r3
 8000af4:	69fb      	ldr	r3, [r7, #28]
 8000af6:	601a      	str	r2, [r3, #0]
			Channel->Init.Instance->SMPR1 = (Channel->Sample_Time[POS]<<3);
 8000af8:	78fa      	ldrb	r2, [r7, #3]
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	3202      	adds	r2, #2
 8000afe:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000b08:	00d2      	lsls	r2, r2, #3
 8000b0a:	60da      	str	r2, [r3, #12]
			break;
 8000b0c:	e04b      	b.n	8000ba6 <HAL_ADC_MULTCHN_SET+0x492>
			*CONFIG_REG = AWDCH_CHN_12<<5*OFFSET;
 8000b0e:	69ba      	ldr	r2, [r7, #24]
 8000b10:	4613      	mov	r3, r2
 8000b12:	009b      	lsls	r3, r3, #2
 8000b14:	4413      	add	r3, r2
 8000b16:	220c      	movs	r2, #12
 8000b18:	409a      	lsls	r2, r3
 8000b1a:	69fb      	ldr	r3, [r7, #28]
 8000b1c:	601a      	str	r2, [r3, #0]
			Channel->Init.Instance->SMPR1 = (Channel->Sample_Time[POS]<<6);
 8000b1e:	78fa      	ldrb	r2, [r7, #3]
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	3202      	adds	r2, #2
 8000b24:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000b2e:	0192      	lsls	r2, r2, #6
 8000b30:	60da      	str	r2, [r3, #12]
			break;
 8000b32:	e038      	b.n	8000ba6 <HAL_ADC_MULTCHN_SET+0x492>
			*CONFIG_REG = AWDCH_CHN_13<<5*OFFSET;
 8000b34:	69ba      	ldr	r2, [r7, #24]
 8000b36:	4613      	mov	r3, r2
 8000b38:	009b      	lsls	r3, r3, #2
 8000b3a:	4413      	add	r3, r2
 8000b3c:	220d      	movs	r2, #13
 8000b3e:	409a      	lsls	r2, r3
 8000b40:	69fb      	ldr	r3, [r7, #28]
 8000b42:	601a      	str	r2, [r3, #0]
			Channel->Init.Instance->SMPR1 = (Channel->Sample_Time[POS]<<9);
 8000b44:	78fa      	ldrb	r2, [r7, #3]
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	3202      	adds	r2, #2
 8000b4a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000b54:	0252      	lsls	r2, r2, #9
 8000b56:	60da      	str	r2, [r3, #12]
			break;
 8000b58:	e025      	b.n	8000ba6 <HAL_ADC_MULTCHN_SET+0x492>
			*CONFIG_REG = AWDCH_CHN_14<<5*OFFSET;
 8000b5a:	69ba      	ldr	r2, [r7, #24]
 8000b5c:	4613      	mov	r3, r2
 8000b5e:	009b      	lsls	r3, r3, #2
 8000b60:	4413      	add	r3, r2
 8000b62:	220e      	movs	r2, #14
 8000b64:	409a      	lsls	r2, r3
 8000b66:	69fb      	ldr	r3, [r7, #28]
 8000b68:	601a      	str	r2, [r3, #0]
			Channel->Init.Instance->SMPR1 = (Channel->Sample_Time[POS]<<12);
 8000b6a:	78fa      	ldrb	r2, [r7, #3]
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	3202      	adds	r2, #2
 8000b70:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000b7a:	0312      	lsls	r2, r2, #12
 8000b7c:	60da      	str	r2, [r3, #12]
			break;
 8000b7e:	e012      	b.n	8000ba6 <HAL_ADC_MULTCHN_SET+0x492>
			*CONFIG_REG  = AWDCH_CHN_15<<5*OFFSET;
 8000b80:	69ba      	ldr	r2, [r7, #24]
 8000b82:	4613      	mov	r3, r2
 8000b84:	009b      	lsls	r3, r3, #2
 8000b86:	4413      	add	r3, r2
 8000b88:	220f      	movs	r2, #15
 8000b8a:	409a      	lsls	r2, r3
 8000b8c:	69fb      	ldr	r3, [r7, #28]
 8000b8e:	601a      	str	r2, [r3, #0]
			Channel->Init.Instance->SMPR1 = (Channel->Sample_Time[POS]<<15);
 8000b90:	78fa      	ldrb	r2, [r7, #3]
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	3202      	adds	r2, #2
 8000b96:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000ba0:	03d2      	lsls	r2, r2, #15
 8000ba2:	60da      	str	r2, [r3, #12]
			break;
 8000ba4:	bf00      	nop
}
 8000ba6:	bf00      	nop
 8000ba8:	3720      	adds	r7, #32
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	40010800 	.word	0x40010800
 8000bb4:	40010c00 	.word	0x40010c00

08000bb8 <HAL_SHN_Init>:


static void HAL_SHN_Init(ADC_CH_t *Channel)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
	if( Channel != NULL)
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d038      	beq.n	8000c38 <HAL_SHN_Init+0x80>
	{
		/**Single Channel Initilization **/
		if(Channel->Instance==ADC1)
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	4a1d      	ldr	r2, [pc, #116]	; (8000c40 <HAL_SHN_Init+0x88>)
 8000bcc:	4293      	cmp	r3, r2
 8000bce:	d106      	bne.n	8000bde <HAL_SHN_Init+0x26>
			HAL_RCC_ADC1_EN();
 8000bd0:	4b1c      	ldr	r3, [pc, #112]	; (8000c44 <HAL_SHN_Init+0x8c>)
 8000bd2:	699b      	ldr	r3, [r3, #24]
 8000bd4:	4a1b      	ldr	r2, [pc, #108]	; (8000c44 <HAL_SHN_Init+0x8c>)
 8000bd6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bda:	6193      	str	r3, [r2, #24]
 8000bdc:	e00a      	b.n	8000bf4 <HAL_SHN_Init+0x3c>
		else if(Channel->Instance==ADC2)
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	4a19      	ldr	r2, [pc, #100]	; (8000c48 <HAL_SHN_Init+0x90>)
 8000be4:	4293      	cmp	r3, r2
 8000be6:	d105      	bne.n	8000bf4 <HAL_SHN_Init+0x3c>
			HAL_RCC_ADC2_EN();
 8000be8:	4b16      	ldr	r3, [pc, #88]	; (8000c44 <HAL_SHN_Init+0x8c>)
 8000bea:	699b      	ldr	r3, [r3, #24]
 8000bec:	4a15      	ldr	r2, [pc, #84]	; (8000c44 <HAL_SHN_Init+0x8c>)
 8000bee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000bf2:	6193      	str	r3, [r2, #24]

		/*Set the number of conversions to one */
		Channel->Instance->SQR1 = (0x00000000UL<<20);
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	62da      	str	r2, [r3, #44]	; 0x2c

		/*Select a certain channel */
		HAL_ADC_CHN_SET(Channel);
 8000bfc:	6878      	ldr	r0, [r7, #4]
 8000bfe:	f7ff fb83 	bl	8000308 <HAL_ADC_CHN_SET>
		/*Set up Allignment of channel*/
		HAL_SHN_ALLGN_SET(Channel);
 8000c02:	6878      	ldr	r0, [r7, #4]
 8000c04:	f7ff fd64 	bl	80006d0 <HAL_SHN_ALLGN_SET>

		/*Clear the Bit responsible for continous conv*/
		Channel->Instance->CR2 &= SINGLE_CONV;
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	689a      	ldr	r2, [r3, #8]
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	f022 0202 	bic.w	r2, r2, #2
 8000c16:	609a      	str	r2, [r3, #8]
		/*Turn on ADC */
		Channel->Instance->CR2 |= ADON_ON;
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	689a      	ldr	r2, [r3, #8]
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	f042 0201 	orr.w	r2, r2, #1
 8000c26:	609a      	str	r2, [r3, #8]
		/*Start Conversion */
		Channel->Instance->CR2 |= ADON_ON;
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	689a      	ldr	r2, [r3, #8]
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	f042 0201 	orr.w	r2, r2, #1
 8000c36:	609a      	str	r2, [r3, #8]
	}
}
 8000c38:	bf00      	nop
 8000c3a:	3708      	adds	r7, #8
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	40012400 	.word	0x40012400
 8000c44:	40021000 	.word	0x40021000
 8000c48:	40012800 	.word	0x40012800

08000c4c <HAL_MULT_SING_Init>:


static void HAL_MULT_SING_Init(ADC_init_t *ADC)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b084      	sub	sp, #16
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
	if(ADC != NULL)
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d05b      	beq.n	8000d12 <HAL_MULT_SING_Init+0xc6>
	{
		/*---------Enable RCC PERIPH CLK--------*/
		if (ADC->Init.Instance == ADC1)
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000c60:	4a2e      	ldr	r2, [pc, #184]	; (8000d1c <HAL_MULT_SING_Init+0xd0>)
 8000c62:	4293      	cmp	r3, r2
 8000c64:	d106      	bne.n	8000c74 <HAL_MULT_SING_Init+0x28>
			HAL_RCC_ADC1_EN();
 8000c66:	4b2e      	ldr	r3, [pc, #184]	; (8000d20 <HAL_MULT_SING_Init+0xd4>)
 8000c68:	699b      	ldr	r3, [r3, #24]
 8000c6a:	4a2d      	ldr	r2, [pc, #180]	; (8000d20 <HAL_MULT_SING_Init+0xd4>)
 8000c6c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c70:	6193      	str	r3, [r2, #24]
 8000c72:	e00b      	b.n	8000c8c <HAL_MULT_SING_Init+0x40>
		else if (ADC->Init.Instance == ADC2)
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000c7a:	4a2a      	ldr	r2, [pc, #168]	; (8000d24 <HAL_MULT_SING_Init+0xd8>)
 8000c7c:	4293      	cmp	r3, r2
 8000c7e:	d105      	bne.n	8000c8c <HAL_MULT_SING_Init+0x40>
			HAL_RCC_ADC2_EN();
 8000c80:	4b27      	ldr	r3, [pc, #156]	; (8000d20 <HAL_MULT_SING_Init+0xd4>)
 8000c82:	699b      	ldr	r3, [r3, #24]
 8000c84:	4a26      	ldr	r2, [pc, #152]	; (8000d20 <HAL_MULT_SING_Init+0xd4>)
 8000c86:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c8a:	6193      	str	r3, [r2, #24]
		/*---------DMA Enable---------------*/
		ADC->Init.Instance->CR2 |= DMA_EN_MSK;
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000c92:	689a      	ldr	r2, [r3, #8]
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000c9a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000c9e:	609a      	str	r2, [r3, #8]

		/*----------Multiple Channels Selected Init-------*/
		uint8_t Channel_Cnt=0;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	73fb      	strb	r3, [r7, #15]
		for(Channel_Cnt=0;Channel_Cnt<=ADC->NO_channels-1;Channel_Cnt++)
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	73fb      	strb	r3, [r7, #15]
 8000ca8:	e007      	b.n	8000cba <HAL_MULT_SING_Init+0x6e>
		{
			HAL_ADC_MULTCHN_SET(ADC,Channel_Cnt);
 8000caa:	7bfb      	ldrb	r3, [r7, #15]
 8000cac:	4619      	mov	r1, r3
 8000cae:	6878      	ldr	r0, [r7, #4]
 8000cb0:	f7ff fd30 	bl	8000714 <HAL_ADC_MULTCHN_SET>
		for(Channel_Cnt=0;Channel_Cnt<=ADC->NO_channels-1;Channel_Cnt++)
 8000cb4:	7bfb      	ldrb	r3, [r7, #15]
 8000cb6:	3301      	adds	r3, #1
 8000cb8:	73fb      	strb	r3, [r7, #15]
 8000cba:	7bfa      	ldrb	r2, [r7, #15]
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	685b      	ldr	r3, [r3, #4]
 8000cc0:	3b01      	subs	r3, #1
 8000cc2:	429a      	cmp	r2, r3
 8000cc4:	d9f1      	bls.n	8000caa <HAL_MULT_SING_Init+0x5e>
		}
		ADC->Init.Instance->SQR1=((ADC->NO_channels-1)<<20U);
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	685b      	ldr	r3, [r3, #4]
 8000cca:	1e5a      	subs	r2, r3, #1
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000cd2:	0512      	lsls	r2, r2, #20
 8000cd4:	62da      	str	r2, [r3, #44]	; 0x2c
		/*Clear the Bit responsible for continous conv*/
		ADC->Init.Instance->CR2 &= SINGLE_CONV;
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000cdc:	689a      	ldr	r2, [r3, #8]
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000ce4:	f022 0202 	bic.w	r2, r2, #2
 8000ce8:	609a      	str	r2, [r3, #8]
		/*Turn on ADC */
		ADC->Init.Instance->CR2 |= ADON_ON;
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000cf0:	689a      	ldr	r2, [r3, #8]
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000cf8:	f042 0201 	orr.w	r2, r2, #1
 8000cfc:	609a      	str	r2, [r3, #8]
		/*Start Conversion */
		ADC->Init.Instance->CR2|= ADON_ON;
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000d04:	689a      	ldr	r2, [r3, #8]
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000d0c:	f042 0201 	orr.w	r2, r2, #1
 8000d10:	609a      	str	r2, [r3, #8]
	}
}
 8000d12:	bf00      	nop
 8000d14:	3710      	adds	r7, #16
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	40012400 	.word	0x40012400
 8000d20:	40021000 	.word	0x40021000
 8000d24:	40012800 	.word	0x40012800

08000d28 <HAL_ADC_SHN_READ>:

static uint16_t HAL_ADC_SHN_READ(ADC_CH_t *Channel,uint8_t Flag)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	b085      	sub	sp, #20
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
 8000d30:	460b      	mov	r3, r1
 8000d32:	70fb      	strb	r3, [r7, #3]
	/*------Start Convertion if Auto is not selected---------*/
	if(Flag == HAL_ADC_SING_FLAG)
 8000d34:	78fb      	ldrb	r3, [r7, #3]
 8000d36:	2b01      	cmp	r3, #1
 8000d38:	d107      	bne.n	8000d4a <HAL_ADC_SHN_READ+0x22>
		Channel->Instance->CR2 |= ADON_ON;
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	689a      	ldr	r2, [r3, #8]
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	f042 0201 	orr.w	r2, r2, #1
 8000d48:	609a      	str	r2, [r3, #8]
	else if(Flag == HAL_ADC_CONT_FLAG){
	}

	/*------Polling Method----------*/
	while(!(READ_BIT(Channel->Instance->SR,HAL_ADC_EOC)));
 8000d4a:	bf00      	nop
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	085b      	lsrs	r3, r3, #1
 8000d54:	f003 0301 	and.w	r3, r3, #1
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d0f7      	beq.n	8000d4c <HAL_ADC_SHN_READ+0x24>

	/*------Read Reg-----------------*/
	uint16_t REG_VAL=(Channel->Instance->DR & 0xFFFF);
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d62:	81fb      	strh	r3, [r7, #14]

	/*----Adjust Result According to allignment----*/
	switch(Channel->Alignment)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	689b      	ldr	r3, [r3, #8]
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d001      	beq.n	8000d70 <HAL_ADC_SHN_READ+0x48>
 8000d6c:	2b01      	cmp	r3, #1
	{
			case HAL_ADC_ALLIGNMENT_LEFT:
				REG_VAL=(REG_VAL>>4);
				break;
			case HAL_ADC_ALLIGNMENT_RIGHT:
				break;
 8000d6e:	e003      	b.n	8000d78 <HAL_ADC_SHN_READ+0x50>
				REG_VAL=(REG_VAL>>4);
 8000d70:	89fb      	ldrh	r3, [r7, #14]
 8000d72:	091b      	lsrs	r3, r3, #4
 8000d74:	81fb      	strh	r3, [r7, #14]
				break;
 8000d76:	bf00      	nop
	}
	/*-----Return Result------*/
	return REG_VAL;
 8000d78:	89fb      	ldrh	r3, [r7, #14]
}
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	3714      	adds	r7, #20
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bc80      	pop	{r7}
 8000d82:	4770      	bx	lr

08000d84 <HAL_ADC_MHN_READ>:

static uint8_t HAL_ADC_MHN_READ(ADC_CH_t *Channel,uint8_t Flag,uint16_t *Buffer,uint8_t No)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b087      	sub	sp, #28
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	60f8      	str	r0, [r7, #12]
 8000d8c:	607a      	str	r2, [r7, #4]
 8000d8e:	461a      	mov	r2, r3
 8000d90:	460b      	mov	r3, r1
 8000d92:	72fb      	strb	r3, [r7, #11]
 8000d94:	4613      	mov	r3, r2
 8000d96:	72bb      	strb	r3, [r7, #10]
	uint8_t RET=1;
 8000d98:	2301      	movs	r3, #1
 8000d9a:	74fb      	strb	r3, [r7, #19]
	if (Flag == HAL_ADC_SING_FLAG)
 8000d9c:	7afb      	ldrb	r3, [r7, #11]
 8000d9e:	2b01      	cmp	r3, #1
 8000da0:	d107      	bne.n	8000db2 <HAL_ADC_MHN_READ+0x2e>
		Channel->Instance->CR2 |= ADON_ON;
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	689a      	ldr	r2, [r3, #8]
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	f042 0201 	orr.w	r2, r2, #1
 8000db0:	609a      	str	r2, [r3, #8]
	else if (Flag == HAL_ADC_CONT_FLAG) {
	}
	uint8_t Cnt=0;
 8000db2:	2300      	movs	r3, #0
 8000db4:	75fb      	strb	r3, [r7, #23]
	while(Cnt<=No-1)
 8000db6:	e01f      	b.n	8000df8 <HAL_ADC_MHN_READ+0x74>
	{
		/*------Polling Method----------*/
		while (!(READ_BIT(Channel->Instance->SR, HAL_ADC_EOC)));
 8000db8:	bf00      	nop
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	085b      	lsrs	r3, r3, #1
 8000dc2:	f003 0301 	and.w	r3, r3, #1
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d0f7      	beq.n	8000dba <HAL_ADC_MHN_READ+0x36>

		/*------Read Reg-----------------*/
		uint16_t REG_VAL = (Channel->Instance->DR & 0xFFFF);
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dd0:	82bb      	strh	r3, [r7, #20]

		/*----Adjust Result According to allignment----*/
		switch (Channel->Alignment) {
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	689b      	ldr	r3, [r3, #8]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d001      	beq.n	8000dde <HAL_ADC_MHN_READ+0x5a>
 8000dda:	2b01      	cmp	r3, #1
		case HAL_ADC_ALLIGNMENT_LEFT:
			REG_VAL = (REG_VAL >> 4);
			break;
		case HAL_ADC_ALLIGNMENT_RIGHT:
			break;
 8000ddc:	e003      	b.n	8000de6 <HAL_ADC_MHN_READ+0x62>
			REG_VAL = (REG_VAL >> 4);
 8000dde:	8abb      	ldrh	r3, [r7, #20]
 8000de0:	091b      	lsrs	r3, r3, #4
 8000de2:	82bb      	strh	r3, [r7, #20]
			break;
 8000de4:	bf00      	nop
		}
		/*-----Return Result------*/
		*(Buffer+Cnt)=REG_VAL;
 8000de6:	7dfb      	ldrb	r3, [r7, #23]
 8000de8:	005b      	lsls	r3, r3, #1
 8000dea:	687a      	ldr	r2, [r7, #4]
 8000dec:	4413      	add	r3, r2
 8000dee:	8aba      	ldrh	r2, [r7, #20]
 8000df0:	801a      	strh	r2, [r3, #0]
		Cnt++;
 8000df2:	7dfb      	ldrb	r3, [r7, #23]
 8000df4:	3301      	adds	r3, #1
 8000df6:	75fb      	strb	r3, [r7, #23]
	while(Cnt<=No-1)
 8000df8:	7aba      	ldrb	r2, [r7, #10]
 8000dfa:	7dfb      	ldrb	r3, [r7, #23]
 8000dfc:	429a      	cmp	r2, r3
 8000dfe:	d8db      	bhi.n	8000db8 <HAL_ADC_MHN_READ+0x34>
	}
	return RET;
 8000e00:	7cfb      	ldrb	r3, [r7, #19]
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	371c      	adds	r7, #28
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bc80      	pop	{r7}
 8000e0a:	4770      	bx	lr

08000e0c <HAL_ADC_READ>:

uint8_t HAL_ADC_READ(ADC_init_t *ADC,uint16_t *ADC_VAL)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b084      	sub	sp, #16
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
 8000e14:	6039      	str	r1, [r7, #0]
	uint8_t RET=1;
 8000e16:	2301      	movs	r3, #1
 8000e18:	73fb      	strb	r3, [r7, #15]
	uint16_t Res=0;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	81bb      	strh	r3, [r7, #12]
	switch(ADC->ADC_Mode)
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	2b03      	cmp	r3, #3
 8000e24:	d82f      	bhi.n	8000e86 <HAL_ADC_READ+0x7a>
 8000e26:	a201      	add	r2, pc, #4	; (adr r2, 8000e2c <HAL_ADC_READ+0x20>)
 8000e28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e2c:	08000e3d 	.word	0x08000e3d
 8000e30:	08000e55 	.word	0x08000e55
 8000e34:	08000e6d 	.word	0x08000e6d
 8000e38:	08000e87 	.word	0x08000e87
	{
		case HAL_ADC_SCHN_SN_CONV:
			Res=HAL_ADC_SHN_READ(&ADC->Init,HAL_ADC_SING_FLAG);
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	3398      	adds	r3, #152	; 0x98
 8000e40:	2101      	movs	r1, #1
 8000e42:	4618      	mov	r0, r3
 8000e44:	f7ff ff70 	bl	8000d28 <HAL_ADC_SHN_READ>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	81bb      	strh	r3, [r7, #12]
			*ADC_VAL=Res;
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	89ba      	ldrh	r2, [r7, #12]
 8000e50:	801a      	strh	r2, [r3, #0]
			break;
 8000e52:	e018      	b.n	8000e86 <HAL_ADC_READ+0x7a>
		case HAL_ADC_SCHN_AUTO_CONV:
			Res=HAL_ADC_SHN_READ(&ADC->Init,HAL_ADC_CONT_FLAG);
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	3398      	adds	r3, #152	; 0x98
 8000e58:	2100      	movs	r1, #0
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f7ff ff64 	bl	8000d28 <HAL_ADC_SHN_READ>
 8000e60:	4603      	mov	r3, r0
 8000e62:	81bb      	strh	r3, [r7, #12]
			*ADC_VAL=Res;
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	89ba      	ldrh	r2, [r7, #12]
 8000e68:	801a      	strh	r2, [r3, #0]
			break;
 8000e6a:	e00c      	b.n	8000e86 <HAL_ADC_READ+0x7a>
		case HAL_ADC_MCHN_SN_CONV:
			RET=HAL_ADC_MHN_READ(&ADC->Init,HAL_ADC_SING_FLAG,ADC_VAL,ADC->NO_channels);
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	f103 0098 	add.w	r0, r3, #152	; 0x98
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	685b      	ldr	r3, [r3, #4]
 8000e76:	b2db      	uxtb	r3, r3
 8000e78:	683a      	ldr	r2, [r7, #0]
 8000e7a:	2101      	movs	r1, #1
 8000e7c:	f7ff ff82 	bl	8000d84 <HAL_ADC_MHN_READ>
 8000e80:	4603      	mov	r3, r0
 8000e82:	73fb      	strb	r3, [r7, #15]
			break;
 8000e84:	bf00      	nop
		case HAL_ADC_MCHN_AUTO_CONV:
			break;
	}
	return RET;
 8000e86:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e88:	4618      	mov	r0, r3
 8000e8a:	3710      	adds	r7, #16
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}

08000e90 <HAL_Init_PIN>:
#include "HAL_Gpio.h"

/*Will be updated With Interrupts Soon*/

void HAL_Init_PIN(GPIO_TypeDef *GPIO_PORT,GPIO_t *GPIO_PIN)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b087      	sub	sp, #28
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
 8000e98:	6039      	str	r1, [r7, #0]
	uint32_t Pin_Number=((uint32_t)GPIO_PIN->PIN);
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	689b      	ldr	r3, [r3, #8]
 8000e9e:	613b      	str	r3, [r7, #16]
	uint32_t REG_VAL=0x00;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	617b      	str	r3, [r7, #20]
	volatile uint32_t *CONFIG_REG=NULL;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	60fb      	str	r3, [r7, #12]
	uint32_t RegisterOffset=0x00;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	60bb      	str	r3, [r7, #8]

	/*Enable Perripheral CLK through RCC Registers*/

	if(GPIO_PORT==GPIOA)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	4a5a      	ldr	r2, [pc, #360]	; (8001018 <HAL_Init_PIN+0x188>)
 8000eb0:	4293      	cmp	r3, r2
 8000eb2:	d106      	bne.n	8000ec2 <HAL_Init_PIN+0x32>
	{
		__HAL_RCC_GPIOA_EN();
 8000eb4:	4b59      	ldr	r3, [pc, #356]	; (800101c <HAL_Init_PIN+0x18c>)
 8000eb6:	699b      	ldr	r3, [r3, #24]
 8000eb8:	4a58      	ldr	r2, [pc, #352]	; (800101c <HAL_Init_PIN+0x18c>)
 8000eba:	f043 0304 	orr.w	r3, r3, #4
 8000ebe:	6193      	str	r3, [r2, #24]
 8000ec0:	e02a      	b.n	8000f18 <HAL_Init_PIN+0x88>
	}else if(GPIO_PORT==GPIOB)
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	4a56      	ldr	r2, [pc, #344]	; (8001020 <HAL_Init_PIN+0x190>)
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	d106      	bne.n	8000ed8 <HAL_Init_PIN+0x48>
	{
		__HAL_RCC_GPIOB_EN();
 8000eca:	4b54      	ldr	r3, [pc, #336]	; (800101c <HAL_Init_PIN+0x18c>)
 8000ecc:	699b      	ldr	r3, [r3, #24]
 8000ece:	4a53      	ldr	r2, [pc, #332]	; (800101c <HAL_Init_PIN+0x18c>)
 8000ed0:	f043 0308 	orr.w	r3, r3, #8
 8000ed4:	6193      	str	r3, [r2, #24]
 8000ed6:	e01f      	b.n	8000f18 <HAL_Init_PIN+0x88>
	}else if(GPIO_PORT==GPIOC)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	4a52      	ldr	r2, [pc, #328]	; (8001024 <HAL_Init_PIN+0x194>)
 8000edc:	4293      	cmp	r3, r2
 8000ede:	d106      	bne.n	8000eee <HAL_Init_PIN+0x5e>
	{
		__HAL_RCC_GPIOC_EN();
 8000ee0:	4b4e      	ldr	r3, [pc, #312]	; (800101c <HAL_Init_PIN+0x18c>)
 8000ee2:	699b      	ldr	r3, [r3, #24]
 8000ee4:	4a4d      	ldr	r2, [pc, #308]	; (800101c <HAL_Init_PIN+0x18c>)
 8000ee6:	f043 0310 	orr.w	r3, r3, #16
 8000eea:	6193      	str	r3, [r2, #24]
 8000eec:	e014      	b.n	8000f18 <HAL_Init_PIN+0x88>
	}else if(GPIO_PORT==GPIOD)
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	4a4d      	ldr	r2, [pc, #308]	; (8001028 <HAL_Init_PIN+0x198>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d106      	bne.n	8000f04 <HAL_Init_PIN+0x74>
	{
		__HAL_RCC_GPIOD_EN();
 8000ef6:	4b49      	ldr	r3, [pc, #292]	; (800101c <HAL_Init_PIN+0x18c>)
 8000ef8:	699b      	ldr	r3, [r3, #24]
 8000efa:	4a48      	ldr	r2, [pc, #288]	; (800101c <HAL_Init_PIN+0x18c>)
 8000efc:	f043 0320 	orr.w	r3, r3, #32
 8000f00:	6193      	str	r3, [r2, #24]
 8000f02:	e009      	b.n	8000f18 <HAL_Init_PIN+0x88>
	}else if(GPIO_PORT==GPIOE)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	4a49      	ldr	r2, [pc, #292]	; (800102c <HAL_Init_PIN+0x19c>)
 8000f08:	4293      	cmp	r3, r2
 8000f0a:	d105      	bne.n	8000f18 <HAL_Init_PIN+0x88>
	{
		__HAL_RCC_GPIOE_EN();
 8000f0c:	4b43      	ldr	r3, [pc, #268]	; (800101c <HAL_Init_PIN+0x18c>)
 8000f0e:	699b      	ldr	r3, [r3, #24]
 8000f10:	4a42      	ldr	r2, [pc, #264]	; (800101c <HAL_Init_PIN+0x18c>)
 8000f12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f16:	6193      	str	r3, [r2, #24]

	}
	/**Set status of PIN*/
	if( Pin_Number >= 0x00U)
	{
		switch(GPIO_PIN->Mode)
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	3b01      	subs	r3, #1
 8000f1e:	2b05      	cmp	r3, #5
 8000f20:	d84d      	bhi.n	8000fbe <HAL_Init_PIN+0x12e>
 8000f22:	a201      	add	r2, pc, #4	; (adr r2, 8000f28 <HAL_Init_PIN+0x98>)
 8000f24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f28:	08000f41 	.word	0x08000f41
 8000f2c:	08000f49 	.word	0x08000f49
 8000f30:	08000f53 	.word	0x08000f53
 8000f34:	08000f5d 	.word	0x08000f5d
 8000f38:	08000f67 	.word	0x08000f67
 8000f3c:	08000fb9 	.word	0x08000fb9
		{
			case HAL_GPIO_OUT_PP:
				REG_VAL=HAL_GPIO_OUT_PP_MSK+(GPIO_PIN->SPEED);
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	617b      	str	r3, [r7, #20]
				break;
 8000f46:	e03d      	b.n	8000fc4 <HAL_Init_PIN+0x134>
			case HAL_GPIO_OUT_OD:
				REG_VAL=HAL_GPIO_OUT_OD_MSK	+(GPIO_PIN->SPEED);
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	3304      	adds	r3, #4
 8000f4e:	617b      	str	r3, [r7, #20]
				break;
 8000f50:	e038      	b.n	8000fc4 <HAL_Init_PIN+0x134>
			case HAL_GPIO_OUT_ALT_PP:
				REG_VAL=HAL_GPIO_OUT_ALTPP_MSK+(GPIO_PIN->SPEED);
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	685b      	ldr	r3, [r3, #4]
 8000f56:	3308      	adds	r3, #8
 8000f58:	617b      	str	r3, [r7, #20]
				break;
 8000f5a:	e033      	b.n	8000fc4 <HAL_Init_PIN+0x134>
			case HAL_GPIO_OUT_ALT_OD:
				REG_VAL=HAL_GPIO_OUT_ALTOD_MSK+(GPIO_PIN->SPEED);
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	685b      	ldr	r3, [r3, #4]
 8000f60:	330c      	adds	r3, #12
 8000f62:	617b      	str	r3, [r7, #20]
				break;
 8000f64:	e02e      	b.n	8000fc4 <HAL_Init_PIN+0x134>
			case HAL_GPIO_IN:
				switch(GPIO_PIN->PULL)
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	68db      	ldr	r3, [r3, #12]
 8000f6a:	2b02      	cmp	r3, #2
 8000f6c:	d016      	beq.n	8000f9c <HAL_Init_PIN+0x10c>
 8000f6e:	2b02      	cmp	r3, #2
 8000f70:	d827      	bhi.n	8000fc2 <HAL_Init_PIN+0x132>
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d002      	beq.n	8000f7c <HAL_Init_PIN+0xec>
 8000f76:	2b01      	cmp	r3, #1
 8000f78:	d003      	beq.n	8000f82 <HAL_Init_PIN+0xf2>
					case HAL_GPIO_PULLDOWN:
						REG_VAL=HAL_GPIO_IN_MSK+HAL_GPIO_IN_PULLUP_MSK;
						SET_BIT(GPIO_PORT->BRR,(uint32_t)GPIO_PIN->PIN);
						break;
				}
				break;
 8000f7a:	e022      	b.n	8000fc2 <HAL_Init_PIN+0x132>
						REG_VAL=HAL_GPIO_IN_MSK+HAL_GPIO_IN_NO_PULL_MSK;
 8000f7c:	2304      	movs	r3, #4
 8000f7e:	617b      	str	r3, [r7, #20]
						break;
 8000f80:	e019      	b.n	8000fb6 <HAL_Init_PIN+0x126>
						REG_VAL=HAL_GPIO_IN_MSK+HAL_GPIO_IN_PULLD_MSK;
 8000f82:	230c      	movs	r3, #12
 8000f84:	617b      	str	r3, [r7, #20]
						SET_BIT(GPIO_PORT->BSRR,(uint32_t)GPIO_PIN->PIN);
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	691a      	ldr	r2, [r3, #16]
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	689b      	ldr	r3, [r3, #8]
 8000f8e:	2101      	movs	r1, #1
 8000f90:	fa01 f303 	lsl.w	r3, r1, r3
 8000f94:	431a      	orrs	r2, r3
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	611a      	str	r2, [r3, #16]
						break;
 8000f9a:	e00c      	b.n	8000fb6 <HAL_Init_PIN+0x126>
						REG_VAL=HAL_GPIO_IN_MSK+HAL_GPIO_IN_PULLUP_MSK;
 8000f9c:	230c      	movs	r3, #12
 8000f9e:	617b      	str	r3, [r7, #20]
						SET_BIT(GPIO_PORT->BRR,(uint32_t)GPIO_PIN->PIN);
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	695a      	ldr	r2, [r3, #20]
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	689b      	ldr	r3, [r3, #8]
 8000fa8:	2101      	movs	r1, #1
 8000faa:	fa01 f303 	lsl.w	r3, r1, r3
 8000fae:	431a      	orrs	r2, r3
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	615a      	str	r2, [r3, #20]
						break;
 8000fb4:	bf00      	nop
				break;
 8000fb6:	e004      	b.n	8000fc2 <HAL_Init_PIN+0x132>
			case HAL_GPIO_IN_AN:
				REG_VAL=HAL_GPIO_IN_AN_MSK+HAL_GPIO_IN_MSK;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	617b      	str	r3, [r7, #20]
				break;
 8000fbc:	e002      	b.n	8000fc4 <HAL_Init_PIN+0x134>
			default:
				break;
 8000fbe:	bf00      	nop
 8000fc0:	e000      	b.n	8000fc4 <HAL_Init_PIN+0x134>
				break;
 8000fc2:	bf00      	nop
		}
		/*Select Either CRH or CRL depending on position of the bit*/
		CONFIG_REG=Pin_Number>8?&GPIO_PORT->CRH:&GPIO_PORT->CRL;
 8000fc4:	693b      	ldr	r3, [r7, #16]
 8000fc6:	2b08      	cmp	r3, #8
 8000fc8:	d902      	bls.n	8000fd0 <HAL_Init_PIN+0x140>
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	3304      	adds	r3, #4
 8000fce:	e000      	b.n	8000fd2 <HAL_Init_PIN+0x142>
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	60fb      	str	r3, [r7, #12]

		/*Determine Bit offset if the pin number is greater simply subtract and multiply by 4 or left shift by 2 2^2=4 */
		RegisterOffset=Pin_Number>8?((Pin_Number-8)<<2U):((Pin_Number)<<2U);
 8000fd4:	693b      	ldr	r3, [r7, #16]
 8000fd6:	2b08      	cmp	r3, #8
 8000fd8:	d903      	bls.n	8000fe2 <HAL_Init_PIN+0x152>
 8000fda:	693b      	ldr	r3, [r7, #16]
 8000fdc:	3b08      	subs	r3, #8
 8000fde:	009b      	lsls	r3, r3, #2
 8000fe0:	e001      	b.n	8000fe6 <HAL_Init_PIN+0x156>
 8000fe2:	693b      	ldr	r3, [r7, #16]
 8000fe4:	009b      	lsls	r3, r3, #2
 8000fe6:	60bb      	str	r3, [r7, #8]

		/*Clear Bits of Certain Pin*/
		(*CONFIG_REG)&=~(CLEAR_MASK_GPIO<<RegisterOffset);
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	681a      	ldr	r2, [r3, #0]
 8000fec:	210f      	movs	r1, #15
 8000fee:	68bb      	ldr	r3, [r7, #8]
 8000ff0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ff4:	43db      	mvns	r3, r3
 8000ff6:	401a      	ands	r2, r3
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	601a      	str	r2, [r3, #0]

		/*Set Bits of Certain Pin*/
		(*CONFIG_REG)|=(REG_VAL<<RegisterOffset);
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	681a      	ldr	r2, [r3, #0]
 8001000:	6979      	ldr	r1, [r7, #20]
 8001002:	68bb      	ldr	r3, [r7, #8]
 8001004:	fa01 f303 	lsl.w	r3, r1, r3
 8001008:	431a      	orrs	r2, r3
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	601a      	str	r2, [r3, #0]
	}
}
 800100e:	bf00      	nop
 8001010:	371c      	adds	r7, #28
 8001012:	46bd      	mov	sp, r7
 8001014:	bc80      	pop	{r7}
 8001016:	4770      	bx	lr
 8001018:	40010800 	.word	0x40010800
 800101c:	40021000 	.word	0x40021000
 8001020:	40010c00 	.word	0x40010c00
 8001024:	40011000 	.word	0x40011000
 8001028:	40011400 	.word	0x40011400
 800102c:	40011800 	.word	0x40011800

08001030 <HAL_TIMER_init>:
uint32_t PLL_CLK_CALC();
static void HAL_TIMER_OUTCMP_Init(TimerU_D_t *Timer);
static void HAL_TIMER_TIMEBASE_init(TimerU_D_t *Timer);

void HAL_TIMER_init(TimerU_D_t *Timer)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
	if(Timer != NULL)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	2b00      	cmp	r3, #0
 800103c:	d011      	beq.n	8001062 <HAL_TIMER_init+0x32>
	{
		switch(Timer->Mode)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	2b05      	cmp	r3, #5
 8001044:	d009      	beq.n	800105a <HAL_TIMER_init+0x2a>
 8001046:	2b05      	cmp	r3, #5
 8001048:	d80c      	bhi.n	8001064 <HAL_TIMER_init+0x34>
 800104a:	2b02      	cmp	r3, #2
 800104c:	d901      	bls.n	8001052 <HAL_TIMER_init+0x22>
 800104e:	2b04      	cmp	r3, #4
 8001050:	d108      	bne.n	8001064 <HAL_TIMER_init+0x34>
		{
			case HAL_TIMER_UP_COUNTER:
			case HAL_TIMER_DOWN_COUNTER:
			case HAL_TIMER_UP_D_COUNTER_D_F:
			case HAL_TIMER_UP_D_COUNTER_U_D_F:
				HAL_TIMER_TIMEBASE_init(Timer);
 8001052:	6878      	ldr	r0, [r7, #4]
 8001054:	f000 f80a 	bl	800106c <HAL_TIMER_TIMEBASE_init>
				break;
 8001058:	e004      	b.n	8001064 <HAL_TIMER_init+0x34>
			case HAL_TIMER_OP_CMP_MODE:
				HAL_TIMER_OUTCMP_Init(Timer);
 800105a:	6878      	ldr	r0, [r7, #4]
 800105c:	f000 f920 	bl	80012a0 <HAL_TIMER_OUTCMP_Init>
				break;
 8001060:	e000      	b.n	8001064 <HAL_TIMER_init+0x34>
		}
	}
 8001062:	bf00      	nop
}
 8001064:	bf00      	nop
 8001066:	3708      	adds	r7, #8
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}

0800106c <HAL_TIMER_TIMEBASE_init>:

/*---Initilization of Timer in UP-DOWN-UP DOWN Counting As a Time Base---*/
static void HAL_TIMER_TIMEBASE_init(TimerU_D_t *Timer)
{
 800106c:	b480      	push	{r7}
 800106e:	b083      	sub	sp, #12
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
	if( Timer != NULL)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	2b00      	cmp	r3, #0
 8001078:	f000 8082 	beq.w	8001180 <HAL_TIMER_TIMEBASE_init+0x114>
	{
		/*----Enable Timer Clock----*/
		if(Timer->Instance == TIM2)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001084:	d106      	bne.n	8001094 <HAL_TIMER_TIMEBASE_init+0x28>
			HAL_RCC_TIMER2_EN();
 8001086:	4b41      	ldr	r3, [pc, #260]	; (800118c <HAL_TIMER_TIMEBASE_init+0x120>)
 8001088:	69db      	ldr	r3, [r3, #28]
 800108a:	4a40      	ldr	r2, [pc, #256]	; (800118c <HAL_TIMER_TIMEBASE_init+0x120>)
 800108c:	f043 0301 	orr.w	r3, r3, #1
 8001090:	61d3      	str	r3, [r2, #28]
 8001092:	e016      	b.n	80010c2 <HAL_TIMER_TIMEBASE_init+0x56>
		else if(Timer->Instance == TIM3)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4a3d      	ldr	r2, [pc, #244]	; (8001190 <HAL_TIMER_TIMEBASE_init+0x124>)
 800109a:	4293      	cmp	r3, r2
 800109c:	d106      	bne.n	80010ac <HAL_TIMER_TIMEBASE_init+0x40>
			HAL_RCC_TIMER3_EN();
 800109e:	4b3b      	ldr	r3, [pc, #236]	; (800118c <HAL_TIMER_TIMEBASE_init+0x120>)
 80010a0:	69db      	ldr	r3, [r3, #28]
 80010a2:	4a3a      	ldr	r2, [pc, #232]	; (800118c <HAL_TIMER_TIMEBASE_init+0x120>)
 80010a4:	f043 0302 	orr.w	r3, r3, #2
 80010a8:	61d3      	str	r3, [r2, #28]
 80010aa:	e00a      	b.n	80010c2 <HAL_TIMER_TIMEBASE_init+0x56>
		else if(Timer->Instance == TIM4)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a38      	ldr	r2, [pc, #224]	; (8001194 <HAL_TIMER_TIMEBASE_init+0x128>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d105      	bne.n	80010c2 <HAL_TIMER_TIMEBASE_init+0x56>
			HAL_RCC_TIMER4_EN();
 80010b6:	4b35      	ldr	r3, [pc, #212]	; (800118c <HAL_TIMER_TIMEBASE_init+0x120>)
 80010b8:	69db      	ldr	r3, [r3, #28]
 80010ba:	4a34      	ldr	r2, [pc, #208]	; (800118c <HAL_TIMER_TIMEBASE_init+0x120>)
 80010bc:	f043 0304 	orr.w	r3, r3, #4
 80010c0:	61d3      	str	r3, [r2, #28]
		else{

		}
		/*---Select Mode of operation----*/
		switch(Timer->Mode)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	2b04      	cmp	r3, #4
 80010c8:	d839      	bhi.n	800113e <HAL_TIMER_TIMEBASE_init+0xd2>
 80010ca:	a201      	add	r2, pc, #4	; (adr r2, 80010d0 <HAL_TIMER_TIMEBASE_init+0x64>)
 80010cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010d0:	080010e5 	.word	0x080010e5
 80010d4:	080010f7 	.word	0x080010f7
 80010d8:	08001109 	.word	0x08001109
 80010dc:	0800111b 	.word	0x0800111b
 80010e0:	0800112d 	.word	0x0800112d
		{
			case HAL_TIMER_UP_COUNTER:
				Timer->Instance->CR1 &= HAL_TIMER_CNT_U;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	681a      	ldr	r2, [r3, #0]
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f022 0210 	bic.w	r2, r2, #16
 80010f2:	601a      	str	r2, [r3, #0]
				break;
 80010f4:	e023      	b.n	800113e <HAL_TIMER_TIMEBASE_init+0xd2>
			case HAL_TIMER_DOWN_COUNTER:
				Timer->Instance->CR1 |= HAL_TIMER_CNT_D;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	681a      	ldr	r2, [r3, #0]
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f042 0210 	orr.w	r2, r2, #16
 8001104:	601a      	str	r2, [r3, #0]
				break;
 8001106:	e01a      	b.n	800113e <HAL_TIMER_TIMEBASE_init+0xd2>
			case HAL_TIMER_UP_D_COUNTER_D_F:
				Timer->Instance->CR1 |=  HAL_TIMER_CNTR_D;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	681a      	ldr	r2, [r3, #0]
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f042 0220 	orr.w	r2, r2, #32
 8001116:	601a      	str	r2, [r3, #0]
				break;
 8001118:	e011      	b.n	800113e <HAL_TIMER_TIMEBASE_init+0xd2>
			case HAL_TIMER_UP_D_COUNTER_U_F:
				Timer->Instance->CR1 |= HAL_TIMER_CNTR_U;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	681a      	ldr	r2, [r3, #0]
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001128:	601a      	str	r2, [r3, #0]
				break;
 800112a:	e008      	b.n	800113e <HAL_TIMER_TIMEBASE_init+0xd2>
			case HAL_TIMER_UP_D_COUNTER_U_D_F:
				Timer->Instance->CR1 |= HAL_TIMER_CNTR_U_D;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	681a      	ldr	r2, [r3, #0]
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800113a:	601a      	str	r2, [r3, #0]
				break;
 800113c:	bf00      	nop
		}
		switch(Timer->SH_EN)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001142:	2b00      	cmp	r3, #0
 8001144:	d001      	beq.n	800114a <HAL_TIMER_TIMEBASE_init+0xde>
 8001146:	2b01      	cmp	r3, #1
		{
			case HAL_TIMER_SHR_EN:
				Timer->Instance->CR1 |= HAL_TIMER_SH_EN;
				break;
			case HAL_TIMER_SHR_DIS:
				break;
 8001148:	e008      	b.n	800115c <HAL_TIMER_TIMEBASE_init+0xf0>
				Timer->Instance->CR1 |= HAL_TIMER_SH_EN;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	681a      	ldr	r2, [r3, #0]
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001158:	601a      	str	r2, [r3, #0]
				break;
 800115a:	bf00      	nop
		}
		Timer->Instance->ARR = Timer->ARR_val;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	687a      	ldr	r2, [r7, #4]
 8001162:	6892      	ldr	r2, [r2, #8]
 8001164:	62da      	str	r2, [r3, #44]	; 0x2c
		Timer->Instance->PSC = Timer->Prescaler;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	687a      	ldr	r2, [r7, #4]
 800116c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800116e:	629a      	str	r2, [r3, #40]	; 0x28

		Timer->Instance->CR1 |= HAL_TIMER_CNT_EN;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	681a      	ldr	r2, [r3, #0]
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f042 0201 	orr.w	r2, r2, #1
 800117e:	601a      	str	r2, [r3, #0]
	}
}
 8001180:	bf00      	nop
 8001182:	370c      	adds	r7, #12
 8001184:	46bd      	mov	sp, r7
 8001186:	bc80      	pop	{r7}
 8001188:	4770      	bx	lr
 800118a:	bf00      	nop
 800118c:	40021000 	.word	0x40021000
 8001190:	40000400 	.word	0x40000400
 8001194:	40000800 	.word	0x40000800

08001198 <HAL_TIMER_CHN_CONFIG_GPIO>:

static void HAL_TIMER_CHN_CONFIG_GPIO(TIM_TypeDef *TIME,uint32_t CHN)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b088      	sub	sp, #32
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
 80011a0:	6039      	str	r1, [r7, #0]
	GPIO_t Pin;
	GPIO_TypeDef *GPIO_PORT=NULL;
 80011a2:	2300      	movs	r3, #0
 80011a4:	61fb      	str	r3, [r7, #28]

	Pin.Mode  = HAL_GPIO_OUT_ALT_PP;
 80011a6:	2303      	movs	r3, #3
 80011a8:	60fb      	str	r3, [r7, #12]
	Pin.SPEED = HAL_GPIO_SPEED_FREQ_HIGH;
 80011aa:	2303      	movs	r3, #3
 80011ac:	613b      	str	r3, [r7, #16]

	if (TIME == TIM2)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80011b4:	d11c      	bne.n	80011f0 <HAL_TIMER_CHN_CONFIG_GPIO+0x58>
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	2b03      	cmp	r3, #3
 80011ba:	d816      	bhi.n	80011ea <HAL_TIMER_CHN_CONFIG_GPIO+0x52>
 80011bc:	a201      	add	r2, pc, #4	; (adr r2, 80011c4 <HAL_TIMER_CHN_CONFIG_GPIO+0x2c>)
 80011be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011c2:	bf00      	nop
 80011c4:	080011d5 	.word	0x080011d5
 80011c8:	080011db 	.word	0x080011db
 80011cc:	080011e1 	.word	0x080011e1
 80011d0:	080011e5 	.word	0x080011e5
	{

		switch (CHN) {
			case HAL_TIMER_CMP_OUT_CHN_1:
				Pin.PIN=GPIO_PIN_0;
 80011d4:	2300      	movs	r3, #0
 80011d6:	617b      	str	r3, [r7, #20]
				break;
 80011d8:	e007      	b.n	80011ea <HAL_TIMER_CHN_CONFIG_GPIO+0x52>
			case HAL_TIMER_CMP_OUT_CHN_2:
				Pin.PIN=GPIO_PIN_1;
 80011da:	2301      	movs	r3, #1
 80011dc:	617b      	str	r3, [r7, #20]
				break;
 80011de:	e004      	b.n	80011ea <HAL_TIMER_CHN_CONFIG_GPIO+0x52>
			case HAL_TIMER_CMP_OUT_CHN_3:
				Pin.PIN=GPIO_PIN_2;
 80011e0:	2302      	movs	r3, #2
 80011e2:	617b      	str	r3, [r7, #20]
			case HAL_TIMER_CMP_OUT_CHN_4:
				Pin.PIN=GPIO_PIN_3;
 80011e4:	2303      	movs	r3, #3
 80011e6:	617b      	str	r3, [r7, #20]
				break;
 80011e8:	bf00      	nop
		}
		GPIO_PORT = GPIOA;
 80011ea:	4b29      	ldr	r3, [pc, #164]	; (8001290 <HAL_TIMER_CHN_CONFIG_GPIO+0xf8>)
 80011ec:	61fb      	str	r3, [r7, #28]
 80011ee:	e044      	b.n	800127a <HAL_TIMER_CHN_CONFIG_GPIO+0xe2>
	}
	else if (TIME == TIM3)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	4a28      	ldr	r2, [pc, #160]	; (8001294 <HAL_TIMER_CHN_CONFIG_GPIO+0xfc>)
 80011f4:	4293      	cmp	r3, r2
 80011f6:	d120      	bne.n	800123a <HAL_TIMER_CHN_CONFIG_GPIO+0xa2>
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	2b03      	cmp	r3, #3
 80011fc:	d83d      	bhi.n	800127a <HAL_TIMER_CHN_CONFIG_GPIO+0xe2>
 80011fe:	a201      	add	r2, pc, #4	; (adr r2, 8001204 <HAL_TIMER_CHN_CONFIG_GPIO+0x6c>)
 8001200:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001204:	08001215 	.word	0x08001215
 8001208:	0800121f 	.word	0x0800121f
 800120c:	08001229 	.word	0x08001229
 8001210:	08001231 	.word	0x08001231
	{
		switch (CHN) {
			case HAL_TIMER_CMP_OUT_CHN_1:
				GPIO_PORT = GPIOA;
 8001214:	4b1e      	ldr	r3, [pc, #120]	; (8001290 <HAL_TIMER_CHN_CONFIG_GPIO+0xf8>)
 8001216:	61fb      	str	r3, [r7, #28]
				Pin.PIN=GPIO_PIN_6;
 8001218:	2306      	movs	r3, #6
 800121a:	617b      	str	r3, [r7, #20]
				break;
 800121c:	e02d      	b.n	800127a <HAL_TIMER_CHN_CONFIG_GPIO+0xe2>
			case HAL_TIMER_CMP_OUT_CHN_2:
				GPIO_PORT = GPIOA;
 800121e:	4b1c      	ldr	r3, [pc, #112]	; (8001290 <HAL_TIMER_CHN_CONFIG_GPIO+0xf8>)
 8001220:	61fb      	str	r3, [r7, #28]
				Pin.PIN=GPIO_PIN_7;
 8001222:	2307      	movs	r3, #7
 8001224:	617b      	str	r3, [r7, #20]
				break;
 8001226:	e028      	b.n	800127a <HAL_TIMER_CHN_CONFIG_GPIO+0xe2>
			case HAL_TIMER_CMP_OUT_CHN_3:
				GPIO_PORT = GPIOB;
 8001228:	4b1b      	ldr	r3, [pc, #108]	; (8001298 <HAL_TIMER_CHN_CONFIG_GPIO+0x100>)
 800122a:	61fb      	str	r3, [r7, #28]
				Pin.PIN=GPIO_PIN_0;
 800122c:	2300      	movs	r3, #0
 800122e:	617b      	str	r3, [r7, #20]
			case HAL_TIMER_CMP_OUT_CHN_4:
				GPIO_PORT = GPIOB;
 8001230:	4b19      	ldr	r3, [pc, #100]	; (8001298 <HAL_TIMER_CHN_CONFIG_GPIO+0x100>)
 8001232:	61fb      	str	r3, [r7, #28]
				Pin.PIN=GPIO_PIN_1;
 8001234:	2301      	movs	r3, #1
 8001236:	617b      	str	r3, [r7, #20]
				break;
 8001238:	e01f      	b.n	800127a <HAL_TIMER_CHN_CONFIG_GPIO+0xe2>
		}
	}
	else if (TIME == TIM4)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	4a17      	ldr	r2, [pc, #92]	; (800129c <HAL_TIMER_CHN_CONFIG_GPIO+0x104>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d11b      	bne.n	800127a <HAL_TIMER_CHN_CONFIG_GPIO+0xe2>
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	2b03      	cmp	r3, #3
 8001246:	d816      	bhi.n	8001276 <HAL_TIMER_CHN_CONFIG_GPIO+0xde>
 8001248:	a201      	add	r2, pc, #4	; (adr r2, 8001250 <HAL_TIMER_CHN_CONFIG_GPIO+0xb8>)
 800124a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800124e:	bf00      	nop
 8001250:	08001261 	.word	0x08001261
 8001254:	08001267 	.word	0x08001267
 8001258:	0800126d 	.word	0x0800126d
 800125c:	08001271 	.word	0x08001271
	{
		switch (CHN) {
			case HAL_TIMER_CMP_OUT_CHN_1:
				Pin.PIN=GPIO_PIN_6;
 8001260:	2306      	movs	r3, #6
 8001262:	617b      	str	r3, [r7, #20]
				break;
 8001264:	e007      	b.n	8001276 <HAL_TIMER_CHN_CONFIG_GPIO+0xde>
			case HAL_TIMER_CMP_OUT_CHN_2:
				Pin.PIN=GPIO_PIN_7;
 8001266:	2307      	movs	r3, #7
 8001268:	617b      	str	r3, [r7, #20]
				break;
 800126a:	e004      	b.n	8001276 <HAL_TIMER_CHN_CONFIG_GPIO+0xde>
			case HAL_TIMER_CMP_OUT_CHN_3:
				Pin.PIN=GPIO_PIN_8;
 800126c:	2308      	movs	r3, #8
 800126e:	617b      	str	r3, [r7, #20]
			case HAL_TIMER_CMP_OUT_CHN_4:
				Pin.PIN=GPIO_PIN_9;
 8001270:	2309      	movs	r3, #9
 8001272:	617b      	str	r3, [r7, #20]
				break;
 8001274:	bf00      	nop
		}
		GPIO_PORT = GPIOB;
 8001276:	4b08      	ldr	r3, [pc, #32]	; (8001298 <HAL_TIMER_CHN_CONFIG_GPIO+0x100>)
 8001278:	61fb      	str	r3, [r7, #28]
	}
	else {

	}
	HAL_Init_PIN(GPIO_PORT,&Pin);
 800127a:	f107 030c 	add.w	r3, r7, #12
 800127e:	4619      	mov	r1, r3
 8001280:	69f8      	ldr	r0, [r7, #28]
 8001282:	f7ff fe05 	bl	8000e90 <HAL_Init_PIN>
}
 8001286:	bf00      	nop
 8001288:	3720      	adds	r7, #32
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	40010800 	.word	0x40010800
 8001294:	40000400 	.word	0x40000400
 8001298:	40010c00 	.word	0x40010c00
 800129c:	40000800 	.word	0x40000800

080012a0 <HAL_TIMER_OUTCMP_Init>:

static void HAL_TIMER_OUTCMP_Init(TimerU_D_t *Timer)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b084      	sub	sp, #16
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
	if(Timer != NULL)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	f000 818d 	beq.w	80015ca <HAL_TIMER_OUTCMP_Init+0x32a>
	{
		uint8_t CNT=0;
 80012b0:	2300      	movs	r3, #0
 80012b2:	73fb      	strb	r3, [r7, #15]
		/*----Enable Timer Clock----*/
		if (Timer->Instance == TIM2)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80012bc:	d11b      	bne.n	80012f6 <HAL_TIMER_OUTCMP_Init+0x56>
		{
			HAL_RCC_TIMER2_EN();
 80012be:	4b9f      	ldr	r3, [pc, #636]	; (800153c <HAL_TIMER_OUTCMP_Init+0x29c>)
 80012c0:	69db      	ldr	r3, [r3, #28]
 80012c2:	4a9e      	ldr	r2, [pc, #632]	; (800153c <HAL_TIMER_OUTCMP_Init+0x29c>)
 80012c4:	f043 0301 	orr.w	r3, r3, #1
 80012c8:	61d3      	str	r3, [r2, #28]
			for(CNT=0;CNT<=Timer->NO_CMP_CHNS-1;CNT++)
 80012ca:	2300      	movs	r3, #0
 80012cc:	73fb      	strb	r3, [r7, #15]
 80012ce:	e00b      	b.n	80012e8 <HAL_TIMER_OUTCMP_Init+0x48>
				HAL_TIMER_CHN_CONFIG_GPIO(TIM2,Timer->CMP_CHN[CNT]);
 80012d0:	7bfb      	ldrb	r3, [r7, #15]
 80012d2:	687a      	ldr	r2, [r7, #4]
 80012d4:	4413      	add	r3, r2
 80012d6:	7f1b      	ldrb	r3, [r3, #28]
 80012d8:	4619      	mov	r1, r3
 80012da:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80012de:	f7ff ff5b 	bl	8001198 <HAL_TIMER_CHN_CONFIG_GPIO>
			for(CNT=0;CNT<=Timer->NO_CMP_CHNS-1;CNT++)
 80012e2:	7bfb      	ldrb	r3, [r7, #15]
 80012e4:	3301      	adds	r3, #1
 80012e6:	73fb      	strb	r3, [r7, #15]
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80012ee:	7bfa      	ldrb	r2, [r7, #15]
 80012f0:	429a      	cmp	r2, r3
 80012f2:	d3ed      	bcc.n	80012d0 <HAL_TIMER_OUTCMP_Init+0x30>
 80012f4:	e040      	b.n	8001378 <HAL_TIMER_OUTCMP_Init+0xd8>
		}
		else if (Timer->Instance == TIM3)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4a91      	ldr	r2, [pc, #580]	; (8001540 <HAL_TIMER_OUTCMP_Init+0x2a0>)
 80012fc:	4293      	cmp	r3, r2
 80012fe:	d11b      	bne.n	8001338 <HAL_TIMER_OUTCMP_Init+0x98>
		{
			HAL_RCC_TIMER3_EN();
 8001300:	4b8e      	ldr	r3, [pc, #568]	; (800153c <HAL_TIMER_OUTCMP_Init+0x29c>)
 8001302:	69db      	ldr	r3, [r3, #28]
 8001304:	4a8d      	ldr	r2, [pc, #564]	; (800153c <HAL_TIMER_OUTCMP_Init+0x29c>)
 8001306:	f043 0302 	orr.w	r3, r3, #2
 800130a:	61d3      	str	r3, [r2, #28]
			for(CNT=0;CNT<=Timer->NO_CMP_CHNS-1;CNT++)
 800130c:	2300      	movs	r3, #0
 800130e:	73fb      	strb	r3, [r7, #15]
 8001310:	e00b      	b.n	800132a <HAL_TIMER_OUTCMP_Init+0x8a>
				HAL_TIMER_CHN_CONFIG_GPIO(TIM2,Timer->CMP_CHN[CNT]);
 8001312:	7bfb      	ldrb	r3, [r7, #15]
 8001314:	687a      	ldr	r2, [r7, #4]
 8001316:	4413      	add	r3, r2
 8001318:	7f1b      	ldrb	r3, [r3, #28]
 800131a:	4619      	mov	r1, r3
 800131c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001320:	f7ff ff3a 	bl	8001198 <HAL_TIMER_CHN_CONFIG_GPIO>
			for(CNT=0;CNT<=Timer->NO_CMP_CHNS-1;CNT++)
 8001324:	7bfb      	ldrb	r3, [r7, #15]
 8001326:	3301      	adds	r3, #1
 8001328:	73fb      	strb	r3, [r7, #15]
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001330:	7bfa      	ldrb	r2, [r7, #15]
 8001332:	429a      	cmp	r2, r3
 8001334:	d3ed      	bcc.n	8001312 <HAL_TIMER_OUTCMP_Init+0x72>
 8001336:	e01f      	b.n	8001378 <HAL_TIMER_OUTCMP_Init+0xd8>
		}
		else if (Timer->Instance == TIM4)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a81      	ldr	r2, [pc, #516]	; (8001544 <HAL_TIMER_OUTCMP_Init+0x2a4>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d11a      	bne.n	8001378 <HAL_TIMER_OUTCMP_Init+0xd8>
		{
			HAL_RCC_TIMER4_EN();
 8001342:	4b7e      	ldr	r3, [pc, #504]	; (800153c <HAL_TIMER_OUTCMP_Init+0x29c>)
 8001344:	69db      	ldr	r3, [r3, #28]
 8001346:	4a7d      	ldr	r2, [pc, #500]	; (800153c <HAL_TIMER_OUTCMP_Init+0x29c>)
 8001348:	f043 0304 	orr.w	r3, r3, #4
 800134c:	61d3      	str	r3, [r2, #28]
			for (CNT = 0; CNT <= Timer->NO_CMP_CHNS - 1; CNT++)
 800134e:	2300      	movs	r3, #0
 8001350:	73fb      	strb	r3, [r7, #15]
 8001352:	e00b      	b.n	800136c <HAL_TIMER_OUTCMP_Init+0xcc>
				HAL_TIMER_CHN_CONFIG_GPIO(TIM2, Timer->CMP_CHN[CNT]);
 8001354:	7bfb      	ldrb	r3, [r7, #15]
 8001356:	687a      	ldr	r2, [r7, #4]
 8001358:	4413      	add	r3, r2
 800135a:	7f1b      	ldrb	r3, [r3, #28]
 800135c:	4619      	mov	r1, r3
 800135e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001362:	f7ff ff19 	bl	8001198 <HAL_TIMER_CHN_CONFIG_GPIO>
			for (CNT = 0; CNT <= Timer->NO_CMP_CHNS - 1; CNT++)
 8001366:	7bfb      	ldrb	r3, [r7, #15]
 8001368:	3301      	adds	r3, #1
 800136a:	73fb      	strb	r3, [r7, #15]
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001372:	7bfa      	ldrb	r2, [r7, #15]
 8001374:	429a      	cmp	r2, r3
 8001376:	d3ed      	bcc.n	8001354 <HAL_TIMER_OUTCMP_Init+0xb4>
		else {

		}

		/*-----------Enable Channel----------*/
		for(CNT=0;CNT<=Timer->NO_CMP_CHNS-1;CNT++)
 8001378:	2300      	movs	r3, #0
 800137a:	73fb      	strb	r3, [r7, #15]
 800137c:	e10c      	b.n	8001598 <HAL_TIMER_OUTCMP_Init+0x2f8>
		{
			switch (Timer->CMP_CHN[CNT]) {
 800137e:	7bfb      	ldrb	r3, [r7, #15]
 8001380:	687a      	ldr	r2, [r7, #4]
 8001382:	4413      	add	r3, r2
 8001384:	7f1b      	ldrb	r3, [r3, #28]
 8001386:	2b03      	cmp	r3, #3
 8001388:	f200 8103 	bhi.w	8001592 <HAL_TIMER_OUTCMP_Init+0x2f2>
 800138c:	a201      	add	r2, pc, #4	; (adr r2, 8001394 <HAL_TIMER_OUTCMP_Init+0xf4>)
 800138e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001392:	bf00      	nop
 8001394:	080013a5 	.word	0x080013a5
 8001398:	0800141d 	.word	0x0800141d
 800139c:	08001495 	.word	0x08001495
 80013a0:	0800150d 	.word	0x0800150d
			case HAL_TIMER_CMP_OUT_CHN_1:
				switch (Timer->CMP_Modes[CNT]) {
 80013a4:	7bfb      	ldrb	r3, [r7, #15]
 80013a6:	687a      	ldr	r2, [r7, #4]
 80013a8:	4413      	add	r3, r2
 80013aa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013ae:	2b08      	cmp	r3, #8
 80013b0:	d018      	beq.n	80013e4 <HAL_TIMER_OUTCMP_Init+0x144>
 80013b2:	2b08      	cmp	r3, #8
 80013b4:	dc1f      	bgt.n	80013f6 <HAL_TIMER_OUTCMP_Init+0x156>
 80013b6:	2b06      	cmp	r3, #6
 80013b8:	d002      	beq.n	80013c0 <HAL_TIMER_OUTCMP_Init+0x120>
 80013ba:	2b07      	cmp	r3, #7
 80013bc:	d009      	beq.n	80013d2 <HAL_TIMER_OUTCMP_Init+0x132>
 80013be:	e01a      	b.n	80013f6 <HAL_TIMER_OUTCMP_Init+0x156>
					case HAL_TIMER_OUPUT_CMP_MODE_ACTIVE:
						Timer->Instance->CCMR1 |= (0b001<<4);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	699a      	ldr	r2, [r3, #24]
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f042 0210 	orr.w	r2, r2, #16
 80013ce:	619a      	str	r2, [r3, #24]
						break;
 80013d0:	e011      	b.n	80013f6 <HAL_TIMER_OUTCMP_Init+0x156>
					case HAL_TIMER_OUPUT_CMP_MODE_TOGGLE:
						Timer->Instance->CCMR1 |= (0b011<<4);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	699a      	ldr	r2, [r3, #24]
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 80013e0:	619a      	str	r2, [r3, #24]
						break;
 80013e2:	e008      	b.n	80013f6 <HAL_TIMER_OUTCMP_Init+0x156>
					case HAL_TIMER_OUPUT_CMP_MODE_ACTLOW:
						Timer->Instance->CCMR1 |= (0b010<<4);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	699a      	ldr	r2, [r3, #24]
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f042 0220 	orr.w	r2, r2, #32
 80013f2:	619a      	str	r2, [r3, #24]
						break;
 80013f4:	bf00      	nop
				}
				Timer->Instance->CCR1 = (Timer->CCR_val[CNT] & 0xFFFF);
 80013f6:	7bfb      	ldrb	r3, [r7, #15]
 80013f8:	687a      	ldr	r2, [r7, #4]
 80013fa:	3302      	adds	r3, #2
 80013fc:	009b      	lsls	r3, r3, #2
 80013fe:	4413      	add	r3, r2
 8001400:	685a      	ldr	r2, [r3, #4]
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	b292      	uxth	r2, r2
 8001408:	635a      	str	r2, [r3, #52]	; 0x34
				Timer->Instance->CCER |= (1 << HAL_TIMER_CC1E_POS);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	6a1a      	ldr	r2, [r3, #32]
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f042 0201 	orr.w	r2, r2, #1
 8001418:	621a      	str	r2, [r3, #32]
				break;
 800141a:	e0ba      	b.n	8001592 <HAL_TIMER_OUTCMP_Init+0x2f2>
			case HAL_TIMER_CMP_OUT_CHN_2:
				switch (Timer->CMP_Modes[CNT]) {
 800141c:	7bfb      	ldrb	r3, [r7, #15]
 800141e:	687a      	ldr	r2, [r7, #4]
 8001420:	4413      	add	r3, r2
 8001422:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001426:	2b08      	cmp	r3, #8
 8001428:	d018      	beq.n	800145c <HAL_TIMER_OUTCMP_Init+0x1bc>
 800142a:	2b08      	cmp	r3, #8
 800142c:	dc1f      	bgt.n	800146e <HAL_TIMER_OUTCMP_Init+0x1ce>
 800142e:	2b06      	cmp	r3, #6
 8001430:	d002      	beq.n	8001438 <HAL_TIMER_OUTCMP_Init+0x198>
 8001432:	2b07      	cmp	r3, #7
 8001434:	d009      	beq.n	800144a <HAL_TIMER_OUTCMP_Init+0x1aa>
 8001436:	e01a      	b.n	800146e <HAL_TIMER_OUTCMP_Init+0x1ce>
					case HAL_TIMER_OUPUT_CMP_MODE_ACTIVE:
						Timer->Instance->CCMR1 |= (0b001<<12);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	699a      	ldr	r2, [r3, #24]
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001446:	619a      	str	r2, [r3, #24]
						break;
 8001448:	e011      	b.n	800146e <HAL_TIMER_OUTCMP_Init+0x1ce>
					case HAL_TIMER_OUPUT_CMP_MODE_TOGGLE:
						Timer->Instance->CCMR1 |= (0b011<<12);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	699a      	ldr	r2, [r3, #24]
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 8001458:	619a      	str	r2, [r3, #24]
						break;
 800145a:	e008      	b.n	800146e <HAL_TIMER_OUTCMP_Init+0x1ce>
					case HAL_TIMER_OUPUT_CMP_MODE_ACTLOW:
						Timer->Instance->CCMR1 |= (0b010<<12);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	699a      	ldr	r2, [r3, #24]
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800146a:	619a      	str	r2, [r3, #24]
						break;
 800146c:	bf00      	nop
				}
				Timer->Instance->CCR2 = (Timer->CCR_val[CNT] & 0xFFFF);
 800146e:	7bfb      	ldrb	r3, [r7, #15]
 8001470:	687a      	ldr	r2, [r7, #4]
 8001472:	3302      	adds	r3, #2
 8001474:	009b      	lsls	r3, r3, #2
 8001476:	4413      	add	r3, r2
 8001478:	685a      	ldr	r2, [r3, #4]
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	b292      	uxth	r2, r2
 8001480:	639a      	str	r2, [r3, #56]	; 0x38
				Timer->Instance->CCER |= (1 << HAL_TIMER_CC2E_POS);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	6a1a      	ldr	r2, [r3, #32]
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f042 0210 	orr.w	r2, r2, #16
 8001490:	621a      	str	r2, [r3, #32]
				break;
 8001492:	e07e      	b.n	8001592 <HAL_TIMER_OUTCMP_Init+0x2f2>
			case HAL_TIMER_CMP_OUT_CHN_3:
				switch (Timer->CMP_Modes[CNT]) {
 8001494:	7bfb      	ldrb	r3, [r7, #15]
 8001496:	687a      	ldr	r2, [r7, #4]
 8001498:	4413      	add	r3, r2
 800149a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800149e:	2b08      	cmp	r3, #8
 80014a0:	d018      	beq.n	80014d4 <HAL_TIMER_OUTCMP_Init+0x234>
 80014a2:	2b08      	cmp	r3, #8
 80014a4:	dc1f      	bgt.n	80014e6 <HAL_TIMER_OUTCMP_Init+0x246>
 80014a6:	2b06      	cmp	r3, #6
 80014a8:	d002      	beq.n	80014b0 <HAL_TIMER_OUTCMP_Init+0x210>
 80014aa:	2b07      	cmp	r3, #7
 80014ac:	d009      	beq.n	80014c2 <HAL_TIMER_OUTCMP_Init+0x222>
 80014ae:	e01a      	b.n	80014e6 <HAL_TIMER_OUTCMP_Init+0x246>
					case HAL_TIMER_OUPUT_CMP_MODE_ACTIVE:
						Timer->Instance->CCMR2 |= (0b001<<4);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	69da      	ldr	r2, [r3, #28]
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f042 0210 	orr.w	r2, r2, #16
 80014be:	61da      	str	r2, [r3, #28]
						break;
 80014c0:	e011      	b.n	80014e6 <HAL_TIMER_OUTCMP_Init+0x246>
					case HAL_TIMER_OUPUT_CMP_MODE_TOGGLE:
						Timer->Instance->CCMR2 |= (0b011<<4);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	69da      	ldr	r2, [r3, #28]
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 80014d0:	61da      	str	r2, [r3, #28]
						break;
 80014d2:	e008      	b.n	80014e6 <HAL_TIMER_OUTCMP_Init+0x246>
					case HAL_TIMER_OUPUT_CMP_MODE_ACTLOW:
						Timer->Instance->CCMR2 |= (0b010<<4);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	69da      	ldr	r2, [r3, #28]
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f042 0220 	orr.w	r2, r2, #32
 80014e2:	61da      	str	r2, [r3, #28]
						break;
 80014e4:	bf00      	nop
				}
				Timer->Instance->CCR3 = (Timer->CCR_val[CNT] & 0xFFFF);
 80014e6:	7bfb      	ldrb	r3, [r7, #15]
 80014e8:	687a      	ldr	r2, [r7, #4]
 80014ea:	3302      	adds	r3, #2
 80014ec:	009b      	lsls	r3, r3, #2
 80014ee:	4413      	add	r3, r2
 80014f0:	685a      	ldr	r2, [r3, #4]
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	b292      	uxth	r2, r2
 80014f8:	63da      	str	r2, [r3, #60]	; 0x3c
				Timer->Instance->CCER |= (1 << HAL_TIMER_CC3E_POS);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	6a1a      	ldr	r2, [r3, #32]
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001508:	621a      	str	r2, [r3, #32]
				break;
 800150a:	e042      	b.n	8001592 <HAL_TIMER_OUTCMP_Init+0x2f2>
			case HAL_TIMER_CMP_OUT_CHN_4:
				switch (Timer->CMP_Modes[CNT]) {
 800150c:	7bfb      	ldrb	r3, [r7, #15]
 800150e:	687a      	ldr	r2, [r7, #4]
 8001510:	4413      	add	r3, r2
 8001512:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001516:	2b08      	cmp	r3, #8
 8001518:	d01f      	beq.n	800155a <HAL_TIMER_OUTCMP_Init+0x2ba>
 800151a:	2b08      	cmp	r3, #8
 800151c:	dc26      	bgt.n	800156c <HAL_TIMER_OUTCMP_Init+0x2cc>
 800151e:	2b06      	cmp	r3, #6
 8001520:	d002      	beq.n	8001528 <HAL_TIMER_OUTCMP_Init+0x288>
 8001522:	2b07      	cmp	r3, #7
 8001524:	d010      	beq.n	8001548 <HAL_TIMER_OUTCMP_Init+0x2a8>
 8001526:	e021      	b.n	800156c <HAL_TIMER_OUTCMP_Init+0x2cc>
					case HAL_TIMER_OUPUT_CMP_MODE_ACTIVE:
						Timer->Instance->CCMR2 |= (0b001<<12);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	69da      	ldr	r2, [r3, #28]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001536:	61da      	str	r2, [r3, #28]
						break;
 8001538:	e018      	b.n	800156c <HAL_TIMER_OUTCMP_Init+0x2cc>
 800153a:	bf00      	nop
 800153c:	40021000 	.word	0x40021000
 8001540:	40000400 	.word	0x40000400
 8001544:	40000800 	.word	0x40000800
					case HAL_TIMER_OUPUT_CMP_MODE_TOGGLE:
						Timer->Instance->CCMR2 |= (0b011<<12);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	69da      	ldr	r2, [r3, #28]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 8001556:	61da      	str	r2, [r3, #28]
						break;
 8001558:	e008      	b.n	800156c <HAL_TIMER_OUTCMP_Init+0x2cc>
					case HAL_TIMER_OUPUT_CMP_MODE_ACTLOW:
						Timer->Instance->CCMR2 |= (0b010<<12);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	69da      	ldr	r2, [r3, #28]
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001568:	61da      	str	r2, [r3, #28]
						break;
 800156a:	bf00      	nop
				}
				Timer->Instance->CCR4 = (Timer->CCR_val[CNT] & 0xFFFF);
 800156c:	7bfb      	ldrb	r3, [r7, #15]
 800156e:	687a      	ldr	r2, [r7, #4]
 8001570:	3302      	adds	r3, #2
 8001572:	009b      	lsls	r3, r3, #2
 8001574:	4413      	add	r3, r2
 8001576:	685a      	ldr	r2, [r3, #4]
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	b292      	uxth	r2, r2
 800157e:	641a      	str	r2, [r3, #64]	; 0x40
				Timer->Instance->CCER |= (1 << HAL_TIMER_CC4E_POS);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	6a1a      	ldr	r2, [r3, #32]
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800158e:	621a      	str	r2, [r3, #32]
				break;
 8001590:	bf00      	nop
		for(CNT=0;CNT<=Timer->NO_CMP_CHNS-1;CNT++)
 8001592:	7bfb      	ldrb	r3, [r7, #15]
 8001594:	3301      	adds	r3, #1
 8001596:	73fb      	strb	r3, [r7, #15]
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800159e:	7bfa      	ldrb	r2, [r7, #15]
 80015a0:	429a      	cmp	r2, r3
 80015a2:	f4ff aeec 	bcc.w	800137e <HAL_TIMER_OUTCMP_Init+0xde>
			}
		}
		Timer->Instance->ARR = Timer->ARR_val;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	687a      	ldr	r2, [r7, #4]
 80015ac:	6892      	ldr	r2, [r2, #8]
 80015ae:	62da      	str	r2, [r3, #44]	; 0x2c

		Timer->Instance->PSC = Timer->Prescaler;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	687a      	ldr	r2, [r7, #4]
 80015b6:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80015b8:	629a      	str	r2, [r3, #40]	; 0x28

		Timer->Instance->CR1 |= HAL_TIMER_CNT_EN;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	681a      	ldr	r2, [r3, #0]
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f042 0201 	orr.w	r2, r2, #1
 80015c8:	601a      	str	r2, [r3, #0]
	}
}
 80015ca:	bf00      	nop
 80015cc:	3710      	adds	r7, #16
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop

080015d4 <Baud_Rate_Gen>:
#include "HAL_Usart.h"

USART_TypeDef * Handle=NULL;

static uint16_t Baud_Rate_Gen(uint32_t PERIPH_CLK,uint32_t BAUD_rate)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b083      	sub	sp, #12
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
 80015dc:	6039      	str	r1, [r7, #0]
	return ((PERIPH_CLK + (BAUD_rate / 2)) / BAUD_rate);
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	085a      	lsrs	r2, r3, #1
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	441a      	add	r2, r3
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80015ec:	b29b      	uxth	r3, r3
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	370c      	adds	r7, #12
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bc80      	pop	{r7}
 80015f6:	4770      	bx	lr

080015f8 <PLL_CLK_CALC_S>:

static uint32_t PLL_CLK_CALC_S(uint32_t CLK)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b083      	sub	sp, #12
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
	switch((RCC->CFGR & ((0x0000000F) << 18))>>18)
 8001600:	4b48      	ldr	r3, [pc, #288]	; (8001724 <PLL_CLK_CALC_S+0x12c>)
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	0c9b      	lsrs	r3, r3, #18
 8001606:	f003 030f 	and.w	r3, r3, #15
 800160a:	2b0f      	cmp	r3, #15
 800160c:	f200 8084 	bhi.w	8001718 <PLL_CLK_CALC_S+0x120>
 8001610:	a201      	add	r2, pc, #4	; (adr r2, 8001618 <PLL_CLK_CALC_S+0x20>)
 8001612:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001616:	bf00      	nop
 8001618:	08001659 	.word	0x08001659
 800161c:	08001661 	.word	0x08001661
 8001620:	0800166d 	.word	0x0800166d
 8001624:	08001675 	.word	0x08001675
 8001628:	08001681 	.word	0x08001681
 800162c:	0800168f 	.word	0x0800168f
 8001630:	0800169b 	.word	0x0800169b
 8001634:	080016a3 	.word	0x080016a3
 8001638:	080016af 	.word	0x080016af
 800163c:	080016bd 	.word	0x080016bd
 8001640:	080016cd 	.word	0x080016cd
 8001644:	080016db 	.word	0x080016db
 8001648:	080016eb 	.word	0x080016eb
 800164c:	080016f9 	.word	0x080016f9
 8001650:	08001705 	.word	0x08001705
 8001654:	0800170d 	.word	0x0800170d
	{
		case 0x00000000U:
			CLK*=2;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	005b      	lsls	r3, r3, #1
 800165c:	607b      	str	r3, [r7, #4]
			break;
 800165e:	e05b      	b.n	8001718 <PLL_CLK_CALC_S+0x120>
		case 0x00000001U:
			CLK*=3;
 8001660:	687a      	ldr	r2, [r7, #4]
 8001662:	4613      	mov	r3, r2
 8001664:	005b      	lsls	r3, r3, #1
 8001666:	4413      	add	r3, r2
 8001668:	607b      	str	r3, [r7, #4]
			break;
 800166a:	e055      	b.n	8001718 <PLL_CLK_CALC_S+0x120>
		case 0x00000002U:
			CLK*=4;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	009b      	lsls	r3, r3, #2
 8001670:	607b      	str	r3, [r7, #4]
			break;
 8001672:	e051      	b.n	8001718 <PLL_CLK_CALC_S+0x120>
		case 0x00000003U:
			CLK*=5;
 8001674:	687a      	ldr	r2, [r7, #4]
 8001676:	4613      	mov	r3, r2
 8001678:	009b      	lsls	r3, r3, #2
 800167a:	4413      	add	r3, r2
 800167c:	607b      	str	r3, [r7, #4]
			break;
 800167e:	e04b      	b.n	8001718 <PLL_CLK_CALC_S+0x120>
		case 0x00000004U:
			CLK*=6;
 8001680:	687a      	ldr	r2, [r7, #4]
 8001682:	4613      	mov	r3, r2
 8001684:	005b      	lsls	r3, r3, #1
 8001686:	4413      	add	r3, r2
 8001688:	005b      	lsls	r3, r3, #1
 800168a:	607b      	str	r3, [r7, #4]
			break;
 800168c:	e044      	b.n	8001718 <PLL_CLK_CALC_S+0x120>
		case 0x00000005U:
			CLK*=7;
 800168e:	687a      	ldr	r2, [r7, #4]
 8001690:	4613      	mov	r3, r2
 8001692:	00db      	lsls	r3, r3, #3
 8001694:	1a9b      	subs	r3, r3, r2
 8001696:	607b      	str	r3, [r7, #4]
			break;
 8001698:	e03e      	b.n	8001718 <PLL_CLK_CALC_S+0x120>
		case 0x00000006U:
			CLK*=8;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	00db      	lsls	r3, r3, #3
 800169e:	607b      	str	r3, [r7, #4]
			break;
 80016a0:	e03a      	b.n	8001718 <PLL_CLK_CALC_S+0x120>
		case 0x00000007U:
			CLK*=9;
 80016a2:	687a      	ldr	r2, [r7, #4]
 80016a4:	4613      	mov	r3, r2
 80016a6:	00db      	lsls	r3, r3, #3
 80016a8:	4413      	add	r3, r2
 80016aa:	607b      	str	r3, [r7, #4]
			break;
 80016ac:	e034      	b.n	8001718 <PLL_CLK_CALC_S+0x120>
		case 0x00000008U:
			CLK*=10;
 80016ae:	687a      	ldr	r2, [r7, #4]
 80016b0:	4613      	mov	r3, r2
 80016b2:	009b      	lsls	r3, r3, #2
 80016b4:	4413      	add	r3, r2
 80016b6:	005b      	lsls	r3, r3, #1
 80016b8:	607b      	str	r3, [r7, #4]
			break;
 80016ba:	e02d      	b.n	8001718 <PLL_CLK_CALC_S+0x120>
		case 0x00000009U:
			CLK*=11;
 80016bc:	687a      	ldr	r2, [r7, #4]
 80016be:	4613      	mov	r3, r2
 80016c0:	009b      	lsls	r3, r3, #2
 80016c2:	4413      	add	r3, r2
 80016c4:	005b      	lsls	r3, r3, #1
 80016c6:	4413      	add	r3, r2
 80016c8:	607b      	str	r3, [r7, #4]
			break;
 80016ca:	e025      	b.n	8001718 <PLL_CLK_CALC_S+0x120>
		case 0x0000000AU:
			CLK*=12;
 80016cc:	687a      	ldr	r2, [r7, #4]
 80016ce:	4613      	mov	r3, r2
 80016d0:	005b      	lsls	r3, r3, #1
 80016d2:	4413      	add	r3, r2
 80016d4:	009b      	lsls	r3, r3, #2
 80016d6:	607b      	str	r3, [r7, #4]
			break;
 80016d8:	e01e      	b.n	8001718 <PLL_CLK_CALC_S+0x120>
		case 0x0000000BU:
			CLK*=13;
 80016da:	687a      	ldr	r2, [r7, #4]
 80016dc:	4613      	mov	r3, r2
 80016de:	005b      	lsls	r3, r3, #1
 80016e0:	4413      	add	r3, r2
 80016e2:	009b      	lsls	r3, r3, #2
 80016e4:	4413      	add	r3, r2
 80016e6:	607b      	str	r3, [r7, #4]
			break;
 80016e8:	e016      	b.n	8001718 <PLL_CLK_CALC_S+0x120>
		case 0x0000000CU:
			CLK*=14;
 80016ea:	687a      	ldr	r2, [r7, #4]
 80016ec:	4613      	mov	r3, r2
 80016ee:	00db      	lsls	r3, r3, #3
 80016f0:	1a9b      	subs	r3, r3, r2
 80016f2:	005b      	lsls	r3, r3, #1
 80016f4:	607b      	str	r3, [r7, #4]
			break;
 80016f6:	e00f      	b.n	8001718 <PLL_CLK_CALC_S+0x120>
		case 0x0000000DU:
			CLK*=15;
 80016f8:	687a      	ldr	r2, [r7, #4]
 80016fa:	4613      	mov	r3, r2
 80016fc:	011b      	lsls	r3, r3, #4
 80016fe:	1a9b      	subs	r3, r3, r2
 8001700:	607b      	str	r3, [r7, #4]
			break;
 8001702:	e009      	b.n	8001718 <PLL_CLK_CALC_S+0x120>
		case 0x0000000EU:
			CLK*=16;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	011b      	lsls	r3, r3, #4
 8001708:	607b      	str	r3, [r7, #4]
			break;
 800170a:	e005      	b.n	8001718 <PLL_CLK_CALC_S+0x120>
		case 0x0000000FU:
			CLK*=17;
 800170c:	687a      	ldr	r2, [r7, #4]
 800170e:	4613      	mov	r3, r2
 8001710:	011b      	lsls	r3, r3, #4
 8001712:	4413      	add	r3, r2
 8001714:	607b      	str	r3, [r7, #4]
			break;
 8001716:	bf00      	nop
	}
	return CLK;
 8001718:	687b      	ldr	r3, [r7, #4]
}
 800171a:	4618      	mov	r0, r3
 800171c:	370c      	adds	r7, #12
 800171e:	46bd      	mov	sp, r7
 8001720:	bc80      	pop	{r7}
 8001722:	4770      	bx	lr
 8001724:	40021000 	.word	0x40021000

08001728 <PLL_CLK_CALC>:

uint32_t PLL_CLK_CALC()
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b082      	sub	sp, #8
 800172c:	af00      	add	r7, sp, #0
	uint32_t CLK=8000000UL;
 800172e:	4b18      	ldr	r3, [pc, #96]	; (8001790 <PLL_CLK_CALC+0x68>)
 8001730:	607b      	str	r3, [r7, #4]
	switch((RCC->CFGR & ((0x00000001) << PLLSRC_POS))>>PLLSRC_POS)
 8001732:	4b18      	ldr	r3, [pc, #96]	; (8001794 <PLL_CLK_CALC+0x6c>)
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	0c1b      	lsrs	r3, r3, #16
 8001738:	f003 0301 	and.w	r3, r3, #1
 800173c:	2b00      	cmp	r3, #0
 800173e:	d002      	beq.n	8001746 <PLL_CLK_CALC+0x1e>
 8001740:	2b01      	cmp	r3, #1
 8001742:	d008      	beq.n	8001756 <PLL_CLK_CALC+0x2e>
 8001744:	e01f      	b.n	8001786 <PLL_CLK_CALC+0x5e>
	{
		case 0:
			CLK/=2;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	085b      	lsrs	r3, r3, #1
 800174a:	607b      	str	r3, [r7, #4]
			CLK=PLL_CLK_CALC_S(CLK);
 800174c:	6878      	ldr	r0, [r7, #4]
 800174e:	f7ff ff53 	bl	80015f8 <PLL_CLK_CALC_S>
 8001752:	6078      	str	r0, [r7, #4]
			break;
 8001754:	e017      	b.n	8001786 <PLL_CLK_CALC+0x5e>
		case 1:
			switch((RCC->CFGR & ((0x00000001) << PLLXTPRE_POS))>>PLLXTPRE_POS)
 8001756:	4b0f      	ldr	r3, [pc, #60]	; (8001794 <PLL_CLK_CALC+0x6c>)
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	0c5b      	lsrs	r3, r3, #17
 800175c:	f003 0301 	and.w	r3, r3, #1
 8001760:	2b00      	cmp	r3, #0
 8001762:	d002      	beq.n	800176a <PLL_CLK_CALC+0x42>
 8001764:	2b01      	cmp	r3, #1
 8001766:	d005      	beq.n	8001774 <PLL_CLK_CALC+0x4c>
				case 1:
					CLK/=2;
					CLK=PLL_CLK_CALC_S(CLK);
					break;
			}
			break;
 8001768:	e00c      	b.n	8001784 <PLL_CLK_CALC+0x5c>
					CLK=PLL_CLK_CALC_S(CLK);
 800176a:	6878      	ldr	r0, [r7, #4]
 800176c:	f7ff ff44 	bl	80015f8 <PLL_CLK_CALC_S>
 8001770:	6078      	str	r0, [r7, #4]
					break;
 8001772:	e007      	b.n	8001784 <PLL_CLK_CALC+0x5c>
					CLK/=2;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	085b      	lsrs	r3, r3, #1
 8001778:	607b      	str	r3, [r7, #4]
					CLK=PLL_CLK_CALC_S(CLK);
 800177a:	6878      	ldr	r0, [r7, #4]
 800177c:	f7ff ff3c 	bl	80015f8 <PLL_CLK_CALC_S>
 8001780:	6078      	str	r0, [r7, #4]
					break;
 8001782:	bf00      	nop
			break;
 8001784:	bf00      	nop
	}
	return CLK;
 8001786:	687b      	ldr	r3, [r7, #4]
}
 8001788:	4618      	mov	r0, r3
 800178a:	3708      	adds	r7, #8
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}
 8001790:	007a1200 	.word	0x007a1200
 8001794:	40021000 	.word	0x40021000

08001798 <CLK_CALC>:



uint32_t CLK_CALC(uint32_t CLK,uint8_t SH)
{
 8001798:	b480      	push	{r7}
 800179a:	b085      	sub	sp, #20
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
 80017a0:	460b      	mov	r3, r1
 80017a2:	70fb      	strb	r3, [r7, #3]
	uint32_t CLK_RET = CLK;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	60fb      	str	r3, [r7, #12]
	switch ((RCC->CFGR & ((0x0000000F) << 4))>>4) {
 80017a8:	4b3f      	ldr	r3, [pc, #252]	; (80018a8 <CLK_CALC+0x110>)
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	091b      	lsrs	r3, r3, #4
 80017ae:	f003 030f 	and.w	r3, r3, #15
 80017b2:	2b0f      	cmp	r3, #15
 80017b4:	d842      	bhi.n	800183c <CLK_CALC+0xa4>
 80017b6:	a201      	add	r2, pc, #4	; (adr r2, 80017bc <CLK_CALC+0x24>)
 80017b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017bc:	0800183d 	.word	0x0800183d
 80017c0:	0800183d 	.word	0x0800183d
 80017c4:	0800183d 	.word	0x0800183d
 80017c8:	0800183d 	.word	0x0800183d
 80017cc:	0800183d 	.word	0x0800183d
 80017d0:	0800183d 	.word	0x0800183d
 80017d4:	0800183d 	.word	0x0800183d
 80017d8:	0800183d 	.word	0x0800183d
 80017dc:	080017fd 	.word	0x080017fd
 80017e0:	08001805 	.word	0x08001805
 80017e4:	0800180d 	.word	0x0800180d
 80017e8:	08001815 	.word	0x08001815
 80017ec:	0800181d 	.word	0x0800181d
 80017f0:	08001825 	.word	0x08001825
 80017f4:	0800182d 	.word	0x0800182d
 80017f8:	08001835 	.word	0x08001835
		case 0b0110:
		case 0b0111:
			CLK_RET /= 1;
			break;
		case 0b1000:
			CLK_RET /= 2;
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	085b      	lsrs	r3, r3, #1
 8001800:	60fb      	str	r3, [r7, #12]
			break;
 8001802:	e01b      	b.n	800183c <CLK_CALC+0xa4>
		case 0b1001:
			CLK_RET /= 4;
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	089b      	lsrs	r3, r3, #2
 8001808:	60fb      	str	r3, [r7, #12]
			break;
 800180a:	e017      	b.n	800183c <CLK_CALC+0xa4>
		case 0b1010:
			CLK_RET /= 8;
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	08db      	lsrs	r3, r3, #3
 8001810:	60fb      	str	r3, [r7, #12]
			break;
 8001812:	e013      	b.n	800183c <CLK_CALC+0xa4>
		case 0b1011:
			CLK_RET /= 16;
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	091b      	lsrs	r3, r3, #4
 8001818:	60fb      	str	r3, [r7, #12]
			break;
 800181a:	e00f      	b.n	800183c <CLK_CALC+0xa4>
		case 0b1100:
			CLK_RET /= 64;
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	099b      	lsrs	r3, r3, #6
 8001820:	60fb      	str	r3, [r7, #12]
			break;
 8001822:	e00b      	b.n	800183c <CLK_CALC+0xa4>
		case 0b1101:
			CLK_RET /= 128;
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	09db      	lsrs	r3, r3, #7
 8001828:	60fb      	str	r3, [r7, #12]
			break;
 800182a:	e007      	b.n	800183c <CLK_CALC+0xa4>
		case 0b1110:
			CLK_RET /= 256;
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	0a1b      	lsrs	r3, r3, #8
 8001830:	60fb      	str	r3, [r7, #12]
			break;
 8001832:	e003      	b.n	800183c <CLK_CALC+0xa4>
		case 0b1111:
			CLK_RET /= 512;
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	0a5b      	lsrs	r3, r3, #9
 8001838:	60fb      	str	r3, [r7, #12]
			break;
 800183a:	bf00      	nop
	}
	switch ((RCC->CFGR & (0x00000007 << SH))>>SH) {
 800183c:	4b1a      	ldr	r3, [pc, #104]	; (80018a8 <CLK_CALC+0x110>)
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	78fa      	ldrb	r2, [r7, #3]
 8001842:	2107      	movs	r1, #7
 8001844:	fa01 f202 	lsl.w	r2, r1, r2
 8001848:	401a      	ands	r2, r3
 800184a:	78fb      	ldrb	r3, [r7, #3]
 800184c:	fa22 f303 	lsr.w	r3, r2, r3
 8001850:	2b07      	cmp	r3, #7
 8001852:	d823      	bhi.n	800189c <CLK_CALC+0x104>
 8001854:	a201      	add	r2, pc, #4	; (adr r2, 800185c <CLK_CALC+0xc4>)
 8001856:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800185a:	bf00      	nop
 800185c:	0800189d 	.word	0x0800189d
 8001860:	0800189d 	.word	0x0800189d
 8001864:	0800189d 	.word	0x0800189d
 8001868:	0800189d 	.word	0x0800189d
 800186c:	0800187d 	.word	0x0800187d
 8001870:	08001885 	.word	0x08001885
 8001874:	0800188d 	.word	0x0800188d
 8001878:	08001895 	.word	0x08001895
		case 0b010:
		case 0b011:
			CLK_RET /=1;
			break;
		case 0b100:
			CLK_RET /= 2;
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	085b      	lsrs	r3, r3, #1
 8001880:	60fb      	str	r3, [r7, #12]
			break;
 8001882:	e00b      	b.n	800189c <CLK_CALC+0x104>
		case 0b101:
			CLK_RET /= 4;
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	089b      	lsrs	r3, r3, #2
 8001888:	60fb      	str	r3, [r7, #12]
			break;
 800188a:	e007      	b.n	800189c <CLK_CALC+0x104>
		case 0b110:
			CLK_RET /= 8;
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	08db      	lsrs	r3, r3, #3
 8001890:	60fb      	str	r3, [r7, #12]
			break;
 8001892:	e003      	b.n	800189c <CLK_CALC+0x104>
		case 0b111:
			CLK_RET /= 16;
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	091b      	lsrs	r3, r3, #4
 8001898:	60fb      	str	r3, [r7, #12]
			break;
 800189a:	bf00      	nop
	}
	return CLK_RET;
 800189c:	68fb      	ldr	r3, [r7, #12]
}
 800189e:	4618      	mov	r0, r3
 80018a0:	3714      	adds	r7, #20
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bc80      	pop	{r7}
 80018a6:	4770      	bx	lr
 80018a8:	40021000 	.word	0x40021000

080018ac <HAL_UART_Init>:

void HAL_UART_Init(UART_t *HAL_Uart)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b08e      	sub	sp, #56	; 0x38
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
	if(HAL_Uart!=NULL)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	f000 8177 	beq.w	8001baa <HAL_UART_Init+0x2fe>
	{
		USART_TypeDef *HAL_USART_CONFIG=HAL_Uart->Instance;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	633b      	str	r3, [r7, #48]	; 0x30
		GPIO_TypeDef  *GPIO_PORT=NULL;
 80018c2:	2300      	movs	r3, #0
 80018c4:	62fb      	str	r3, [r7, #44]	; 0x2c
		uint32_t USART_PERIPH_CLK=0;
 80018c6:	2300      	movs	r3, #0
 80018c8:	637b      	str	r3, [r7, #52]	; 0x34
		GPIO_t TX;
		GPIO_t RX;

		Handle=HAL_USART_CONFIG;
 80018ca:	4a9b      	ldr	r2, [pc, #620]	; (8001b38 <HAL_UART_Init+0x28c>)
 80018cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018ce:	6013      	str	r3, [r2, #0]
		TX.PIN=(HAL_Uart->Instance==USART1)?GPIO_PIN_9:(HAL_Uart->Instance==USART2)?GPIO_PIN_2:GPIO_PIN_10;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a99      	ldr	r2, [pc, #612]	; (8001b3c <HAL_UART_Init+0x290>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d008      	beq.n	80018ec <HAL_UART_Init+0x40>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4a98      	ldr	r2, [pc, #608]	; (8001b40 <HAL_UART_Init+0x294>)
 80018e0:	4293      	cmp	r3, r2
 80018e2:	d101      	bne.n	80018e8 <HAL_UART_Init+0x3c>
 80018e4:	2302      	movs	r3, #2
 80018e6:	e002      	b.n	80018ee <HAL_UART_Init+0x42>
 80018e8:	230a      	movs	r3, #10
 80018ea:	e000      	b.n	80018ee <HAL_UART_Init+0x42>
 80018ec:	2309      	movs	r3, #9
 80018ee:	623b      	str	r3, [r7, #32]
		RX.PIN=(HAL_Uart->Instance==USART1)?GPIO_PIN_10:(HAL_Uart->Instance==USART2)?GPIO_PIN_3:GPIO_PIN_11;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a91      	ldr	r2, [pc, #580]	; (8001b3c <HAL_UART_Init+0x290>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d008      	beq.n	800190c <HAL_UART_Init+0x60>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4a90      	ldr	r2, [pc, #576]	; (8001b40 <HAL_UART_Init+0x294>)
 8001900:	4293      	cmp	r3, r2
 8001902:	d101      	bne.n	8001908 <HAL_UART_Init+0x5c>
 8001904:	2303      	movs	r3, #3
 8001906:	e002      	b.n	800190e <HAL_UART_Init+0x62>
 8001908:	230b      	movs	r3, #11
 800190a:	e000      	b.n	800190e <HAL_UART_Init+0x62>
 800190c:	230a      	movs	r3, #10
 800190e:	613b      	str	r3, [r7, #16]

		TX.SPEED=HAL_GPIO_SPEED_FREQ_HIGH;
 8001910:	2303      	movs	r3, #3
 8001912:	61fb      	str	r3, [r7, #28]
		TX.Mode=HAL_GPIO_OUT_ALT_PP;
 8001914:	2303      	movs	r3, #3
 8001916:	61bb      	str	r3, [r7, #24]
		RX.Mode=HAL_GPIO_IN;
 8001918:	2305      	movs	r3, #5
 800191a:	60bb      	str	r3, [r7, #8]
		RX.PULL=HAL_GPIO_NOPULL;
 800191c:	2300      	movs	r3, #0
 800191e:	617b      	str	r3, [r7, #20]

		GPIO_PORT=((HAL_USART_CONFIG)==USART1)?GPIOA:((HAL_USART_CONFIG)==USART2)?GPIOA:GPIOB;
 8001920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001922:	4a86      	ldr	r2, [pc, #536]	; (8001b3c <HAL_UART_Init+0x290>)
 8001924:	4293      	cmp	r3, r2
 8001926:	d007      	beq.n	8001938 <HAL_UART_Init+0x8c>
 8001928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800192a:	4a85      	ldr	r2, [pc, #532]	; (8001b40 <HAL_UART_Init+0x294>)
 800192c:	4293      	cmp	r3, r2
 800192e:	d101      	bne.n	8001934 <HAL_UART_Init+0x88>
 8001930:	4b84      	ldr	r3, [pc, #528]	; (8001b44 <HAL_UART_Init+0x298>)
 8001932:	e002      	b.n	800193a <HAL_UART_Init+0x8e>
 8001934:	4b84      	ldr	r3, [pc, #528]	; (8001b48 <HAL_UART_Init+0x29c>)
 8001936:	e000      	b.n	800193a <HAL_UART_Init+0x8e>
 8001938:	4b82      	ldr	r3, [pc, #520]	; (8001b44 <HAL_UART_Init+0x298>)
 800193a:	62fb      	str	r3, [r7, #44]	; 0x2c

		HAL_USART_CONFIG=HAL_Uart->Instance;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	633b      	str	r3, [r7, #48]	; 0x30

		/*Enable USART RCC CLOCK*/
		if(HAL_USART_CONFIG == USART1)
 8001942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001944:	4a7d      	ldr	r2, [pc, #500]	; (8001b3c <HAL_UART_Init+0x290>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d106      	bne.n	8001958 <HAL_UART_Init+0xac>
			HAL_RCC_USART1_EN();
 800194a:	4b80      	ldr	r3, [pc, #512]	; (8001b4c <HAL_UART_Init+0x2a0>)
 800194c:	699b      	ldr	r3, [r3, #24]
 800194e:	4a7f      	ldr	r2, [pc, #508]	; (8001b4c <HAL_UART_Init+0x2a0>)
 8001950:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001954:	6193      	str	r3, [r2, #24]
 8001956:	e014      	b.n	8001982 <HAL_UART_Init+0xd6>
		else if(HAL_USART_CONFIG == USART2)
 8001958:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800195a:	4a79      	ldr	r2, [pc, #484]	; (8001b40 <HAL_UART_Init+0x294>)
 800195c:	4293      	cmp	r3, r2
 800195e:	d106      	bne.n	800196e <HAL_UART_Init+0xc2>
			HAL_RCC_USART2_EN();
 8001960:	4b7a      	ldr	r3, [pc, #488]	; (8001b4c <HAL_UART_Init+0x2a0>)
 8001962:	69db      	ldr	r3, [r3, #28]
 8001964:	4a79      	ldr	r2, [pc, #484]	; (8001b4c <HAL_UART_Init+0x2a0>)
 8001966:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800196a:	61d3      	str	r3, [r2, #28]
 800196c:	e009      	b.n	8001982 <HAL_UART_Init+0xd6>
		else if(HAL_USART_CONFIG == USART3)
 800196e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001970:	4a77      	ldr	r2, [pc, #476]	; (8001b50 <HAL_UART_Init+0x2a4>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d105      	bne.n	8001982 <HAL_UART_Init+0xd6>
			HAL_RCC_USART3_EN();
 8001976:	4b75      	ldr	r3, [pc, #468]	; (8001b4c <HAL_UART_Init+0x2a0>)
 8001978:	69db      	ldr	r3, [r3, #28]
 800197a:	4a74      	ldr	r2, [pc, #464]	; (8001b4c <HAL_UART_Init+0x2a0>)
 800197c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001980:	61d3      	str	r3, [r2, #28]

		/*Init GPIO Pins TX,RX */
		switch(HAL_Uart->Mode)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	695b      	ldr	r3, [r3, #20]
 8001986:	2b02      	cmp	r3, #2
 8001988:	d013      	beq.n	80019b2 <HAL_UART_Init+0x106>
 800198a:	2b02      	cmp	r3, #2
 800198c:	d837      	bhi.n	80019fe <HAL_UART_Init+0x152>
 800198e:	2b00      	cmp	r3, #0
 8001990:	d002      	beq.n	8001998 <HAL_UART_Init+0xec>
 8001992:	2b01      	cmp	r3, #1
 8001994:	d01a      	beq.n	80019cc <HAL_UART_Init+0x120>
 8001996:	e032      	b.n	80019fe <HAL_UART_Init+0x152>
		{
			case HAL_USART_TRANSMIT_MODE:
				HAL_USART_CONFIG->CR1|=HAL_USART_TRANSMIT_EN;
 8001998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800199a:	68db      	ldr	r3, [r3, #12]
 800199c:	f043 0208 	orr.w	r2, r3, #8
 80019a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019a2:	60da      	str	r2, [r3, #12]
				HAL_Init_PIN(GPIO_PORT,&TX);
 80019a4:	f107 0318 	add.w	r3, r7, #24
 80019a8:	4619      	mov	r1, r3
 80019aa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80019ac:	f7ff fa70 	bl	8000e90 <HAL_Init_PIN>
				break;
 80019b0:	e025      	b.n	80019fe <HAL_UART_Init+0x152>
			case HAL_USART_REC_MODE:
				HAL_USART_CONFIG->CR1|=HAL_USART_RECIEVE_EN;
 80019b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019b4:	68db      	ldr	r3, [r3, #12]
 80019b6:	f043 0204 	orr.w	r2, r3, #4
 80019ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019bc:	60da      	str	r2, [r3, #12]
				HAL_Init_PIN(GPIO_PORT,&RX);
 80019be:	f107 0308 	add.w	r3, r7, #8
 80019c2:	4619      	mov	r1, r3
 80019c4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80019c6:	f7ff fa63 	bl	8000e90 <HAL_Init_PIN>
				break;
 80019ca:	e018      	b.n	80019fe <HAL_UART_Init+0x152>
			case HAL_USART_TRANSMIT_REC_MODE:
				HAL_USART_CONFIG->CR1|=HAL_USART_TRANSMIT_EN;
 80019cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019ce:	68db      	ldr	r3, [r3, #12]
 80019d0:	f043 0208 	orr.w	r2, r3, #8
 80019d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019d6:	60da      	str	r2, [r3, #12]
				HAL_USART_CONFIG->CR1|=HAL_USART_RECIEVE_EN;
 80019d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019da:	68db      	ldr	r3, [r3, #12]
 80019dc:	f043 0204 	orr.w	r2, r3, #4
 80019e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019e2:	60da      	str	r2, [r3, #12]
				HAL_Init_PIN(GPIO_PORT,&RX);
 80019e4:	f107 0308 	add.w	r3, r7, #8
 80019e8:	4619      	mov	r1, r3
 80019ea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80019ec:	f7ff fa50 	bl	8000e90 <HAL_Init_PIN>
				HAL_Init_PIN(GPIO_PORT,&TX);
 80019f0:	f107 0318 	add.w	r3, r7, #24
 80019f4:	4619      	mov	r1, r3
 80019f6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80019f8:	f7ff fa4a 	bl	8000e90 <HAL_Init_PIN>
				break;
 80019fc:	bf00      	nop
		}

		switch(HAL_Uart->StopBits)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	68db      	ldr	r3, [r3, #12]
 8001a02:	2b03      	cmp	r3, #3
 8001a04:	d838      	bhi.n	8001a78 <HAL_UART_Init+0x1cc>
 8001a06:	a201      	add	r2, pc, #4	; (adr r2, 8001a0c <HAL_UART_Init+0x160>)
 8001a08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a0c:	08001a1d 	.word	0x08001a1d
 8001a10:	08001a2b 	.word	0x08001a2b
 8001a14:	08001a45 	.word	0x08001a45
 8001a18:	08001a5f 	.word	0x08001a5f
		{
			case HAL_USART_NO_STOP_BITS_1:
				HAL_USART_CONFIG->CR2 &= (~(0x00000003<<HAL_USART_STOP));
 8001a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a1e:	691b      	ldr	r3, [r3, #16]
 8001a20:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a26:	611a      	str	r2, [r3, #16]
				break;
 8001a28:	e026      	b.n	8001a78 <HAL_UART_Init+0x1cc>
			case HAL_USART_NO_STOP_BITS_0_5:
				HAL_USART_CONFIG->CR2 &= (~(0x00000003<<HAL_USART_STOP));
 8001a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a2c:	691b      	ldr	r3, [r3, #16]
 8001a2e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a34:	611a      	str	r2, [r3, #16]
				HAL_USART_CONFIG->CR2 |= HAL_USART_STOP_0_5;
 8001a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a38:	691b      	ldr	r3, [r3, #16]
 8001a3a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a40:	611a      	str	r2, [r3, #16]
				break;
 8001a42:	e019      	b.n	8001a78 <HAL_UART_Init+0x1cc>
			case HAL_USART_NO_STOP_BITS_1_5:
				HAL_USART_CONFIG->CR2 &= (~(0x00000003<<HAL_USART_STOP));
 8001a44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a46:	691b      	ldr	r3, [r3, #16]
 8001a48:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001a4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a4e:	611a      	str	r2, [r3, #16]
				HAL_USART_CONFIG->CR2 |= HAL_USART_STOP_1_5;
 8001a50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a52:	691b      	ldr	r3, [r3, #16]
 8001a54:	f443 5240 	orr.w	r2, r3, #12288	; 0x3000
 8001a58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a5a:	611a      	str	r2, [r3, #16]
				break;
 8001a5c:	e00c      	b.n	8001a78 <HAL_UART_Init+0x1cc>
			case HAL_USART_NO_STOP_BITS_2:
				HAL_USART_CONFIG->CR2 &= (~(0x00000003<<HAL_USART_STOP));
 8001a5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a60:	691b      	ldr	r3, [r3, #16]
 8001a62:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a68:	611a      	str	r2, [r3, #16]
				HAL_USART_CONFIG->CR2 |= HAL_USART_STOP_2;
 8001a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a6c:	691b      	ldr	r3, [r3, #16]
 8001a6e:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001a72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a74:	611a      	str	r2, [r3, #16]
				break;
 8001a76:	bf00      	nop
		}

		switch(HAL_Uart->WordLength)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	689b      	ldr	r3, [r3, #8]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d002      	beq.n	8001a86 <HAL_UART_Init+0x1da>
 8001a80:	2b01      	cmp	r3, #1
 8001a82:	d007      	beq.n	8001a94 <HAL_UART_Init+0x1e8>
 8001a84:	e013      	b.n	8001aae <HAL_UART_Init+0x202>
		{
			case HAL_USART_WORD_LENGTH_8:
				HAL_USART_CONFIG->CR2 &= HAL_USART_WRDL8_MKS;
 8001a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a88:	691b      	ldr	r3, [r3, #16]
 8001a8a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a90:	611a      	str	r2, [r3, #16]
				break;
 8001a92:	e00c      	b.n	8001aae <HAL_UART_Init+0x202>
			case HAL_USART_WORD_LENGTH_9:
				HAL_USART_CONFIG->CR2 &= (~(0x00000001 << HAL_USART_M));
 8001a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a96:	691b      	ldr	r3, [r3, #16]
 8001a98:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001a9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a9e:	611a      	str	r2, [r3, #16]
				HAL_USART_CONFIG->CR2 |= HAL_USART_WRDL9_MSK;
 8001aa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001aa2:	691b      	ldr	r3, [r3, #16]
 8001aa4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001aa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001aaa:	611a      	str	r2, [r3, #16]
				break;
 8001aac:	bf00      	nop
		}

		switch(HAL_Uart->Parity)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	691b      	ldr	r3, [r3, #16]
 8001ab2:	2b02      	cmp	r3, #2
 8001ab4:	d006      	beq.n	8001ac4 <HAL_UART_Init+0x218>
 8001ab6:	2b02      	cmp	r3, #2
 8001ab8:	d825      	bhi.n	8001b06 <HAL_UART_Init+0x25a>
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d016      	beq.n	8001aec <HAL_UART_Init+0x240>
 8001abe:	2b01      	cmp	r3, #1
 8001ac0:	d007      	beq.n	8001ad2 <HAL_UART_Init+0x226>
 8001ac2:	e020      	b.n	8001b06 <HAL_UART_Init+0x25a>
		{
			case HAL_USART_NO_PAIRTY:
				HAL_USART_CONFIG->CR1 &= HAL_USART_PARITY_DIS;
 8001ac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ac6:	68db      	ldr	r3, [r3, #12]
 8001ac8:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8001acc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ace:	60da      	str	r2, [r3, #12]
				break;
 8001ad0:	e019      	b.n	8001b06 <HAL_UART_Init+0x25a>
			case HAL_USART_ODD_PARITY:
				HAL_USART_CONFIG->CR1 |= HAL_USART_PARITY_EN;
 8001ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ad4:	68db      	ldr	r3, [r3, #12]
 8001ad6:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8001ada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001adc:	60da      	str	r2, [r3, #12]
				HAL_USART_CONFIG->CR1 |= HAL_USART_PARITY_ODD;
 8001ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ae0:	68db      	ldr	r3, [r3, #12]
 8001ae2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ae8:	60da      	str	r2, [r3, #12]
				break;
 8001aea:	e00c      	b.n	8001b06 <HAL_UART_Init+0x25a>
			case HAL_USART_EVEN_PARITY:
				HAL_USART_CONFIG->CR1 |= HAL_USART_PARITY_EN;
 8001aec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001aee:	68db      	ldr	r3, [r3, #12]
 8001af0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8001af4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001af6:	60da      	str	r2, [r3, #12]
				HAL_USART_CONFIG->CR1 &= HAL_USART_PARITY_EVEN;
 8001af8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001afa:	68db      	ldr	r3, [r3, #12]
 8001afc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8001b00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b02:	60da      	str	r2, [r3, #12]
				break;
 8001b04:	bf00      	nop
		}
		/*Set Baud Rate of the USART Module should first calculate peripheral frequency which will be implemented later on*/
		uint8_t SH_M=(HAL_Uart->Instance==USART1)?11:8;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4a0c      	ldr	r2, [pc, #48]	; (8001b3c <HAL_UART_Init+0x290>)
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d101      	bne.n	8001b14 <HAL_UART_Init+0x268>
 8001b10:	230b      	movs	r3, #11
 8001b12:	e000      	b.n	8001b16 <HAL_UART_Init+0x26a>
 8001b14:	2308      	movs	r3, #8
 8001b16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		switch((RCC->CFGR & (0x00000003<<2))>>2)
 8001b1a:	4b0c      	ldr	r3, [pc, #48]	; (8001b4c <HAL_UART_Init+0x2a0>)
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	089b      	lsrs	r3, r3, #2
 8001b20:	f003 0303 	and.w	r3, r3, #3
 8001b24:	2b02      	cmp	r3, #2
 8001b26:	d025      	beq.n	8001b74 <HAL_UART_Init+0x2c8>
 8001b28:	2b02      	cmp	r3, #2
 8001b2a:	d82e      	bhi.n	8001b8a <HAL_UART_Init+0x2de>
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d011      	beq.n	8001b54 <HAL_UART_Init+0x2a8>
 8001b30:	2b01      	cmp	r3, #1
 8001b32:	d017      	beq.n	8001b64 <HAL_UART_Init+0x2b8>
 8001b34:	e029      	b.n	8001b8a <HAL_UART_Init+0x2de>
 8001b36:	bf00      	nop
 8001b38:	20000080 	.word	0x20000080
 8001b3c:	40013800 	.word	0x40013800
 8001b40:	40004400 	.word	0x40004400
 8001b44:	40010800 	.word	0x40010800
 8001b48:	40010c00 	.word	0x40010c00
 8001b4c:	40021000 	.word	0x40021000
 8001b50:	40004800 	.word	0x40004800
		{
			case 0x00000000UL:/*----HSI----*/
				USART_PERIPH_CLK=CLK_CALC(8000000UL,SH_M);
 8001b54:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001b58:	4619      	mov	r1, r3
 8001b5a:	4816      	ldr	r0, [pc, #88]	; (8001bb4 <HAL_UART_Init+0x308>)
 8001b5c:	f7ff fe1c 	bl	8001798 <CLK_CALC>
 8001b60:	6378      	str	r0, [r7, #52]	; 0x34
				break;
 8001b62:	e012      	b.n	8001b8a <HAL_UART_Init+0x2de>
			case 0x00000001UL:/*---HSR----*/
				USART_PERIPH_CLK=CLK_CALC(8000000UL,SH_M);
 8001b64:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001b68:	4619      	mov	r1, r3
 8001b6a:	4812      	ldr	r0, [pc, #72]	; (8001bb4 <HAL_UART_Init+0x308>)
 8001b6c:	f7ff fe14 	bl	8001798 <CLK_CALC>
 8001b70:	6378      	str	r0, [r7, #52]	; 0x34
				break;
 8001b72:	e00a      	b.n	8001b8a <HAL_UART_Init+0x2de>
			case 0x00000002UL:/*---PLL----*/
				USART_PERIPH_CLK=PLL_CLK_CALC();
 8001b74:	f7ff fdd8 	bl	8001728 <PLL_CLK_CALC>
 8001b78:	6378      	str	r0, [r7, #52]	; 0x34
				USART_PERIPH_CLK=CLK_CALC(USART_PERIPH_CLK,SH_M);
 8001b7a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001b7e:	4619      	mov	r1, r3
 8001b80:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001b82:	f7ff fe09 	bl	8001798 <CLK_CALC>
 8001b86:	6378      	str	r0, [r7, #52]	; 0x34
				break;
 8001b88:	bf00      	nop
		}
		HAL_USART_CONFIG->BRR=Baud_Rate_Gen(USART_PERIPH_CLK,HAL_Uart->BaudRate);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	4619      	mov	r1, r3
 8001b90:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001b92:	f7ff fd1f 	bl	80015d4 <Baud_Rate_Gen>
 8001b96:	4603      	mov	r3, r0
 8001b98:	461a      	mov	r2, r3
 8001b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b9c:	609a      	str	r2, [r3, #8]
		HAL_USART_CONFIG->CR1|=HAL_USART_UEEN_MSK;
 8001b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ba0:	68db      	ldr	r3, [r3, #12]
 8001ba2:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001ba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ba8:	60da      	str	r2, [r3, #12]
	}
}
 8001baa:	bf00      	nop
 8001bac:	3738      	adds	r7, #56	; 0x38
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	007a1200 	.word	0x007a1200

08001bb8 <HAL_UART_Byte>:

void HAL_UART_Byte(USART_TypeDef *Handle,uint32_t data)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b083      	sub	sp, #12
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
 8001bc0:	6039      	str	r1, [r7, #0]
	if(Handle!=NULL)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d00b      	beq.n	8001be0 <HAL_UART_Byte+0x28>
	{
		while(!(READ_BIT(Handle->SR,HAL_USART_TXE)));
 8001bc8:	bf00      	nop
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	09db      	lsrs	r3, r3, #7
 8001bd0:	f003 0301 	and.w	r3, r3, #1
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d0f8      	beq.n	8001bca <HAL_UART_Byte+0x12>
		Handle->DR = data&0xFF;
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	b2da      	uxtb	r2, r3
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	605a      	str	r2, [r3, #4]
	}
}
 8001be0:	bf00      	nop
 8001be2:	370c      	adds	r7, #12
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bc80      	pop	{r7}
 8001be8:	4770      	bx	lr

08001bea <HAL_UART_Buffer>:

void HAL_UART_Buffer(USART_TypeDef *Handle,int8_t * Buffer,uint32_t Size)
{
 8001bea:	b580      	push	{r7, lr}
 8001bec:	b086      	sub	sp, #24
 8001bee:	af00      	add	r7, sp, #0
 8001bf0:	60f8      	str	r0, [r7, #12]
 8001bf2:	60b9      	str	r1, [r7, #8]
 8001bf4:	607a      	str	r2, [r7, #4]
	if (Handle != NULL && Buffer!=NULL) {
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d016      	beq.n	8001c2a <HAL_UART_Buffer+0x40>
 8001bfc:	68bb      	ldr	r3, [r7, #8]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d013      	beq.n	8001c2a <HAL_UART_Buffer+0x40>
		uint32_t Byte_Tx=0;
 8001c02:	2300      	movs	r3, #0
 8001c04:	617b      	str	r3, [r7, #20]
		while(Byte_Tx<=Size-1)
 8001c06:	e00b      	b.n	8001c20 <HAL_UART_Buffer+0x36>
		{
			HAL_UART_Byte(Handle,*(Buffer+Byte_Tx));
 8001c08:	68ba      	ldr	r2, [r7, #8]
 8001c0a:	697b      	ldr	r3, [r7, #20]
 8001c0c:	4413      	add	r3, r2
 8001c0e:	f993 3000 	ldrsb.w	r3, [r3]
 8001c12:	4619      	mov	r1, r3
 8001c14:	68f8      	ldr	r0, [r7, #12]
 8001c16:	f7ff ffcf 	bl	8001bb8 <HAL_UART_Byte>
			Byte_Tx++;
 8001c1a:	697b      	ldr	r3, [r7, #20]
 8001c1c:	3301      	adds	r3, #1
 8001c1e:	617b      	str	r3, [r7, #20]
		while(Byte_Tx<=Size-1)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	3b01      	subs	r3, #1
 8001c24:	697a      	ldr	r2, [r7, #20]
 8001c26:	429a      	cmp	r2, r3
 8001c28:	d9ee      	bls.n	8001c08 <HAL_UART_Buffer+0x1e>
		}
	}
}
 8001c2a:	bf00      	nop
 8001c2c:	3718      	adds	r7, #24
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}
	...

08001c34 <__io_putchar>:
#include "core/CortexM3_Core_Systick.h"

extern USART_TypeDef * Handle;

int __io_putchar(int ch)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b082      	sub	sp, #8
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
	HAL_UART_Byte(Handle,ch);
 8001c3c:	4b05      	ldr	r3, [pc, #20]	; (8001c54 <__io_putchar+0x20>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	687a      	ldr	r2, [r7, #4]
 8001c42:	4611      	mov	r1, r2
 8001c44:	4618      	mov	r0, r3
 8001c46:	f7ff ffb7 	bl	8001bb8 <HAL_UART_Byte>
	return ch;
 8001c4a:	687b      	ldr	r3, [r7, #4]
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	3708      	adds	r7, #8
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	20000080 	.word	0x20000080

08001c58 <main>:
//	RCC->CFGR |= RCC_CLK_PLL;
//}


int main(void)
{
 8001c58:	b5b0      	push	{r4, r5, r7, lr}
 8001c5a:	b0c0      	sub	sp, #256	; 0x100
 8001c5c:	af00      	add	r7, sp, #0
	//SystemInit();/*Trying Something */
	SYSTICK_INIT();
 8001c5e:	f7fe fa87 	bl	8000170 <SYSTICK_INIT>
	ADC_init_t Adc={
 8001c62:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001c66:	22b4      	movs	r2, #180	; 0xb4
 8001c68:	2100      	movs	r1, #0
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f000 f966 	bl	8001f3c <memset>
 8001c70:	2301      	movs	r3, #1
 8001c72:	64bb      	str	r3, [r7, #72]	; 0x48
 8001c74:	2301      	movs	r3, #1
 8001c76:	653b      	str	r3, [r7, #80]	; 0x50
 8001c78:	4b31      	ldr	r3, [pc, #196]	; (8001d40 <main+0xe8>)
 8001c7a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8001c7e:	2302      	movs	r3, #2
 8001c80:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001c84:	2301      	movs	r3, #1
 8001c86:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
			.Sample_Time={TS_7_5},
			.Init.Alignment=HAL_ADC_ALLIGNMENT_LEFT,
			.Init.Watchdog_EN=HAL_WATCHDOG_DISABLE,
	};
	/*Configure USART */
	UART_t USART={
 8001c8a:	4b2e      	ldr	r3, [pc, #184]	; (8001d44 <main+0xec>)
 8001c8c:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8001c90:	461d      	mov	r5, r3
 8001c92:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c94:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c96:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001c9a:	e884 0003 	stmia.w	r4, {r0, r1}
			.Mode=HAL_USART_TRANSMIT_REC_MODE,
			.Parity=HAL_USART_NO_PAIRTY,
			.StopBits=HAL_USART_NO_STOP_BITS_1,
			.WordLength=HAL_USART_WORD_LENGTH_8,
	};
	TimerU_D_t TIMERX_1={
 8001c9e:	463b      	mov	r3, r7
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	2330      	movs	r3, #48	; 0x30
 8001ca4:	461a      	mov	r2, r3
 8001ca6:	2100      	movs	r1, #0
 8001ca8:	f000 f948 	bl	8001f3c <memset>
 8001cac:	463b      	mov	r3, r7
 8001cae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001cb2:	601a      	str	r2, [r3, #0]
 8001cb4:	463b      	mov	r3, r7
 8001cb6:	2205      	movs	r2, #5
 8001cb8:	605a      	str	r2, [r3, #4]
 8001cba:	463b      	mov	r3, r7
 8001cbc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001cc0:	609a      	str	r2, [r3, #8]
 8001cc2:	463b      	mov	r3, r7
 8001cc4:	f24f 0201 	movw	r2, #61441	; 0xf001
 8001cc8:	60da      	str	r2, [r3, #12]
 8001cca:	463b      	mov	r3, r7
 8001ccc:	f24f 02f0 	movw	r2, #61680	; 0xf0f0
 8001cd0:	611a      	str	r2, [r3, #16]
 8001cd2:	463b      	mov	r3, r7
 8001cd4:	2203      	movs	r2, #3
 8001cd6:	61da      	str	r2, [r3, #28]
 8001cd8:	463b      	mov	r3, r7
 8001cda:	f240 6207 	movw	r2, #1543	; 0x607
 8001cde:	621a      	str	r2, [r3, #32]
 8001ce0:	463b      	mov	r3, r7
 8001ce2:	2202      	movs	r2, #2
 8001ce4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001ce8:	463b      	mov	r3, r7
 8001cea:	2210      	movs	r2, #16
 8001cec:	629a      	str	r2, [r3, #40]	; 0x28
				.CMP_CHN={HAL_TIMER_CMP_OUT_CHN_4,HAL_TIMER_CMP_OUT_CHN_1},
				.NO_CMP_CHNS=2,
				.Prescaler=16,
				.SH_EN=HAL_TIMER_SHR_EN,
	};
	HAL_ADC_Init(&Adc);
 8001cee:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f7fe fa92 	bl	800021c <HAL_ADC_Init>
	HAL_UART_Init(&USART);
 8001cf8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f7ff fdd5 	bl	80018ac <HAL_UART_Init>
	HAL_TIMER_init(&TIMERX_1);
 8001d02:	463b      	mov	r3, r7
 8001d04:	4618      	mov	r0, r3
 8001d06:	f7ff f993 	bl	8001030 <HAL_TIMER_init>
	int8_t *Buffer="Ready To TX:";
 8001d0a:	4b0f      	ldr	r3, [pc, #60]	; (8001d48 <main+0xf0>)
 8001d0c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
	HAL_UART_Buffer(USART.Instance,Buffer,12);
 8001d10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d12:	220c      	movs	r2, #12
 8001d14:	f8d7 10fc 	ldr.w	r1, [r7, #252]	; 0xfc
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f7ff ff66 	bl	8001bea <HAL_UART_Buffer>
	while(1)
	{
		HAL_ADC_READ(&Adc,&ADC_Val);
 8001d1e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001d22:	490a      	ldr	r1, [pc, #40]	; (8001d4c <main+0xf4>)
 8001d24:	4618      	mov	r0, r3
 8001d26:	f7ff f871 	bl	8000e0c <HAL_ADC_READ>
		printf("Sensor Voltage_Val=%i\n",ADC_Val[0]);
 8001d2a:	4b08      	ldr	r3, [pc, #32]	; (8001d4c <main+0xf4>)
 8001d2c:	881b      	ldrh	r3, [r3, #0]
 8001d2e:	4619      	mov	r1, r3
 8001d30:	4807      	ldr	r0, [pc, #28]	; (8001d50 <main+0xf8>)
 8001d32:	f000 f90b 	bl	8001f4c <iprintf>
		SYSTICK_Delay_ms(500);
 8001d36:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001d3a:	f7fe fa37 	bl	80001ac <SYSTICK_Delay_ms>
		HAL_ADC_READ(&Adc,&ADC_Val);
 8001d3e:	e7ee      	b.n	8001d1e <main+0xc6>
 8001d40:	40012400 	.word	0x40012400
 8001d44:	08002e4c 	.word	0x08002e4c
 8001d48:	08002e24 	.word	0x08002e24
 8001d4c:	20000098 	.word	0x20000098
 8001d50:	08002e34 	.word	0x08002e34

08001d54 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b086      	sub	sp, #24
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	60f8      	str	r0, [r7, #12]
 8001d5c:	60b9      	str	r1, [r7, #8]
 8001d5e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d60:	2300      	movs	r3, #0
 8001d62:	617b      	str	r3, [r7, #20]
 8001d64:	e00a      	b.n	8001d7c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001d66:	f3af 8000 	nop.w
 8001d6a:	4601      	mov	r1, r0
 8001d6c:	68bb      	ldr	r3, [r7, #8]
 8001d6e:	1c5a      	adds	r2, r3, #1
 8001d70:	60ba      	str	r2, [r7, #8]
 8001d72:	b2ca      	uxtb	r2, r1
 8001d74:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	3301      	adds	r3, #1
 8001d7a:	617b      	str	r3, [r7, #20]
 8001d7c:	697a      	ldr	r2, [r7, #20]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	429a      	cmp	r2, r3
 8001d82:	dbf0      	blt.n	8001d66 <_read+0x12>
	}

return len;
 8001d84:	687b      	ldr	r3, [r7, #4]
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	3718      	adds	r7, #24
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}

08001d8e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d8e:	b580      	push	{r7, lr}
 8001d90:	b086      	sub	sp, #24
 8001d92:	af00      	add	r7, sp, #0
 8001d94:	60f8      	str	r0, [r7, #12]
 8001d96:	60b9      	str	r1, [r7, #8]
 8001d98:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	617b      	str	r3, [r7, #20]
 8001d9e:	e009      	b.n	8001db4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	1c5a      	adds	r2, r3, #1
 8001da4:	60ba      	str	r2, [r7, #8]
 8001da6:	781b      	ldrb	r3, [r3, #0]
 8001da8:	4618      	mov	r0, r3
 8001daa:	f7ff ff43 	bl	8001c34 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	3301      	adds	r3, #1
 8001db2:	617b      	str	r3, [r7, #20]
 8001db4:	697a      	ldr	r2, [r7, #20]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	429a      	cmp	r2, r3
 8001dba:	dbf1      	blt.n	8001da0 <_write+0x12>
	}
	return len;
 8001dbc:	687b      	ldr	r3, [r7, #4]
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	3718      	adds	r7, #24
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}

08001dc6 <_close>:

int _close(int file)
{
 8001dc6:	b480      	push	{r7}
 8001dc8:	b083      	sub	sp, #12
 8001dca:	af00      	add	r7, sp, #0
 8001dcc:	6078      	str	r0, [r7, #4]
	return -1;
 8001dce:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	370c      	adds	r7, #12
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bc80      	pop	{r7}
 8001dda:	4770      	bx	lr

08001ddc <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b083      	sub	sp, #12
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
 8001de4:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001dec:	605a      	str	r2, [r3, #4]
	return 0;
 8001dee:	2300      	movs	r3, #0
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	370c      	adds	r7, #12
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bc80      	pop	{r7}
 8001df8:	4770      	bx	lr

08001dfa <_isatty>:

int _isatty(int file)
{
 8001dfa:	b480      	push	{r7}
 8001dfc:	b083      	sub	sp, #12
 8001dfe:	af00      	add	r7, sp, #0
 8001e00:	6078      	str	r0, [r7, #4]
	return 1;
 8001e02:	2301      	movs	r3, #1
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	370c      	adds	r7, #12
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bc80      	pop	{r7}
 8001e0c:	4770      	bx	lr

08001e0e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e0e:	b480      	push	{r7}
 8001e10:	b085      	sub	sp, #20
 8001e12:	af00      	add	r7, sp, #0
 8001e14:	60f8      	str	r0, [r7, #12]
 8001e16:	60b9      	str	r1, [r7, #8]
 8001e18:	607a      	str	r2, [r7, #4]
	return 0;
 8001e1a:	2300      	movs	r3, #0
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	3714      	adds	r7, #20
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bc80      	pop	{r7}
 8001e24:	4770      	bx	lr
	...

08001e28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b086      	sub	sp, #24
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e30:	4a14      	ldr	r2, [pc, #80]	; (8001e84 <_sbrk+0x5c>)
 8001e32:	4b15      	ldr	r3, [pc, #84]	; (8001e88 <_sbrk+0x60>)
 8001e34:	1ad3      	subs	r3, r2, r3
 8001e36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e3c:	4b13      	ldr	r3, [pc, #76]	; (8001e8c <_sbrk+0x64>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d102      	bne.n	8001e4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e44:	4b11      	ldr	r3, [pc, #68]	; (8001e8c <_sbrk+0x64>)
 8001e46:	4a12      	ldr	r2, [pc, #72]	; (8001e90 <_sbrk+0x68>)
 8001e48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e4a:	4b10      	ldr	r3, [pc, #64]	; (8001e8c <_sbrk+0x64>)
 8001e4c:	681a      	ldr	r2, [r3, #0]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	4413      	add	r3, r2
 8001e52:	693a      	ldr	r2, [r7, #16]
 8001e54:	429a      	cmp	r2, r3
 8001e56:	d207      	bcs.n	8001e68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e58:	f000 f846 	bl	8001ee8 <__errno>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	220c      	movs	r2, #12
 8001e60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e62:	f04f 33ff 	mov.w	r3, #4294967295
 8001e66:	e009      	b.n	8001e7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e68:	4b08      	ldr	r3, [pc, #32]	; (8001e8c <_sbrk+0x64>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e6e:	4b07      	ldr	r3, [pc, #28]	; (8001e8c <_sbrk+0x64>)
 8001e70:	681a      	ldr	r2, [r3, #0]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	4413      	add	r3, r2
 8001e76:	4a05      	ldr	r2, [pc, #20]	; (8001e8c <_sbrk+0x64>)
 8001e78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e7a:	68fb      	ldr	r3, [r7, #12]
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	3718      	adds	r7, #24
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	20005000 	.word	0x20005000
 8001e88:	00000400 	.word	0x00000400
 8001e8c:	20000084 	.word	0x20000084
 8001e90:	200000b0 	.word	0x200000b0

08001e94 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001e94:	480d      	ldr	r0, [pc, #52]	; (8001ecc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001e96:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001e98:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e9c:	480c      	ldr	r0, [pc, #48]	; (8001ed0 <LoopForever+0x6>)
  ldr r1, =_edata
 8001e9e:	490d      	ldr	r1, [pc, #52]	; (8001ed4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001ea0:	4a0d      	ldr	r2, [pc, #52]	; (8001ed8 <LoopForever+0xe>)
  movs r3, #0
 8001ea2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ea4:	e002      	b.n	8001eac <LoopCopyDataInit>

08001ea6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ea6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ea8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001eaa:	3304      	adds	r3, #4

08001eac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001eac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001eae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001eb0:	d3f9      	bcc.n	8001ea6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001eb2:	4a0a      	ldr	r2, [pc, #40]	; (8001edc <LoopForever+0x12>)
  ldr r4, =_ebss
 8001eb4:	4c0a      	ldr	r4, [pc, #40]	; (8001ee0 <LoopForever+0x16>)
  movs r3, #0
 8001eb6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001eb8:	e001      	b.n	8001ebe <LoopFillZerobss>

08001eba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001eba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ebc:	3204      	adds	r2, #4

08001ebe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ebe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ec0:	d3fb      	bcc.n	8001eba <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001ec2:	f000 f817 	bl	8001ef4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001ec6:	f7ff fec7 	bl	8001c58 <main>

08001eca <LoopForever>:

LoopForever:
    b LoopForever
 8001eca:	e7fe      	b.n	8001eca <LoopForever>
  ldr   r0, =_estack
 8001ecc:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8001ed0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ed4:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8001ed8:	08002f04 	.word	0x08002f04
  ldr r2, =_sbss
 8001edc:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8001ee0:	200000ac 	.word	0x200000ac

08001ee4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001ee4:	e7fe      	b.n	8001ee4 <ADC1_2_IRQHandler>
	...

08001ee8 <__errno>:
 8001ee8:	4b01      	ldr	r3, [pc, #4]	; (8001ef0 <__errno+0x8>)
 8001eea:	6818      	ldr	r0, [r3, #0]
 8001eec:	4770      	bx	lr
 8001eee:	bf00      	nop
 8001ef0:	20000000 	.word	0x20000000

08001ef4 <__libc_init_array>:
 8001ef4:	b570      	push	{r4, r5, r6, lr}
 8001ef6:	2600      	movs	r6, #0
 8001ef8:	4d0c      	ldr	r5, [pc, #48]	; (8001f2c <__libc_init_array+0x38>)
 8001efa:	4c0d      	ldr	r4, [pc, #52]	; (8001f30 <__libc_init_array+0x3c>)
 8001efc:	1b64      	subs	r4, r4, r5
 8001efe:	10a4      	asrs	r4, r4, #2
 8001f00:	42a6      	cmp	r6, r4
 8001f02:	d109      	bne.n	8001f18 <__libc_init_array+0x24>
 8001f04:	f000 ff82 	bl	8002e0c <_init>
 8001f08:	2600      	movs	r6, #0
 8001f0a:	4d0a      	ldr	r5, [pc, #40]	; (8001f34 <__libc_init_array+0x40>)
 8001f0c:	4c0a      	ldr	r4, [pc, #40]	; (8001f38 <__libc_init_array+0x44>)
 8001f0e:	1b64      	subs	r4, r4, r5
 8001f10:	10a4      	asrs	r4, r4, #2
 8001f12:	42a6      	cmp	r6, r4
 8001f14:	d105      	bne.n	8001f22 <__libc_init_array+0x2e>
 8001f16:	bd70      	pop	{r4, r5, r6, pc}
 8001f18:	f855 3b04 	ldr.w	r3, [r5], #4
 8001f1c:	4798      	blx	r3
 8001f1e:	3601      	adds	r6, #1
 8001f20:	e7ee      	b.n	8001f00 <__libc_init_array+0xc>
 8001f22:	f855 3b04 	ldr.w	r3, [r5], #4
 8001f26:	4798      	blx	r3
 8001f28:	3601      	adds	r6, #1
 8001f2a:	e7f2      	b.n	8001f12 <__libc_init_array+0x1e>
 8001f2c:	08002efc 	.word	0x08002efc
 8001f30:	08002efc 	.word	0x08002efc
 8001f34:	08002efc 	.word	0x08002efc
 8001f38:	08002f00 	.word	0x08002f00

08001f3c <memset>:
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	4402      	add	r2, r0
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d100      	bne.n	8001f46 <memset+0xa>
 8001f44:	4770      	bx	lr
 8001f46:	f803 1b01 	strb.w	r1, [r3], #1
 8001f4a:	e7f9      	b.n	8001f40 <memset+0x4>

08001f4c <iprintf>:
 8001f4c:	b40f      	push	{r0, r1, r2, r3}
 8001f4e:	4b0a      	ldr	r3, [pc, #40]	; (8001f78 <iprintf+0x2c>)
 8001f50:	b513      	push	{r0, r1, r4, lr}
 8001f52:	681c      	ldr	r4, [r3, #0]
 8001f54:	b124      	cbz	r4, 8001f60 <iprintf+0x14>
 8001f56:	69a3      	ldr	r3, [r4, #24]
 8001f58:	b913      	cbnz	r3, 8001f60 <iprintf+0x14>
 8001f5a:	4620      	mov	r0, r4
 8001f5c:	f000 f866 	bl	800202c <__sinit>
 8001f60:	ab05      	add	r3, sp, #20
 8001f62:	4620      	mov	r0, r4
 8001f64:	9a04      	ldr	r2, [sp, #16]
 8001f66:	68a1      	ldr	r1, [r4, #8]
 8001f68:	9301      	str	r3, [sp, #4]
 8001f6a:	f000 f981 	bl	8002270 <_vfiprintf_r>
 8001f6e:	b002      	add	sp, #8
 8001f70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001f74:	b004      	add	sp, #16
 8001f76:	4770      	bx	lr
 8001f78:	20000000 	.word	0x20000000

08001f7c <std>:
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	b510      	push	{r4, lr}
 8001f80:	4604      	mov	r4, r0
 8001f82:	e9c0 3300 	strd	r3, r3, [r0]
 8001f86:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001f8a:	6083      	str	r3, [r0, #8]
 8001f8c:	8181      	strh	r1, [r0, #12]
 8001f8e:	6643      	str	r3, [r0, #100]	; 0x64
 8001f90:	81c2      	strh	r2, [r0, #14]
 8001f92:	6183      	str	r3, [r0, #24]
 8001f94:	4619      	mov	r1, r3
 8001f96:	2208      	movs	r2, #8
 8001f98:	305c      	adds	r0, #92	; 0x5c
 8001f9a:	f7ff ffcf 	bl	8001f3c <memset>
 8001f9e:	4b05      	ldr	r3, [pc, #20]	; (8001fb4 <std+0x38>)
 8001fa0:	6224      	str	r4, [r4, #32]
 8001fa2:	6263      	str	r3, [r4, #36]	; 0x24
 8001fa4:	4b04      	ldr	r3, [pc, #16]	; (8001fb8 <std+0x3c>)
 8001fa6:	62a3      	str	r3, [r4, #40]	; 0x28
 8001fa8:	4b04      	ldr	r3, [pc, #16]	; (8001fbc <std+0x40>)
 8001faa:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001fac:	4b04      	ldr	r3, [pc, #16]	; (8001fc0 <std+0x44>)
 8001fae:	6323      	str	r3, [r4, #48]	; 0x30
 8001fb0:	bd10      	pop	{r4, pc}
 8001fb2:	bf00      	nop
 8001fb4:	0800281d 	.word	0x0800281d
 8001fb8:	0800283f 	.word	0x0800283f
 8001fbc:	08002877 	.word	0x08002877
 8001fc0:	0800289b 	.word	0x0800289b

08001fc4 <_cleanup_r>:
 8001fc4:	4901      	ldr	r1, [pc, #4]	; (8001fcc <_cleanup_r+0x8>)
 8001fc6:	f000 b8af 	b.w	8002128 <_fwalk_reent>
 8001fca:	bf00      	nop
 8001fcc:	08002b75 	.word	0x08002b75

08001fd0 <__sfmoreglue>:
 8001fd0:	b570      	push	{r4, r5, r6, lr}
 8001fd2:	2568      	movs	r5, #104	; 0x68
 8001fd4:	1e4a      	subs	r2, r1, #1
 8001fd6:	4355      	muls	r5, r2
 8001fd8:	460e      	mov	r6, r1
 8001fda:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001fde:	f000 f8c5 	bl	800216c <_malloc_r>
 8001fe2:	4604      	mov	r4, r0
 8001fe4:	b140      	cbz	r0, 8001ff8 <__sfmoreglue+0x28>
 8001fe6:	2100      	movs	r1, #0
 8001fe8:	e9c0 1600 	strd	r1, r6, [r0]
 8001fec:	300c      	adds	r0, #12
 8001fee:	60a0      	str	r0, [r4, #8]
 8001ff0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001ff4:	f7ff ffa2 	bl	8001f3c <memset>
 8001ff8:	4620      	mov	r0, r4
 8001ffa:	bd70      	pop	{r4, r5, r6, pc}

08001ffc <__sfp_lock_acquire>:
 8001ffc:	4801      	ldr	r0, [pc, #4]	; (8002004 <__sfp_lock_acquire+0x8>)
 8001ffe:	f000 b8b3 	b.w	8002168 <__retarget_lock_acquire_recursive>
 8002002:	bf00      	nop
 8002004:	200000a4 	.word	0x200000a4

08002008 <__sfp_lock_release>:
 8002008:	4801      	ldr	r0, [pc, #4]	; (8002010 <__sfp_lock_release+0x8>)
 800200a:	f000 b8ae 	b.w	800216a <__retarget_lock_release_recursive>
 800200e:	bf00      	nop
 8002010:	200000a4 	.word	0x200000a4

08002014 <__sinit_lock_acquire>:
 8002014:	4801      	ldr	r0, [pc, #4]	; (800201c <__sinit_lock_acquire+0x8>)
 8002016:	f000 b8a7 	b.w	8002168 <__retarget_lock_acquire_recursive>
 800201a:	bf00      	nop
 800201c:	2000009f 	.word	0x2000009f

08002020 <__sinit_lock_release>:
 8002020:	4801      	ldr	r0, [pc, #4]	; (8002028 <__sinit_lock_release+0x8>)
 8002022:	f000 b8a2 	b.w	800216a <__retarget_lock_release_recursive>
 8002026:	bf00      	nop
 8002028:	2000009f 	.word	0x2000009f

0800202c <__sinit>:
 800202c:	b510      	push	{r4, lr}
 800202e:	4604      	mov	r4, r0
 8002030:	f7ff fff0 	bl	8002014 <__sinit_lock_acquire>
 8002034:	69a3      	ldr	r3, [r4, #24]
 8002036:	b11b      	cbz	r3, 8002040 <__sinit+0x14>
 8002038:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800203c:	f7ff bff0 	b.w	8002020 <__sinit_lock_release>
 8002040:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8002044:	6523      	str	r3, [r4, #80]	; 0x50
 8002046:	4b13      	ldr	r3, [pc, #76]	; (8002094 <__sinit+0x68>)
 8002048:	4a13      	ldr	r2, [pc, #76]	; (8002098 <__sinit+0x6c>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	62a2      	str	r2, [r4, #40]	; 0x28
 800204e:	42a3      	cmp	r3, r4
 8002050:	bf08      	it	eq
 8002052:	2301      	moveq	r3, #1
 8002054:	4620      	mov	r0, r4
 8002056:	bf08      	it	eq
 8002058:	61a3      	streq	r3, [r4, #24]
 800205a:	f000 f81f 	bl	800209c <__sfp>
 800205e:	6060      	str	r0, [r4, #4]
 8002060:	4620      	mov	r0, r4
 8002062:	f000 f81b 	bl	800209c <__sfp>
 8002066:	60a0      	str	r0, [r4, #8]
 8002068:	4620      	mov	r0, r4
 800206a:	f000 f817 	bl	800209c <__sfp>
 800206e:	2200      	movs	r2, #0
 8002070:	2104      	movs	r1, #4
 8002072:	60e0      	str	r0, [r4, #12]
 8002074:	6860      	ldr	r0, [r4, #4]
 8002076:	f7ff ff81 	bl	8001f7c <std>
 800207a:	2201      	movs	r2, #1
 800207c:	2109      	movs	r1, #9
 800207e:	68a0      	ldr	r0, [r4, #8]
 8002080:	f7ff ff7c 	bl	8001f7c <std>
 8002084:	2202      	movs	r2, #2
 8002086:	2112      	movs	r1, #18
 8002088:	68e0      	ldr	r0, [r4, #12]
 800208a:	f7ff ff77 	bl	8001f7c <std>
 800208e:	2301      	movs	r3, #1
 8002090:	61a3      	str	r3, [r4, #24]
 8002092:	e7d1      	b.n	8002038 <__sinit+0xc>
 8002094:	08002e64 	.word	0x08002e64
 8002098:	08001fc5 	.word	0x08001fc5

0800209c <__sfp>:
 800209c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800209e:	4607      	mov	r7, r0
 80020a0:	f7ff ffac 	bl	8001ffc <__sfp_lock_acquire>
 80020a4:	4b1e      	ldr	r3, [pc, #120]	; (8002120 <__sfp+0x84>)
 80020a6:	681e      	ldr	r6, [r3, #0]
 80020a8:	69b3      	ldr	r3, [r6, #24]
 80020aa:	b913      	cbnz	r3, 80020b2 <__sfp+0x16>
 80020ac:	4630      	mov	r0, r6
 80020ae:	f7ff ffbd 	bl	800202c <__sinit>
 80020b2:	3648      	adds	r6, #72	; 0x48
 80020b4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80020b8:	3b01      	subs	r3, #1
 80020ba:	d503      	bpl.n	80020c4 <__sfp+0x28>
 80020bc:	6833      	ldr	r3, [r6, #0]
 80020be:	b30b      	cbz	r3, 8002104 <__sfp+0x68>
 80020c0:	6836      	ldr	r6, [r6, #0]
 80020c2:	e7f7      	b.n	80020b4 <__sfp+0x18>
 80020c4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80020c8:	b9d5      	cbnz	r5, 8002100 <__sfp+0x64>
 80020ca:	4b16      	ldr	r3, [pc, #88]	; (8002124 <__sfp+0x88>)
 80020cc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80020d0:	60e3      	str	r3, [r4, #12]
 80020d2:	6665      	str	r5, [r4, #100]	; 0x64
 80020d4:	f000 f847 	bl	8002166 <__retarget_lock_init_recursive>
 80020d8:	f7ff ff96 	bl	8002008 <__sfp_lock_release>
 80020dc:	2208      	movs	r2, #8
 80020de:	4629      	mov	r1, r5
 80020e0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80020e4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80020e8:	6025      	str	r5, [r4, #0]
 80020ea:	61a5      	str	r5, [r4, #24]
 80020ec:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80020f0:	f7ff ff24 	bl	8001f3c <memset>
 80020f4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80020f8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80020fc:	4620      	mov	r0, r4
 80020fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002100:	3468      	adds	r4, #104	; 0x68
 8002102:	e7d9      	b.n	80020b8 <__sfp+0x1c>
 8002104:	2104      	movs	r1, #4
 8002106:	4638      	mov	r0, r7
 8002108:	f7ff ff62 	bl	8001fd0 <__sfmoreglue>
 800210c:	4604      	mov	r4, r0
 800210e:	6030      	str	r0, [r6, #0]
 8002110:	2800      	cmp	r0, #0
 8002112:	d1d5      	bne.n	80020c0 <__sfp+0x24>
 8002114:	f7ff ff78 	bl	8002008 <__sfp_lock_release>
 8002118:	230c      	movs	r3, #12
 800211a:	603b      	str	r3, [r7, #0]
 800211c:	e7ee      	b.n	80020fc <__sfp+0x60>
 800211e:	bf00      	nop
 8002120:	08002e64 	.word	0x08002e64
 8002124:	ffff0001 	.word	0xffff0001

08002128 <_fwalk_reent>:
 8002128:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800212c:	4606      	mov	r6, r0
 800212e:	4688      	mov	r8, r1
 8002130:	2700      	movs	r7, #0
 8002132:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002136:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800213a:	f1b9 0901 	subs.w	r9, r9, #1
 800213e:	d505      	bpl.n	800214c <_fwalk_reent+0x24>
 8002140:	6824      	ldr	r4, [r4, #0]
 8002142:	2c00      	cmp	r4, #0
 8002144:	d1f7      	bne.n	8002136 <_fwalk_reent+0xe>
 8002146:	4638      	mov	r0, r7
 8002148:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800214c:	89ab      	ldrh	r3, [r5, #12]
 800214e:	2b01      	cmp	r3, #1
 8002150:	d907      	bls.n	8002162 <_fwalk_reent+0x3a>
 8002152:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002156:	3301      	adds	r3, #1
 8002158:	d003      	beq.n	8002162 <_fwalk_reent+0x3a>
 800215a:	4629      	mov	r1, r5
 800215c:	4630      	mov	r0, r6
 800215e:	47c0      	blx	r8
 8002160:	4307      	orrs	r7, r0
 8002162:	3568      	adds	r5, #104	; 0x68
 8002164:	e7e9      	b.n	800213a <_fwalk_reent+0x12>

08002166 <__retarget_lock_init_recursive>:
 8002166:	4770      	bx	lr

08002168 <__retarget_lock_acquire_recursive>:
 8002168:	4770      	bx	lr

0800216a <__retarget_lock_release_recursive>:
 800216a:	4770      	bx	lr

0800216c <_malloc_r>:
 800216c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800216e:	1ccd      	adds	r5, r1, #3
 8002170:	f025 0503 	bic.w	r5, r5, #3
 8002174:	3508      	adds	r5, #8
 8002176:	2d0c      	cmp	r5, #12
 8002178:	bf38      	it	cc
 800217a:	250c      	movcc	r5, #12
 800217c:	2d00      	cmp	r5, #0
 800217e:	4606      	mov	r6, r0
 8002180:	db01      	blt.n	8002186 <_malloc_r+0x1a>
 8002182:	42a9      	cmp	r1, r5
 8002184:	d903      	bls.n	800218e <_malloc_r+0x22>
 8002186:	230c      	movs	r3, #12
 8002188:	6033      	str	r3, [r6, #0]
 800218a:	2000      	movs	r0, #0
 800218c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800218e:	f000 fdb1 	bl	8002cf4 <__malloc_lock>
 8002192:	4921      	ldr	r1, [pc, #132]	; (8002218 <_malloc_r+0xac>)
 8002194:	680a      	ldr	r2, [r1, #0]
 8002196:	4614      	mov	r4, r2
 8002198:	b99c      	cbnz	r4, 80021c2 <_malloc_r+0x56>
 800219a:	4f20      	ldr	r7, [pc, #128]	; (800221c <_malloc_r+0xb0>)
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	b923      	cbnz	r3, 80021aa <_malloc_r+0x3e>
 80021a0:	4621      	mov	r1, r4
 80021a2:	4630      	mov	r0, r6
 80021a4:	f000 fb2a 	bl	80027fc <_sbrk_r>
 80021a8:	6038      	str	r0, [r7, #0]
 80021aa:	4629      	mov	r1, r5
 80021ac:	4630      	mov	r0, r6
 80021ae:	f000 fb25 	bl	80027fc <_sbrk_r>
 80021b2:	1c43      	adds	r3, r0, #1
 80021b4:	d123      	bne.n	80021fe <_malloc_r+0x92>
 80021b6:	230c      	movs	r3, #12
 80021b8:	4630      	mov	r0, r6
 80021ba:	6033      	str	r3, [r6, #0]
 80021bc:	f000 fda0 	bl	8002d00 <__malloc_unlock>
 80021c0:	e7e3      	b.n	800218a <_malloc_r+0x1e>
 80021c2:	6823      	ldr	r3, [r4, #0]
 80021c4:	1b5b      	subs	r3, r3, r5
 80021c6:	d417      	bmi.n	80021f8 <_malloc_r+0x8c>
 80021c8:	2b0b      	cmp	r3, #11
 80021ca:	d903      	bls.n	80021d4 <_malloc_r+0x68>
 80021cc:	6023      	str	r3, [r4, #0]
 80021ce:	441c      	add	r4, r3
 80021d0:	6025      	str	r5, [r4, #0]
 80021d2:	e004      	b.n	80021de <_malloc_r+0x72>
 80021d4:	6863      	ldr	r3, [r4, #4]
 80021d6:	42a2      	cmp	r2, r4
 80021d8:	bf0c      	ite	eq
 80021da:	600b      	streq	r3, [r1, #0]
 80021dc:	6053      	strne	r3, [r2, #4]
 80021de:	4630      	mov	r0, r6
 80021e0:	f000 fd8e 	bl	8002d00 <__malloc_unlock>
 80021e4:	f104 000b 	add.w	r0, r4, #11
 80021e8:	1d23      	adds	r3, r4, #4
 80021ea:	f020 0007 	bic.w	r0, r0, #7
 80021ee:	1ac2      	subs	r2, r0, r3
 80021f0:	d0cc      	beq.n	800218c <_malloc_r+0x20>
 80021f2:	1a1b      	subs	r3, r3, r0
 80021f4:	50a3      	str	r3, [r4, r2]
 80021f6:	e7c9      	b.n	800218c <_malloc_r+0x20>
 80021f8:	4622      	mov	r2, r4
 80021fa:	6864      	ldr	r4, [r4, #4]
 80021fc:	e7cc      	b.n	8002198 <_malloc_r+0x2c>
 80021fe:	1cc4      	adds	r4, r0, #3
 8002200:	f024 0403 	bic.w	r4, r4, #3
 8002204:	42a0      	cmp	r0, r4
 8002206:	d0e3      	beq.n	80021d0 <_malloc_r+0x64>
 8002208:	1a21      	subs	r1, r4, r0
 800220a:	4630      	mov	r0, r6
 800220c:	f000 faf6 	bl	80027fc <_sbrk_r>
 8002210:	3001      	adds	r0, #1
 8002212:	d1dd      	bne.n	80021d0 <_malloc_r+0x64>
 8002214:	e7cf      	b.n	80021b6 <_malloc_r+0x4a>
 8002216:	bf00      	nop
 8002218:	20000088 	.word	0x20000088
 800221c:	2000008c 	.word	0x2000008c

08002220 <__sfputc_r>:
 8002220:	6893      	ldr	r3, [r2, #8]
 8002222:	b410      	push	{r4}
 8002224:	3b01      	subs	r3, #1
 8002226:	2b00      	cmp	r3, #0
 8002228:	6093      	str	r3, [r2, #8]
 800222a:	da07      	bge.n	800223c <__sfputc_r+0x1c>
 800222c:	6994      	ldr	r4, [r2, #24]
 800222e:	42a3      	cmp	r3, r4
 8002230:	db01      	blt.n	8002236 <__sfputc_r+0x16>
 8002232:	290a      	cmp	r1, #10
 8002234:	d102      	bne.n	800223c <__sfputc_r+0x1c>
 8002236:	bc10      	pop	{r4}
 8002238:	f000 bb34 	b.w	80028a4 <__swbuf_r>
 800223c:	6813      	ldr	r3, [r2, #0]
 800223e:	1c58      	adds	r0, r3, #1
 8002240:	6010      	str	r0, [r2, #0]
 8002242:	7019      	strb	r1, [r3, #0]
 8002244:	4608      	mov	r0, r1
 8002246:	bc10      	pop	{r4}
 8002248:	4770      	bx	lr

0800224a <__sfputs_r>:
 800224a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800224c:	4606      	mov	r6, r0
 800224e:	460f      	mov	r7, r1
 8002250:	4614      	mov	r4, r2
 8002252:	18d5      	adds	r5, r2, r3
 8002254:	42ac      	cmp	r4, r5
 8002256:	d101      	bne.n	800225c <__sfputs_r+0x12>
 8002258:	2000      	movs	r0, #0
 800225a:	e007      	b.n	800226c <__sfputs_r+0x22>
 800225c:	463a      	mov	r2, r7
 800225e:	4630      	mov	r0, r6
 8002260:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002264:	f7ff ffdc 	bl	8002220 <__sfputc_r>
 8002268:	1c43      	adds	r3, r0, #1
 800226a:	d1f3      	bne.n	8002254 <__sfputs_r+0xa>
 800226c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002270 <_vfiprintf_r>:
 8002270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002274:	460d      	mov	r5, r1
 8002276:	4614      	mov	r4, r2
 8002278:	4698      	mov	r8, r3
 800227a:	4606      	mov	r6, r0
 800227c:	b09d      	sub	sp, #116	; 0x74
 800227e:	b118      	cbz	r0, 8002288 <_vfiprintf_r+0x18>
 8002280:	6983      	ldr	r3, [r0, #24]
 8002282:	b90b      	cbnz	r3, 8002288 <_vfiprintf_r+0x18>
 8002284:	f7ff fed2 	bl	800202c <__sinit>
 8002288:	4b89      	ldr	r3, [pc, #548]	; (80024b0 <_vfiprintf_r+0x240>)
 800228a:	429d      	cmp	r5, r3
 800228c:	d11b      	bne.n	80022c6 <_vfiprintf_r+0x56>
 800228e:	6875      	ldr	r5, [r6, #4]
 8002290:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002292:	07d9      	lsls	r1, r3, #31
 8002294:	d405      	bmi.n	80022a2 <_vfiprintf_r+0x32>
 8002296:	89ab      	ldrh	r3, [r5, #12]
 8002298:	059a      	lsls	r2, r3, #22
 800229a:	d402      	bmi.n	80022a2 <_vfiprintf_r+0x32>
 800229c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800229e:	f7ff ff63 	bl	8002168 <__retarget_lock_acquire_recursive>
 80022a2:	89ab      	ldrh	r3, [r5, #12]
 80022a4:	071b      	lsls	r3, r3, #28
 80022a6:	d501      	bpl.n	80022ac <_vfiprintf_r+0x3c>
 80022a8:	692b      	ldr	r3, [r5, #16]
 80022aa:	b9eb      	cbnz	r3, 80022e8 <_vfiprintf_r+0x78>
 80022ac:	4629      	mov	r1, r5
 80022ae:	4630      	mov	r0, r6
 80022b0:	f000 fb5c 	bl	800296c <__swsetup_r>
 80022b4:	b1c0      	cbz	r0, 80022e8 <_vfiprintf_r+0x78>
 80022b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80022b8:	07dc      	lsls	r4, r3, #31
 80022ba:	d50e      	bpl.n	80022da <_vfiprintf_r+0x6a>
 80022bc:	f04f 30ff 	mov.w	r0, #4294967295
 80022c0:	b01d      	add	sp, #116	; 0x74
 80022c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80022c6:	4b7b      	ldr	r3, [pc, #492]	; (80024b4 <_vfiprintf_r+0x244>)
 80022c8:	429d      	cmp	r5, r3
 80022ca:	d101      	bne.n	80022d0 <_vfiprintf_r+0x60>
 80022cc:	68b5      	ldr	r5, [r6, #8]
 80022ce:	e7df      	b.n	8002290 <_vfiprintf_r+0x20>
 80022d0:	4b79      	ldr	r3, [pc, #484]	; (80024b8 <_vfiprintf_r+0x248>)
 80022d2:	429d      	cmp	r5, r3
 80022d4:	bf08      	it	eq
 80022d6:	68f5      	ldreq	r5, [r6, #12]
 80022d8:	e7da      	b.n	8002290 <_vfiprintf_r+0x20>
 80022da:	89ab      	ldrh	r3, [r5, #12]
 80022dc:	0598      	lsls	r0, r3, #22
 80022de:	d4ed      	bmi.n	80022bc <_vfiprintf_r+0x4c>
 80022e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80022e2:	f7ff ff42 	bl	800216a <__retarget_lock_release_recursive>
 80022e6:	e7e9      	b.n	80022bc <_vfiprintf_r+0x4c>
 80022e8:	2300      	movs	r3, #0
 80022ea:	9309      	str	r3, [sp, #36]	; 0x24
 80022ec:	2320      	movs	r3, #32
 80022ee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80022f2:	2330      	movs	r3, #48	; 0x30
 80022f4:	f04f 0901 	mov.w	r9, #1
 80022f8:	f8cd 800c 	str.w	r8, [sp, #12]
 80022fc:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80024bc <_vfiprintf_r+0x24c>
 8002300:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002304:	4623      	mov	r3, r4
 8002306:	469a      	mov	sl, r3
 8002308:	f813 2b01 	ldrb.w	r2, [r3], #1
 800230c:	b10a      	cbz	r2, 8002312 <_vfiprintf_r+0xa2>
 800230e:	2a25      	cmp	r2, #37	; 0x25
 8002310:	d1f9      	bne.n	8002306 <_vfiprintf_r+0x96>
 8002312:	ebba 0b04 	subs.w	fp, sl, r4
 8002316:	d00b      	beq.n	8002330 <_vfiprintf_r+0xc0>
 8002318:	465b      	mov	r3, fp
 800231a:	4622      	mov	r2, r4
 800231c:	4629      	mov	r1, r5
 800231e:	4630      	mov	r0, r6
 8002320:	f7ff ff93 	bl	800224a <__sfputs_r>
 8002324:	3001      	adds	r0, #1
 8002326:	f000 80aa 	beq.w	800247e <_vfiprintf_r+0x20e>
 800232a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800232c:	445a      	add	r2, fp
 800232e:	9209      	str	r2, [sp, #36]	; 0x24
 8002330:	f89a 3000 	ldrb.w	r3, [sl]
 8002334:	2b00      	cmp	r3, #0
 8002336:	f000 80a2 	beq.w	800247e <_vfiprintf_r+0x20e>
 800233a:	2300      	movs	r3, #0
 800233c:	f04f 32ff 	mov.w	r2, #4294967295
 8002340:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002344:	f10a 0a01 	add.w	sl, sl, #1
 8002348:	9304      	str	r3, [sp, #16]
 800234a:	9307      	str	r3, [sp, #28]
 800234c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002350:	931a      	str	r3, [sp, #104]	; 0x68
 8002352:	4654      	mov	r4, sl
 8002354:	2205      	movs	r2, #5
 8002356:	f814 1b01 	ldrb.w	r1, [r4], #1
 800235a:	4858      	ldr	r0, [pc, #352]	; (80024bc <_vfiprintf_r+0x24c>)
 800235c:	f000 fcbc 	bl	8002cd8 <memchr>
 8002360:	9a04      	ldr	r2, [sp, #16]
 8002362:	b9d8      	cbnz	r0, 800239c <_vfiprintf_r+0x12c>
 8002364:	06d1      	lsls	r1, r2, #27
 8002366:	bf44      	itt	mi
 8002368:	2320      	movmi	r3, #32
 800236a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800236e:	0713      	lsls	r3, r2, #28
 8002370:	bf44      	itt	mi
 8002372:	232b      	movmi	r3, #43	; 0x2b
 8002374:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002378:	f89a 3000 	ldrb.w	r3, [sl]
 800237c:	2b2a      	cmp	r3, #42	; 0x2a
 800237e:	d015      	beq.n	80023ac <_vfiprintf_r+0x13c>
 8002380:	4654      	mov	r4, sl
 8002382:	2000      	movs	r0, #0
 8002384:	f04f 0c0a 	mov.w	ip, #10
 8002388:	9a07      	ldr	r2, [sp, #28]
 800238a:	4621      	mov	r1, r4
 800238c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002390:	3b30      	subs	r3, #48	; 0x30
 8002392:	2b09      	cmp	r3, #9
 8002394:	d94e      	bls.n	8002434 <_vfiprintf_r+0x1c4>
 8002396:	b1b0      	cbz	r0, 80023c6 <_vfiprintf_r+0x156>
 8002398:	9207      	str	r2, [sp, #28]
 800239a:	e014      	b.n	80023c6 <_vfiprintf_r+0x156>
 800239c:	eba0 0308 	sub.w	r3, r0, r8
 80023a0:	fa09 f303 	lsl.w	r3, r9, r3
 80023a4:	4313      	orrs	r3, r2
 80023a6:	46a2      	mov	sl, r4
 80023a8:	9304      	str	r3, [sp, #16]
 80023aa:	e7d2      	b.n	8002352 <_vfiprintf_r+0xe2>
 80023ac:	9b03      	ldr	r3, [sp, #12]
 80023ae:	1d19      	adds	r1, r3, #4
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	9103      	str	r1, [sp, #12]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	bfbb      	ittet	lt
 80023b8:	425b      	neglt	r3, r3
 80023ba:	f042 0202 	orrlt.w	r2, r2, #2
 80023be:	9307      	strge	r3, [sp, #28]
 80023c0:	9307      	strlt	r3, [sp, #28]
 80023c2:	bfb8      	it	lt
 80023c4:	9204      	strlt	r2, [sp, #16]
 80023c6:	7823      	ldrb	r3, [r4, #0]
 80023c8:	2b2e      	cmp	r3, #46	; 0x2e
 80023ca:	d10c      	bne.n	80023e6 <_vfiprintf_r+0x176>
 80023cc:	7863      	ldrb	r3, [r4, #1]
 80023ce:	2b2a      	cmp	r3, #42	; 0x2a
 80023d0:	d135      	bne.n	800243e <_vfiprintf_r+0x1ce>
 80023d2:	9b03      	ldr	r3, [sp, #12]
 80023d4:	3402      	adds	r4, #2
 80023d6:	1d1a      	adds	r2, r3, #4
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	9203      	str	r2, [sp, #12]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	bfb8      	it	lt
 80023e0:	f04f 33ff 	movlt.w	r3, #4294967295
 80023e4:	9305      	str	r3, [sp, #20]
 80023e6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80024cc <_vfiprintf_r+0x25c>
 80023ea:	2203      	movs	r2, #3
 80023ec:	4650      	mov	r0, sl
 80023ee:	7821      	ldrb	r1, [r4, #0]
 80023f0:	f000 fc72 	bl	8002cd8 <memchr>
 80023f4:	b140      	cbz	r0, 8002408 <_vfiprintf_r+0x198>
 80023f6:	2340      	movs	r3, #64	; 0x40
 80023f8:	eba0 000a 	sub.w	r0, r0, sl
 80023fc:	fa03 f000 	lsl.w	r0, r3, r0
 8002400:	9b04      	ldr	r3, [sp, #16]
 8002402:	3401      	adds	r4, #1
 8002404:	4303      	orrs	r3, r0
 8002406:	9304      	str	r3, [sp, #16]
 8002408:	f814 1b01 	ldrb.w	r1, [r4], #1
 800240c:	2206      	movs	r2, #6
 800240e:	482c      	ldr	r0, [pc, #176]	; (80024c0 <_vfiprintf_r+0x250>)
 8002410:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002414:	f000 fc60 	bl	8002cd8 <memchr>
 8002418:	2800      	cmp	r0, #0
 800241a:	d03f      	beq.n	800249c <_vfiprintf_r+0x22c>
 800241c:	4b29      	ldr	r3, [pc, #164]	; (80024c4 <_vfiprintf_r+0x254>)
 800241e:	bb1b      	cbnz	r3, 8002468 <_vfiprintf_r+0x1f8>
 8002420:	9b03      	ldr	r3, [sp, #12]
 8002422:	3307      	adds	r3, #7
 8002424:	f023 0307 	bic.w	r3, r3, #7
 8002428:	3308      	adds	r3, #8
 800242a:	9303      	str	r3, [sp, #12]
 800242c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800242e:	443b      	add	r3, r7
 8002430:	9309      	str	r3, [sp, #36]	; 0x24
 8002432:	e767      	b.n	8002304 <_vfiprintf_r+0x94>
 8002434:	460c      	mov	r4, r1
 8002436:	2001      	movs	r0, #1
 8002438:	fb0c 3202 	mla	r2, ip, r2, r3
 800243c:	e7a5      	b.n	800238a <_vfiprintf_r+0x11a>
 800243e:	2300      	movs	r3, #0
 8002440:	f04f 0c0a 	mov.w	ip, #10
 8002444:	4619      	mov	r1, r3
 8002446:	3401      	adds	r4, #1
 8002448:	9305      	str	r3, [sp, #20]
 800244a:	4620      	mov	r0, r4
 800244c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002450:	3a30      	subs	r2, #48	; 0x30
 8002452:	2a09      	cmp	r2, #9
 8002454:	d903      	bls.n	800245e <_vfiprintf_r+0x1ee>
 8002456:	2b00      	cmp	r3, #0
 8002458:	d0c5      	beq.n	80023e6 <_vfiprintf_r+0x176>
 800245a:	9105      	str	r1, [sp, #20]
 800245c:	e7c3      	b.n	80023e6 <_vfiprintf_r+0x176>
 800245e:	4604      	mov	r4, r0
 8002460:	2301      	movs	r3, #1
 8002462:	fb0c 2101 	mla	r1, ip, r1, r2
 8002466:	e7f0      	b.n	800244a <_vfiprintf_r+0x1da>
 8002468:	ab03      	add	r3, sp, #12
 800246a:	9300      	str	r3, [sp, #0]
 800246c:	462a      	mov	r2, r5
 800246e:	4630      	mov	r0, r6
 8002470:	4b15      	ldr	r3, [pc, #84]	; (80024c8 <_vfiprintf_r+0x258>)
 8002472:	a904      	add	r1, sp, #16
 8002474:	f3af 8000 	nop.w
 8002478:	4607      	mov	r7, r0
 800247a:	1c78      	adds	r0, r7, #1
 800247c:	d1d6      	bne.n	800242c <_vfiprintf_r+0x1bc>
 800247e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002480:	07d9      	lsls	r1, r3, #31
 8002482:	d405      	bmi.n	8002490 <_vfiprintf_r+0x220>
 8002484:	89ab      	ldrh	r3, [r5, #12]
 8002486:	059a      	lsls	r2, r3, #22
 8002488:	d402      	bmi.n	8002490 <_vfiprintf_r+0x220>
 800248a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800248c:	f7ff fe6d 	bl	800216a <__retarget_lock_release_recursive>
 8002490:	89ab      	ldrh	r3, [r5, #12]
 8002492:	065b      	lsls	r3, r3, #25
 8002494:	f53f af12 	bmi.w	80022bc <_vfiprintf_r+0x4c>
 8002498:	9809      	ldr	r0, [sp, #36]	; 0x24
 800249a:	e711      	b.n	80022c0 <_vfiprintf_r+0x50>
 800249c:	ab03      	add	r3, sp, #12
 800249e:	9300      	str	r3, [sp, #0]
 80024a0:	462a      	mov	r2, r5
 80024a2:	4630      	mov	r0, r6
 80024a4:	4b08      	ldr	r3, [pc, #32]	; (80024c8 <_vfiprintf_r+0x258>)
 80024a6:	a904      	add	r1, sp, #16
 80024a8:	f000 f882 	bl	80025b0 <_printf_i>
 80024ac:	e7e4      	b.n	8002478 <_vfiprintf_r+0x208>
 80024ae:	bf00      	nop
 80024b0:	08002e88 	.word	0x08002e88
 80024b4:	08002ea8 	.word	0x08002ea8
 80024b8:	08002e68 	.word	0x08002e68
 80024bc:	08002ec8 	.word	0x08002ec8
 80024c0:	08002ed2 	.word	0x08002ed2
 80024c4:	00000000 	.word	0x00000000
 80024c8:	0800224b 	.word	0x0800224b
 80024cc:	08002ece 	.word	0x08002ece

080024d0 <_printf_common>:
 80024d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80024d4:	4616      	mov	r6, r2
 80024d6:	4699      	mov	r9, r3
 80024d8:	688a      	ldr	r2, [r1, #8]
 80024da:	690b      	ldr	r3, [r1, #16]
 80024dc:	4607      	mov	r7, r0
 80024de:	4293      	cmp	r3, r2
 80024e0:	bfb8      	it	lt
 80024e2:	4613      	movlt	r3, r2
 80024e4:	6033      	str	r3, [r6, #0]
 80024e6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80024ea:	460c      	mov	r4, r1
 80024ec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80024f0:	b10a      	cbz	r2, 80024f6 <_printf_common+0x26>
 80024f2:	3301      	adds	r3, #1
 80024f4:	6033      	str	r3, [r6, #0]
 80024f6:	6823      	ldr	r3, [r4, #0]
 80024f8:	0699      	lsls	r1, r3, #26
 80024fa:	bf42      	ittt	mi
 80024fc:	6833      	ldrmi	r3, [r6, #0]
 80024fe:	3302      	addmi	r3, #2
 8002500:	6033      	strmi	r3, [r6, #0]
 8002502:	6825      	ldr	r5, [r4, #0]
 8002504:	f015 0506 	ands.w	r5, r5, #6
 8002508:	d106      	bne.n	8002518 <_printf_common+0x48>
 800250a:	f104 0a19 	add.w	sl, r4, #25
 800250e:	68e3      	ldr	r3, [r4, #12]
 8002510:	6832      	ldr	r2, [r6, #0]
 8002512:	1a9b      	subs	r3, r3, r2
 8002514:	42ab      	cmp	r3, r5
 8002516:	dc28      	bgt.n	800256a <_printf_common+0x9a>
 8002518:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800251c:	1e13      	subs	r3, r2, #0
 800251e:	6822      	ldr	r2, [r4, #0]
 8002520:	bf18      	it	ne
 8002522:	2301      	movne	r3, #1
 8002524:	0692      	lsls	r2, r2, #26
 8002526:	d42d      	bmi.n	8002584 <_printf_common+0xb4>
 8002528:	4649      	mov	r1, r9
 800252a:	4638      	mov	r0, r7
 800252c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002530:	47c0      	blx	r8
 8002532:	3001      	adds	r0, #1
 8002534:	d020      	beq.n	8002578 <_printf_common+0xa8>
 8002536:	6823      	ldr	r3, [r4, #0]
 8002538:	68e5      	ldr	r5, [r4, #12]
 800253a:	f003 0306 	and.w	r3, r3, #6
 800253e:	2b04      	cmp	r3, #4
 8002540:	bf18      	it	ne
 8002542:	2500      	movne	r5, #0
 8002544:	6832      	ldr	r2, [r6, #0]
 8002546:	f04f 0600 	mov.w	r6, #0
 800254a:	68a3      	ldr	r3, [r4, #8]
 800254c:	bf08      	it	eq
 800254e:	1aad      	subeq	r5, r5, r2
 8002550:	6922      	ldr	r2, [r4, #16]
 8002552:	bf08      	it	eq
 8002554:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002558:	4293      	cmp	r3, r2
 800255a:	bfc4      	itt	gt
 800255c:	1a9b      	subgt	r3, r3, r2
 800255e:	18ed      	addgt	r5, r5, r3
 8002560:	341a      	adds	r4, #26
 8002562:	42b5      	cmp	r5, r6
 8002564:	d11a      	bne.n	800259c <_printf_common+0xcc>
 8002566:	2000      	movs	r0, #0
 8002568:	e008      	b.n	800257c <_printf_common+0xac>
 800256a:	2301      	movs	r3, #1
 800256c:	4652      	mov	r2, sl
 800256e:	4649      	mov	r1, r9
 8002570:	4638      	mov	r0, r7
 8002572:	47c0      	blx	r8
 8002574:	3001      	adds	r0, #1
 8002576:	d103      	bne.n	8002580 <_printf_common+0xb0>
 8002578:	f04f 30ff 	mov.w	r0, #4294967295
 800257c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002580:	3501      	adds	r5, #1
 8002582:	e7c4      	b.n	800250e <_printf_common+0x3e>
 8002584:	2030      	movs	r0, #48	; 0x30
 8002586:	18e1      	adds	r1, r4, r3
 8002588:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800258c:	1c5a      	adds	r2, r3, #1
 800258e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002592:	4422      	add	r2, r4
 8002594:	3302      	adds	r3, #2
 8002596:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800259a:	e7c5      	b.n	8002528 <_printf_common+0x58>
 800259c:	2301      	movs	r3, #1
 800259e:	4622      	mov	r2, r4
 80025a0:	4649      	mov	r1, r9
 80025a2:	4638      	mov	r0, r7
 80025a4:	47c0      	blx	r8
 80025a6:	3001      	adds	r0, #1
 80025a8:	d0e6      	beq.n	8002578 <_printf_common+0xa8>
 80025aa:	3601      	adds	r6, #1
 80025ac:	e7d9      	b.n	8002562 <_printf_common+0x92>
	...

080025b0 <_printf_i>:
 80025b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80025b4:	460c      	mov	r4, r1
 80025b6:	7e27      	ldrb	r7, [r4, #24]
 80025b8:	4691      	mov	r9, r2
 80025ba:	2f78      	cmp	r7, #120	; 0x78
 80025bc:	4680      	mov	r8, r0
 80025be:	469a      	mov	sl, r3
 80025c0:	990c      	ldr	r1, [sp, #48]	; 0x30
 80025c2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80025c6:	d807      	bhi.n	80025d8 <_printf_i+0x28>
 80025c8:	2f62      	cmp	r7, #98	; 0x62
 80025ca:	d80a      	bhi.n	80025e2 <_printf_i+0x32>
 80025cc:	2f00      	cmp	r7, #0
 80025ce:	f000 80d9 	beq.w	8002784 <_printf_i+0x1d4>
 80025d2:	2f58      	cmp	r7, #88	; 0x58
 80025d4:	f000 80a4 	beq.w	8002720 <_printf_i+0x170>
 80025d8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80025dc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80025e0:	e03a      	b.n	8002658 <_printf_i+0xa8>
 80025e2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80025e6:	2b15      	cmp	r3, #21
 80025e8:	d8f6      	bhi.n	80025d8 <_printf_i+0x28>
 80025ea:	a001      	add	r0, pc, #4	; (adr r0, 80025f0 <_printf_i+0x40>)
 80025ec:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80025f0:	08002649 	.word	0x08002649
 80025f4:	0800265d 	.word	0x0800265d
 80025f8:	080025d9 	.word	0x080025d9
 80025fc:	080025d9 	.word	0x080025d9
 8002600:	080025d9 	.word	0x080025d9
 8002604:	080025d9 	.word	0x080025d9
 8002608:	0800265d 	.word	0x0800265d
 800260c:	080025d9 	.word	0x080025d9
 8002610:	080025d9 	.word	0x080025d9
 8002614:	080025d9 	.word	0x080025d9
 8002618:	080025d9 	.word	0x080025d9
 800261c:	0800276b 	.word	0x0800276b
 8002620:	0800268d 	.word	0x0800268d
 8002624:	0800274d 	.word	0x0800274d
 8002628:	080025d9 	.word	0x080025d9
 800262c:	080025d9 	.word	0x080025d9
 8002630:	0800278d 	.word	0x0800278d
 8002634:	080025d9 	.word	0x080025d9
 8002638:	0800268d 	.word	0x0800268d
 800263c:	080025d9 	.word	0x080025d9
 8002640:	080025d9 	.word	0x080025d9
 8002644:	08002755 	.word	0x08002755
 8002648:	680b      	ldr	r3, [r1, #0]
 800264a:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800264e:	1d1a      	adds	r2, r3, #4
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	600a      	str	r2, [r1, #0]
 8002654:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002658:	2301      	movs	r3, #1
 800265a:	e0a4      	b.n	80027a6 <_printf_i+0x1f6>
 800265c:	6825      	ldr	r5, [r4, #0]
 800265e:	6808      	ldr	r0, [r1, #0]
 8002660:	062e      	lsls	r6, r5, #24
 8002662:	f100 0304 	add.w	r3, r0, #4
 8002666:	d50a      	bpl.n	800267e <_printf_i+0xce>
 8002668:	6805      	ldr	r5, [r0, #0]
 800266a:	600b      	str	r3, [r1, #0]
 800266c:	2d00      	cmp	r5, #0
 800266e:	da03      	bge.n	8002678 <_printf_i+0xc8>
 8002670:	232d      	movs	r3, #45	; 0x2d
 8002672:	426d      	negs	r5, r5
 8002674:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002678:	230a      	movs	r3, #10
 800267a:	485e      	ldr	r0, [pc, #376]	; (80027f4 <_printf_i+0x244>)
 800267c:	e019      	b.n	80026b2 <_printf_i+0x102>
 800267e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8002682:	6805      	ldr	r5, [r0, #0]
 8002684:	600b      	str	r3, [r1, #0]
 8002686:	bf18      	it	ne
 8002688:	b22d      	sxthne	r5, r5
 800268a:	e7ef      	b.n	800266c <_printf_i+0xbc>
 800268c:	680b      	ldr	r3, [r1, #0]
 800268e:	6825      	ldr	r5, [r4, #0]
 8002690:	1d18      	adds	r0, r3, #4
 8002692:	6008      	str	r0, [r1, #0]
 8002694:	0628      	lsls	r0, r5, #24
 8002696:	d501      	bpl.n	800269c <_printf_i+0xec>
 8002698:	681d      	ldr	r5, [r3, #0]
 800269a:	e002      	b.n	80026a2 <_printf_i+0xf2>
 800269c:	0669      	lsls	r1, r5, #25
 800269e:	d5fb      	bpl.n	8002698 <_printf_i+0xe8>
 80026a0:	881d      	ldrh	r5, [r3, #0]
 80026a2:	2f6f      	cmp	r7, #111	; 0x6f
 80026a4:	bf0c      	ite	eq
 80026a6:	2308      	moveq	r3, #8
 80026a8:	230a      	movne	r3, #10
 80026aa:	4852      	ldr	r0, [pc, #328]	; (80027f4 <_printf_i+0x244>)
 80026ac:	2100      	movs	r1, #0
 80026ae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80026b2:	6866      	ldr	r6, [r4, #4]
 80026b4:	2e00      	cmp	r6, #0
 80026b6:	bfa8      	it	ge
 80026b8:	6821      	ldrge	r1, [r4, #0]
 80026ba:	60a6      	str	r6, [r4, #8]
 80026bc:	bfa4      	itt	ge
 80026be:	f021 0104 	bicge.w	r1, r1, #4
 80026c2:	6021      	strge	r1, [r4, #0]
 80026c4:	b90d      	cbnz	r5, 80026ca <_printf_i+0x11a>
 80026c6:	2e00      	cmp	r6, #0
 80026c8:	d04d      	beq.n	8002766 <_printf_i+0x1b6>
 80026ca:	4616      	mov	r6, r2
 80026cc:	fbb5 f1f3 	udiv	r1, r5, r3
 80026d0:	fb03 5711 	mls	r7, r3, r1, r5
 80026d4:	5dc7      	ldrb	r7, [r0, r7]
 80026d6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80026da:	462f      	mov	r7, r5
 80026dc:	42bb      	cmp	r3, r7
 80026de:	460d      	mov	r5, r1
 80026e0:	d9f4      	bls.n	80026cc <_printf_i+0x11c>
 80026e2:	2b08      	cmp	r3, #8
 80026e4:	d10b      	bne.n	80026fe <_printf_i+0x14e>
 80026e6:	6823      	ldr	r3, [r4, #0]
 80026e8:	07df      	lsls	r7, r3, #31
 80026ea:	d508      	bpl.n	80026fe <_printf_i+0x14e>
 80026ec:	6923      	ldr	r3, [r4, #16]
 80026ee:	6861      	ldr	r1, [r4, #4]
 80026f0:	4299      	cmp	r1, r3
 80026f2:	bfde      	ittt	le
 80026f4:	2330      	movle	r3, #48	; 0x30
 80026f6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80026fa:	f106 36ff 	addle.w	r6, r6, #4294967295
 80026fe:	1b92      	subs	r2, r2, r6
 8002700:	6122      	str	r2, [r4, #16]
 8002702:	464b      	mov	r3, r9
 8002704:	4621      	mov	r1, r4
 8002706:	4640      	mov	r0, r8
 8002708:	f8cd a000 	str.w	sl, [sp]
 800270c:	aa03      	add	r2, sp, #12
 800270e:	f7ff fedf 	bl	80024d0 <_printf_common>
 8002712:	3001      	adds	r0, #1
 8002714:	d14c      	bne.n	80027b0 <_printf_i+0x200>
 8002716:	f04f 30ff 	mov.w	r0, #4294967295
 800271a:	b004      	add	sp, #16
 800271c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002720:	4834      	ldr	r0, [pc, #208]	; (80027f4 <_printf_i+0x244>)
 8002722:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002726:	680e      	ldr	r6, [r1, #0]
 8002728:	6823      	ldr	r3, [r4, #0]
 800272a:	f856 5b04 	ldr.w	r5, [r6], #4
 800272e:	061f      	lsls	r7, r3, #24
 8002730:	600e      	str	r6, [r1, #0]
 8002732:	d514      	bpl.n	800275e <_printf_i+0x1ae>
 8002734:	07d9      	lsls	r1, r3, #31
 8002736:	bf44      	itt	mi
 8002738:	f043 0320 	orrmi.w	r3, r3, #32
 800273c:	6023      	strmi	r3, [r4, #0]
 800273e:	b91d      	cbnz	r5, 8002748 <_printf_i+0x198>
 8002740:	6823      	ldr	r3, [r4, #0]
 8002742:	f023 0320 	bic.w	r3, r3, #32
 8002746:	6023      	str	r3, [r4, #0]
 8002748:	2310      	movs	r3, #16
 800274a:	e7af      	b.n	80026ac <_printf_i+0xfc>
 800274c:	6823      	ldr	r3, [r4, #0]
 800274e:	f043 0320 	orr.w	r3, r3, #32
 8002752:	6023      	str	r3, [r4, #0]
 8002754:	2378      	movs	r3, #120	; 0x78
 8002756:	4828      	ldr	r0, [pc, #160]	; (80027f8 <_printf_i+0x248>)
 8002758:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800275c:	e7e3      	b.n	8002726 <_printf_i+0x176>
 800275e:	065e      	lsls	r6, r3, #25
 8002760:	bf48      	it	mi
 8002762:	b2ad      	uxthmi	r5, r5
 8002764:	e7e6      	b.n	8002734 <_printf_i+0x184>
 8002766:	4616      	mov	r6, r2
 8002768:	e7bb      	b.n	80026e2 <_printf_i+0x132>
 800276a:	680b      	ldr	r3, [r1, #0]
 800276c:	6826      	ldr	r6, [r4, #0]
 800276e:	1d1d      	adds	r5, r3, #4
 8002770:	6960      	ldr	r0, [r4, #20]
 8002772:	600d      	str	r5, [r1, #0]
 8002774:	0635      	lsls	r5, r6, #24
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	d501      	bpl.n	800277e <_printf_i+0x1ce>
 800277a:	6018      	str	r0, [r3, #0]
 800277c:	e002      	b.n	8002784 <_printf_i+0x1d4>
 800277e:	0671      	lsls	r1, r6, #25
 8002780:	d5fb      	bpl.n	800277a <_printf_i+0x1ca>
 8002782:	8018      	strh	r0, [r3, #0]
 8002784:	2300      	movs	r3, #0
 8002786:	4616      	mov	r6, r2
 8002788:	6123      	str	r3, [r4, #16]
 800278a:	e7ba      	b.n	8002702 <_printf_i+0x152>
 800278c:	680b      	ldr	r3, [r1, #0]
 800278e:	1d1a      	adds	r2, r3, #4
 8002790:	600a      	str	r2, [r1, #0]
 8002792:	681e      	ldr	r6, [r3, #0]
 8002794:	2100      	movs	r1, #0
 8002796:	4630      	mov	r0, r6
 8002798:	6862      	ldr	r2, [r4, #4]
 800279a:	f000 fa9d 	bl	8002cd8 <memchr>
 800279e:	b108      	cbz	r0, 80027a4 <_printf_i+0x1f4>
 80027a0:	1b80      	subs	r0, r0, r6
 80027a2:	6060      	str	r0, [r4, #4]
 80027a4:	6863      	ldr	r3, [r4, #4]
 80027a6:	6123      	str	r3, [r4, #16]
 80027a8:	2300      	movs	r3, #0
 80027aa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80027ae:	e7a8      	b.n	8002702 <_printf_i+0x152>
 80027b0:	4632      	mov	r2, r6
 80027b2:	4649      	mov	r1, r9
 80027b4:	4640      	mov	r0, r8
 80027b6:	6923      	ldr	r3, [r4, #16]
 80027b8:	47d0      	blx	sl
 80027ba:	3001      	adds	r0, #1
 80027bc:	d0ab      	beq.n	8002716 <_printf_i+0x166>
 80027be:	6823      	ldr	r3, [r4, #0]
 80027c0:	079b      	lsls	r3, r3, #30
 80027c2:	d413      	bmi.n	80027ec <_printf_i+0x23c>
 80027c4:	68e0      	ldr	r0, [r4, #12]
 80027c6:	9b03      	ldr	r3, [sp, #12]
 80027c8:	4298      	cmp	r0, r3
 80027ca:	bfb8      	it	lt
 80027cc:	4618      	movlt	r0, r3
 80027ce:	e7a4      	b.n	800271a <_printf_i+0x16a>
 80027d0:	2301      	movs	r3, #1
 80027d2:	4632      	mov	r2, r6
 80027d4:	4649      	mov	r1, r9
 80027d6:	4640      	mov	r0, r8
 80027d8:	47d0      	blx	sl
 80027da:	3001      	adds	r0, #1
 80027dc:	d09b      	beq.n	8002716 <_printf_i+0x166>
 80027de:	3501      	adds	r5, #1
 80027e0:	68e3      	ldr	r3, [r4, #12]
 80027e2:	9903      	ldr	r1, [sp, #12]
 80027e4:	1a5b      	subs	r3, r3, r1
 80027e6:	42ab      	cmp	r3, r5
 80027e8:	dcf2      	bgt.n	80027d0 <_printf_i+0x220>
 80027ea:	e7eb      	b.n	80027c4 <_printf_i+0x214>
 80027ec:	2500      	movs	r5, #0
 80027ee:	f104 0619 	add.w	r6, r4, #25
 80027f2:	e7f5      	b.n	80027e0 <_printf_i+0x230>
 80027f4:	08002ed9 	.word	0x08002ed9
 80027f8:	08002eea 	.word	0x08002eea

080027fc <_sbrk_r>:
 80027fc:	b538      	push	{r3, r4, r5, lr}
 80027fe:	2300      	movs	r3, #0
 8002800:	4d05      	ldr	r5, [pc, #20]	; (8002818 <_sbrk_r+0x1c>)
 8002802:	4604      	mov	r4, r0
 8002804:	4608      	mov	r0, r1
 8002806:	602b      	str	r3, [r5, #0]
 8002808:	f7ff fb0e 	bl	8001e28 <_sbrk>
 800280c:	1c43      	adds	r3, r0, #1
 800280e:	d102      	bne.n	8002816 <_sbrk_r+0x1a>
 8002810:	682b      	ldr	r3, [r5, #0]
 8002812:	b103      	cbz	r3, 8002816 <_sbrk_r+0x1a>
 8002814:	6023      	str	r3, [r4, #0]
 8002816:	bd38      	pop	{r3, r4, r5, pc}
 8002818:	200000a8 	.word	0x200000a8

0800281c <__sread>:
 800281c:	b510      	push	{r4, lr}
 800281e:	460c      	mov	r4, r1
 8002820:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002824:	f000 fabe 	bl	8002da4 <_read_r>
 8002828:	2800      	cmp	r0, #0
 800282a:	bfab      	itete	ge
 800282c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800282e:	89a3      	ldrhlt	r3, [r4, #12]
 8002830:	181b      	addge	r3, r3, r0
 8002832:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002836:	bfac      	ite	ge
 8002838:	6563      	strge	r3, [r4, #84]	; 0x54
 800283a:	81a3      	strhlt	r3, [r4, #12]
 800283c:	bd10      	pop	{r4, pc}

0800283e <__swrite>:
 800283e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002842:	461f      	mov	r7, r3
 8002844:	898b      	ldrh	r3, [r1, #12]
 8002846:	4605      	mov	r5, r0
 8002848:	05db      	lsls	r3, r3, #23
 800284a:	460c      	mov	r4, r1
 800284c:	4616      	mov	r6, r2
 800284e:	d505      	bpl.n	800285c <__swrite+0x1e>
 8002850:	2302      	movs	r3, #2
 8002852:	2200      	movs	r2, #0
 8002854:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002858:	f000 f9c8 	bl	8002bec <_lseek_r>
 800285c:	89a3      	ldrh	r3, [r4, #12]
 800285e:	4632      	mov	r2, r6
 8002860:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002864:	81a3      	strh	r3, [r4, #12]
 8002866:	4628      	mov	r0, r5
 8002868:	463b      	mov	r3, r7
 800286a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800286e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002872:	f000 b869 	b.w	8002948 <_write_r>

08002876 <__sseek>:
 8002876:	b510      	push	{r4, lr}
 8002878:	460c      	mov	r4, r1
 800287a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800287e:	f000 f9b5 	bl	8002bec <_lseek_r>
 8002882:	1c43      	adds	r3, r0, #1
 8002884:	89a3      	ldrh	r3, [r4, #12]
 8002886:	bf15      	itete	ne
 8002888:	6560      	strne	r0, [r4, #84]	; 0x54
 800288a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800288e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002892:	81a3      	strheq	r3, [r4, #12]
 8002894:	bf18      	it	ne
 8002896:	81a3      	strhne	r3, [r4, #12]
 8002898:	bd10      	pop	{r4, pc}

0800289a <__sclose>:
 800289a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800289e:	f000 b8d3 	b.w	8002a48 <_close_r>
	...

080028a4 <__swbuf_r>:
 80028a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028a6:	460e      	mov	r6, r1
 80028a8:	4614      	mov	r4, r2
 80028aa:	4605      	mov	r5, r0
 80028ac:	b118      	cbz	r0, 80028b6 <__swbuf_r+0x12>
 80028ae:	6983      	ldr	r3, [r0, #24]
 80028b0:	b90b      	cbnz	r3, 80028b6 <__swbuf_r+0x12>
 80028b2:	f7ff fbbb 	bl	800202c <__sinit>
 80028b6:	4b21      	ldr	r3, [pc, #132]	; (800293c <__swbuf_r+0x98>)
 80028b8:	429c      	cmp	r4, r3
 80028ba:	d12b      	bne.n	8002914 <__swbuf_r+0x70>
 80028bc:	686c      	ldr	r4, [r5, #4]
 80028be:	69a3      	ldr	r3, [r4, #24]
 80028c0:	60a3      	str	r3, [r4, #8]
 80028c2:	89a3      	ldrh	r3, [r4, #12]
 80028c4:	071a      	lsls	r2, r3, #28
 80028c6:	d52f      	bpl.n	8002928 <__swbuf_r+0x84>
 80028c8:	6923      	ldr	r3, [r4, #16]
 80028ca:	b36b      	cbz	r3, 8002928 <__swbuf_r+0x84>
 80028cc:	6923      	ldr	r3, [r4, #16]
 80028ce:	6820      	ldr	r0, [r4, #0]
 80028d0:	b2f6      	uxtb	r6, r6
 80028d2:	1ac0      	subs	r0, r0, r3
 80028d4:	6963      	ldr	r3, [r4, #20]
 80028d6:	4637      	mov	r7, r6
 80028d8:	4283      	cmp	r3, r0
 80028da:	dc04      	bgt.n	80028e6 <__swbuf_r+0x42>
 80028dc:	4621      	mov	r1, r4
 80028de:	4628      	mov	r0, r5
 80028e0:	f000 f948 	bl	8002b74 <_fflush_r>
 80028e4:	bb30      	cbnz	r0, 8002934 <__swbuf_r+0x90>
 80028e6:	68a3      	ldr	r3, [r4, #8]
 80028e8:	3001      	adds	r0, #1
 80028ea:	3b01      	subs	r3, #1
 80028ec:	60a3      	str	r3, [r4, #8]
 80028ee:	6823      	ldr	r3, [r4, #0]
 80028f0:	1c5a      	adds	r2, r3, #1
 80028f2:	6022      	str	r2, [r4, #0]
 80028f4:	701e      	strb	r6, [r3, #0]
 80028f6:	6963      	ldr	r3, [r4, #20]
 80028f8:	4283      	cmp	r3, r0
 80028fa:	d004      	beq.n	8002906 <__swbuf_r+0x62>
 80028fc:	89a3      	ldrh	r3, [r4, #12]
 80028fe:	07db      	lsls	r3, r3, #31
 8002900:	d506      	bpl.n	8002910 <__swbuf_r+0x6c>
 8002902:	2e0a      	cmp	r6, #10
 8002904:	d104      	bne.n	8002910 <__swbuf_r+0x6c>
 8002906:	4621      	mov	r1, r4
 8002908:	4628      	mov	r0, r5
 800290a:	f000 f933 	bl	8002b74 <_fflush_r>
 800290e:	b988      	cbnz	r0, 8002934 <__swbuf_r+0x90>
 8002910:	4638      	mov	r0, r7
 8002912:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002914:	4b0a      	ldr	r3, [pc, #40]	; (8002940 <__swbuf_r+0x9c>)
 8002916:	429c      	cmp	r4, r3
 8002918:	d101      	bne.n	800291e <__swbuf_r+0x7a>
 800291a:	68ac      	ldr	r4, [r5, #8]
 800291c:	e7cf      	b.n	80028be <__swbuf_r+0x1a>
 800291e:	4b09      	ldr	r3, [pc, #36]	; (8002944 <__swbuf_r+0xa0>)
 8002920:	429c      	cmp	r4, r3
 8002922:	bf08      	it	eq
 8002924:	68ec      	ldreq	r4, [r5, #12]
 8002926:	e7ca      	b.n	80028be <__swbuf_r+0x1a>
 8002928:	4621      	mov	r1, r4
 800292a:	4628      	mov	r0, r5
 800292c:	f000 f81e 	bl	800296c <__swsetup_r>
 8002930:	2800      	cmp	r0, #0
 8002932:	d0cb      	beq.n	80028cc <__swbuf_r+0x28>
 8002934:	f04f 37ff 	mov.w	r7, #4294967295
 8002938:	e7ea      	b.n	8002910 <__swbuf_r+0x6c>
 800293a:	bf00      	nop
 800293c:	08002e88 	.word	0x08002e88
 8002940:	08002ea8 	.word	0x08002ea8
 8002944:	08002e68 	.word	0x08002e68

08002948 <_write_r>:
 8002948:	b538      	push	{r3, r4, r5, lr}
 800294a:	4604      	mov	r4, r0
 800294c:	4608      	mov	r0, r1
 800294e:	4611      	mov	r1, r2
 8002950:	2200      	movs	r2, #0
 8002952:	4d05      	ldr	r5, [pc, #20]	; (8002968 <_write_r+0x20>)
 8002954:	602a      	str	r2, [r5, #0]
 8002956:	461a      	mov	r2, r3
 8002958:	f7ff fa19 	bl	8001d8e <_write>
 800295c:	1c43      	adds	r3, r0, #1
 800295e:	d102      	bne.n	8002966 <_write_r+0x1e>
 8002960:	682b      	ldr	r3, [r5, #0]
 8002962:	b103      	cbz	r3, 8002966 <_write_r+0x1e>
 8002964:	6023      	str	r3, [r4, #0]
 8002966:	bd38      	pop	{r3, r4, r5, pc}
 8002968:	200000a8 	.word	0x200000a8

0800296c <__swsetup_r>:
 800296c:	4b32      	ldr	r3, [pc, #200]	; (8002a38 <__swsetup_r+0xcc>)
 800296e:	b570      	push	{r4, r5, r6, lr}
 8002970:	681d      	ldr	r5, [r3, #0]
 8002972:	4606      	mov	r6, r0
 8002974:	460c      	mov	r4, r1
 8002976:	b125      	cbz	r5, 8002982 <__swsetup_r+0x16>
 8002978:	69ab      	ldr	r3, [r5, #24]
 800297a:	b913      	cbnz	r3, 8002982 <__swsetup_r+0x16>
 800297c:	4628      	mov	r0, r5
 800297e:	f7ff fb55 	bl	800202c <__sinit>
 8002982:	4b2e      	ldr	r3, [pc, #184]	; (8002a3c <__swsetup_r+0xd0>)
 8002984:	429c      	cmp	r4, r3
 8002986:	d10f      	bne.n	80029a8 <__swsetup_r+0x3c>
 8002988:	686c      	ldr	r4, [r5, #4]
 800298a:	89a3      	ldrh	r3, [r4, #12]
 800298c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002990:	0719      	lsls	r1, r3, #28
 8002992:	d42c      	bmi.n	80029ee <__swsetup_r+0x82>
 8002994:	06dd      	lsls	r5, r3, #27
 8002996:	d411      	bmi.n	80029bc <__swsetup_r+0x50>
 8002998:	2309      	movs	r3, #9
 800299a:	6033      	str	r3, [r6, #0]
 800299c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80029a0:	f04f 30ff 	mov.w	r0, #4294967295
 80029a4:	81a3      	strh	r3, [r4, #12]
 80029a6:	e03e      	b.n	8002a26 <__swsetup_r+0xba>
 80029a8:	4b25      	ldr	r3, [pc, #148]	; (8002a40 <__swsetup_r+0xd4>)
 80029aa:	429c      	cmp	r4, r3
 80029ac:	d101      	bne.n	80029b2 <__swsetup_r+0x46>
 80029ae:	68ac      	ldr	r4, [r5, #8]
 80029b0:	e7eb      	b.n	800298a <__swsetup_r+0x1e>
 80029b2:	4b24      	ldr	r3, [pc, #144]	; (8002a44 <__swsetup_r+0xd8>)
 80029b4:	429c      	cmp	r4, r3
 80029b6:	bf08      	it	eq
 80029b8:	68ec      	ldreq	r4, [r5, #12]
 80029ba:	e7e6      	b.n	800298a <__swsetup_r+0x1e>
 80029bc:	0758      	lsls	r0, r3, #29
 80029be:	d512      	bpl.n	80029e6 <__swsetup_r+0x7a>
 80029c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80029c2:	b141      	cbz	r1, 80029d6 <__swsetup_r+0x6a>
 80029c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80029c8:	4299      	cmp	r1, r3
 80029ca:	d002      	beq.n	80029d2 <__swsetup_r+0x66>
 80029cc:	4630      	mov	r0, r6
 80029ce:	f000 f99d 	bl	8002d0c <_free_r>
 80029d2:	2300      	movs	r3, #0
 80029d4:	6363      	str	r3, [r4, #52]	; 0x34
 80029d6:	89a3      	ldrh	r3, [r4, #12]
 80029d8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80029dc:	81a3      	strh	r3, [r4, #12]
 80029de:	2300      	movs	r3, #0
 80029e0:	6063      	str	r3, [r4, #4]
 80029e2:	6923      	ldr	r3, [r4, #16]
 80029e4:	6023      	str	r3, [r4, #0]
 80029e6:	89a3      	ldrh	r3, [r4, #12]
 80029e8:	f043 0308 	orr.w	r3, r3, #8
 80029ec:	81a3      	strh	r3, [r4, #12]
 80029ee:	6923      	ldr	r3, [r4, #16]
 80029f0:	b94b      	cbnz	r3, 8002a06 <__swsetup_r+0x9a>
 80029f2:	89a3      	ldrh	r3, [r4, #12]
 80029f4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80029f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80029fc:	d003      	beq.n	8002a06 <__swsetup_r+0x9a>
 80029fe:	4621      	mov	r1, r4
 8002a00:	4630      	mov	r0, r6
 8002a02:	f000 f929 	bl	8002c58 <__smakebuf_r>
 8002a06:	89a0      	ldrh	r0, [r4, #12]
 8002a08:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002a0c:	f010 0301 	ands.w	r3, r0, #1
 8002a10:	d00a      	beq.n	8002a28 <__swsetup_r+0xbc>
 8002a12:	2300      	movs	r3, #0
 8002a14:	60a3      	str	r3, [r4, #8]
 8002a16:	6963      	ldr	r3, [r4, #20]
 8002a18:	425b      	negs	r3, r3
 8002a1a:	61a3      	str	r3, [r4, #24]
 8002a1c:	6923      	ldr	r3, [r4, #16]
 8002a1e:	b943      	cbnz	r3, 8002a32 <__swsetup_r+0xc6>
 8002a20:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002a24:	d1ba      	bne.n	800299c <__swsetup_r+0x30>
 8002a26:	bd70      	pop	{r4, r5, r6, pc}
 8002a28:	0781      	lsls	r1, r0, #30
 8002a2a:	bf58      	it	pl
 8002a2c:	6963      	ldrpl	r3, [r4, #20]
 8002a2e:	60a3      	str	r3, [r4, #8]
 8002a30:	e7f4      	b.n	8002a1c <__swsetup_r+0xb0>
 8002a32:	2000      	movs	r0, #0
 8002a34:	e7f7      	b.n	8002a26 <__swsetup_r+0xba>
 8002a36:	bf00      	nop
 8002a38:	20000000 	.word	0x20000000
 8002a3c:	08002e88 	.word	0x08002e88
 8002a40:	08002ea8 	.word	0x08002ea8
 8002a44:	08002e68 	.word	0x08002e68

08002a48 <_close_r>:
 8002a48:	b538      	push	{r3, r4, r5, lr}
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	4d05      	ldr	r5, [pc, #20]	; (8002a64 <_close_r+0x1c>)
 8002a4e:	4604      	mov	r4, r0
 8002a50:	4608      	mov	r0, r1
 8002a52:	602b      	str	r3, [r5, #0]
 8002a54:	f7ff f9b7 	bl	8001dc6 <_close>
 8002a58:	1c43      	adds	r3, r0, #1
 8002a5a:	d102      	bne.n	8002a62 <_close_r+0x1a>
 8002a5c:	682b      	ldr	r3, [r5, #0]
 8002a5e:	b103      	cbz	r3, 8002a62 <_close_r+0x1a>
 8002a60:	6023      	str	r3, [r4, #0]
 8002a62:	bd38      	pop	{r3, r4, r5, pc}
 8002a64:	200000a8 	.word	0x200000a8

08002a68 <__sflush_r>:
 8002a68:	898a      	ldrh	r2, [r1, #12]
 8002a6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002a6e:	4605      	mov	r5, r0
 8002a70:	0710      	lsls	r0, r2, #28
 8002a72:	460c      	mov	r4, r1
 8002a74:	d458      	bmi.n	8002b28 <__sflush_r+0xc0>
 8002a76:	684b      	ldr	r3, [r1, #4]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	dc05      	bgt.n	8002a88 <__sflush_r+0x20>
 8002a7c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	dc02      	bgt.n	8002a88 <__sflush_r+0x20>
 8002a82:	2000      	movs	r0, #0
 8002a84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002a88:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002a8a:	2e00      	cmp	r6, #0
 8002a8c:	d0f9      	beq.n	8002a82 <__sflush_r+0x1a>
 8002a8e:	2300      	movs	r3, #0
 8002a90:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002a94:	682f      	ldr	r7, [r5, #0]
 8002a96:	602b      	str	r3, [r5, #0]
 8002a98:	d032      	beq.n	8002b00 <__sflush_r+0x98>
 8002a9a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002a9c:	89a3      	ldrh	r3, [r4, #12]
 8002a9e:	075a      	lsls	r2, r3, #29
 8002aa0:	d505      	bpl.n	8002aae <__sflush_r+0x46>
 8002aa2:	6863      	ldr	r3, [r4, #4]
 8002aa4:	1ac0      	subs	r0, r0, r3
 8002aa6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002aa8:	b10b      	cbz	r3, 8002aae <__sflush_r+0x46>
 8002aaa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002aac:	1ac0      	subs	r0, r0, r3
 8002aae:	2300      	movs	r3, #0
 8002ab0:	4602      	mov	r2, r0
 8002ab2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002ab4:	4628      	mov	r0, r5
 8002ab6:	6a21      	ldr	r1, [r4, #32]
 8002ab8:	47b0      	blx	r6
 8002aba:	1c43      	adds	r3, r0, #1
 8002abc:	89a3      	ldrh	r3, [r4, #12]
 8002abe:	d106      	bne.n	8002ace <__sflush_r+0x66>
 8002ac0:	6829      	ldr	r1, [r5, #0]
 8002ac2:	291d      	cmp	r1, #29
 8002ac4:	d82c      	bhi.n	8002b20 <__sflush_r+0xb8>
 8002ac6:	4a2a      	ldr	r2, [pc, #168]	; (8002b70 <__sflush_r+0x108>)
 8002ac8:	40ca      	lsrs	r2, r1
 8002aca:	07d6      	lsls	r6, r2, #31
 8002acc:	d528      	bpl.n	8002b20 <__sflush_r+0xb8>
 8002ace:	2200      	movs	r2, #0
 8002ad0:	6062      	str	r2, [r4, #4]
 8002ad2:	6922      	ldr	r2, [r4, #16]
 8002ad4:	04d9      	lsls	r1, r3, #19
 8002ad6:	6022      	str	r2, [r4, #0]
 8002ad8:	d504      	bpl.n	8002ae4 <__sflush_r+0x7c>
 8002ada:	1c42      	adds	r2, r0, #1
 8002adc:	d101      	bne.n	8002ae2 <__sflush_r+0x7a>
 8002ade:	682b      	ldr	r3, [r5, #0]
 8002ae0:	b903      	cbnz	r3, 8002ae4 <__sflush_r+0x7c>
 8002ae2:	6560      	str	r0, [r4, #84]	; 0x54
 8002ae4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002ae6:	602f      	str	r7, [r5, #0]
 8002ae8:	2900      	cmp	r1, #0
 8002aea:	d0ca      	beq.n	8002a82 <__sflush_r+0x1a>
 8002aec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002af0:	4299      	cmp	r1, r3
 8002af2:	d002      	beq.n	8002afa <__sflush_r+0x92>
 8002af4:	4628      	mov	r0, r5
 8002af6:	f000 f909 	bl	8002d0c <_free_r>
 8002afa:	2000      	movs	r0, #0
 8002afc:	6360      	str	r0, [r4, #52]	; 0x34
 8002afe:	e7c1      	b.n	8002a84 <__sflush_r+0x1c>
 8002b00:	6a21      	ldr	r1, [r4, #32]
 8002b02:	2301      	movs	r3, #1
 8002b04:	4628      	mov	r0, r5
 8002b06:	47b0      	blx	r6
 8002b08:	1c41      	adds	r1, r0, #1
 8002b0a:	d1c7      	bne.n	8002a9c <__sflush_r+0x34>
 8002b0c:	682b      	ldr	r3, [r5, #0]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d0c4      	beq.n	8002a9c <__sflush_r+0x34>
 8002b12:	2b1d      	cmp	r3, #29
 8002b14:	d001      	beq.n	8002b1a <__sflush_r+0xb2>
 8002b16:	2b16      	cmp	r3, #22
 8002b18:	d101      	bne.n	8002b1e <__sflush_r+0xb6>
 8002b1a:	602f      	str	r7, [r5, #0]
 8002b1c:	e7b1      	b.n	8002a82 <__sflush_r+0x1a>
 8002b1e:	89a3      	ldrh	r3, [r4, #12]
 8002b20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b24:	81a3      	strh	r3, [r4, #12]
 8002b26:	e7ad      	b.n	8002a84 <__sflush_r+0x1c>
 8002b28:	690f      	ldr	r7, [r1, #16]
 8002b2a:	2f00      	cmp	r7, #0
 8002b2c:	d0a9      	beq.n	8002a82 <__sflush_r+0x1a>
 8002b2e:	0793      	lsls	r3, r2, #30
 8002b30:	bf18      	it	ne
 8002b32:	2300      	movne	r3, #0
 8002b34:	680e      	ldr	r6, [r1, #0]
 8002b36:	bf08      	it	eq
 8002b38:	694b      	ldreq	r3, [r1, #20]
 8002b3a:	eba6 0807 	sub.w	r8, r6, r7
 8002b3e:	600f      	str	r7, [r1, #0]
 8002b40:	608b      	str	r3, [r1, #8]
 8002b42:	f1b8 0f00 	cmp.w	r8, #0
 8002b46:	dd9c      	ble.n	8002a82 <__sflush_r+0x1a>
 8002b48:	4643      	mov	r3, r8
 8002b4a:	463a      	mov	r2, r7
 8002b4c:	4628      	mov	r0, r5
 8002b4e:	6a21      	ldr	r1, [r4, #32]
 8002b50:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002b52:	47b0      	blx	r6
 8002b54:	2800      	cmp	r0, #0
 8002b56:	dc06      	bgt.n	8002b66 <__sflush_r+0xfe>
 8002b58:	89a3      	ldrh	r3, [r4, #12]
 8002b5a:	f04f 30ff 	mov.w	r0, #4294967295
 8002b5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b62:	81a3      	strh	r3, [r4, #12]
 8002b64:	e78e      	b.n	8002a84 <__sflush_r+0x1c>
 8002b66:	4407      	add	r7, r0
 8002b68:	eba8 0800 	sub.w	r8, r8, r0
 8002b6c:	e7e9      	b.n	8002b42 <__sflush_r+0xda>
 8002b6e:	bf00      	nop
 8002b70:	20400001 	.word	0x20400001

08002b74 <_fflush_r>:
 8002b74:	b538      	push	{r3, r4, r5, lr}
 8002b76:	690b      	ldr	r3, [r1, #16]
 8002b78:	4605      	mov	r5, r0
 8002b7a:	460c      	mov	r4, r1
 8002b7c:	b913      	cbnz	r3, 8002b84 <_fflush_r+0x10>
 8002b7e:	2500      	movs	r5, #0
 8002b80:	4628      	mov	r0, r5
 8002b82:	bd38      	pop	{r3, r4, r5, pc}
 8002b84:	b118      	cbz	r0, 8002b8e <_fflush_r+0x1a>
 8002b86:	6983      	ldr	r3, [r0, #24]
 8002b88:	b90b      	cbnz	r3, 8002b8e <_fflush_r+0x1a>
 8002b8a:	f7ff fa4f 	bl	800202c <__sinit>
 8002b8e:	4b14      	ldr	r3, [pc, #80]	; (8002be0 <_fflush_r+0x6c>)
 8002b90:	429c      	cmp	r4, r3
 8002b92:	d11b      	bne.n	8002bcc <_fflush_r+0x58>
 8002b94:	686c      	ldr	r4, [r5, #4]
 8002b96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d0ef      	beq.n	8002b7e <_fflush_r+0xa>
 8002b9e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002ba0:	07d0      	lsls	r0, r2, #31
 8002ba2:	d404      	bmi.n	8002bae <_fflush_r+0x3a>
 8002ba4:	0599      	lsls	r1, r3, #22
 8002ba6:	d402      	bmi.n	8002bae <_fflush_r+0x3a>
 8002ba8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002baa:	f7ff fadd 	bl	8002168 <__retarget_lock_acquire_recursive>
 8002bae:	4628      	mov	r0, r5
 8002bb0:	4621      	mov	r1, r4
 8002bb2:	f7ff ff59 	bl	8002a68 <__sflush_r>
 8002bb6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002bb8:	4605      	mov	r5, r0
 8002bba:	07da      	lsls	r2, r3, #31
 8002bbc:	d4e0      	bmi.n	8002b80 <_fflush_r+0xc>
 8002bbe:	89a3      	ldrh	r3, [r4, #12]
 8002bc0:	059b      	lsls	r3, r3, #22
 8002bc2:	d4dd      	bmi.n	8002b80 <_fflush_r+0xc>
 8002bc4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002bc6:	f7ff fad0 	bl	800216a <__retarget_lock_release_recursive>
 8002bca:	e7d9      	b.n	8002b80 <_fflush_r+0xc>
 8002bcc:	4b05      	ldr	r3, [pc, #20]	; (8002be4 <_fflush_r+0x70>)
 8002bce:	429c      	cmp	r4, r3
 8002bd0:	d101      	bne.n	8002bd6 <_fflush_r+0x62>
 8002bd2:	68ac      	ldr	r4, [r5, #8]
 8002bd4:	e7df      	b.n	8002b96 <_fflush_r+0x22>
 8002bd6:	4b04      	ldr	r3, [pc, #16]	; (8002be8 <_fflush_r+0x74>)
 8002bd8:	429c      	cmp	r4, r3
 8002bda:	bf08      	it	eq
 8002bdc:	68ec      	ldreq	r4, [r5, #12]
 8002bde:	e7da      	b.n	8002b96 <_fflush_r+0x22>
 8002be0:	08002e88 	.word	0x08002e88
 8002be4:	08002ea8 	.word	0x08002ea8
 8002be8:	08002e68 	.word	0x08002e68

08002bec <_lseek_r>:
 8002bec:	b538      	push	{r3, r4, r5, lr}
 8002bee:	4604      	mov	r4, r0
 8002bf0:	4608      	mov	r0, r1
 8002bf2:	4611      	mov	r1, r2
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	4d05      	ldr	r5, [pc, #20]	; (8002c0c <_lseek_r+0x20>)
 8002bf8:	602a      	str	r2, [r5, #0]
 8002bfa:	461a      	mov	r2, r3
 8002bfc:	f7ff f907 	bl	8001e0e <_lseek>
 8002c00:	1c43      	adds	r3, r0, #1
 8002c02:	d102      	bne.n	8002c0a <_lseek_r+0x1e>
 8002c04:	682b      	ldr	r3, [r5, #0]
 8002c06:	b103      	cbz	r3, 8002c0a <_lseek_r+0x1e>
 8002c08:	6023      	str	r3, [r4, #0]
 8002c0a:	bd38      	pop	{r3, r4, r5, pc}
 8002c0c:	200000a8 	.word	0x200000a8

08002c10 <__swhatbuf_r>:
 8002c10:	b570      	push	{r4, r5, r6, lr}
 8002c12:	460e      	mov	r6, r1
 8002c14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002c18:	4614      	mov	r4, r2
 8002c1a:	2900      	cmp	r1, #0
 8002c1c:	461d      	mov	r5, r3
 8002c1e:	b096      	sub	sp, #88	; 0x58
 8002c20:	da07      	bge.n	8002c32 <__swhatbuf_r+0x22>
 8002c22:	2300      	movs	r3, #0
 8002c24:	602b      	str	r3, [r5, #0]
 8002c26:	89b3      	ldrh	r3, [r6, #12]
 8002c28:	061a      	lsls	r2, r3, #24
 8002c2a:	d410      	bmi.n	8002c4e <__swhatbuf_r+0x3e>
 8002c2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c30:	e00e      	b.n	8002c50 <__swhatbuf_r+0x40>
 8002c32:	466a      	mov	r2, sp
 8002c34:	f000 f8c8 	bl	8002dc8 <_fstat_r>
 8002c38:	2800      	cmp	r0, #0
 8002c3a:	dbf2      	blt.n	8002c22 <__swhatbuf_r+0x12>
 8002c3c:	9a01      	ldr	r2, [sp, #4]
 8002c3e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002c42:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002c46:	425a      	negs	r2, r3
 8002c48:	415a      	adcs	r2, r3
 8002c4a:	602a      	str	r2, [r5, #0]
 8002c4c:	e7ee      	b.n	8002c2c <__swhatbuf_r+0x1c>
 8002c4e:	2340      	movs	r3, #64	; 0x40
 8002c50:	2000      	movs	r0, #0
 8002c52:	6023      	str	r3, [r4, #0]
 8002c54:	b016      	add	sp, #88	; 0x58
 8002c56:	bd70      	pop	{r4, r5, r6, pc}

08002c58 <__smakebuf_r>:
 8002c58:	898b      	ldrh	r3, [r1, #12]
 8002c5a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002c5c:	079d      	lsls	r5, r3, #30
 8002c5e:	4606      	mov	r6, r0
 8002c60:	460c      	mov	r4, r1
 8002c62:	d507      	bpl.n	8002c74 <__smakebuf_r+0x1c>
 8002c64:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002c68:	6023      	str	r3, [r4, #0]
 8002c6a:	6123      	str	r3, [r4, #16]
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	6163      	str	r3, [r4, #20]
 8002c70:	b002      	add	sp, #8
 8002c72:	bd70      	pop	{r4, r5, r6, pc}
 8002c74:	466a      	mov	r2, sp
 8002c76:	ab01      	add	r3, sp, #4
 8002c78:	f7ff ffca 	bl	8002c10 <__swhatbuf_r>
 8002c7c:	9900      	ldr	r1, [sp, #0]
 8002c7e:	4605      	mov	r5, r0
 8002c80:	4630      	mov	r0, r6
 8002c82:	f7ff fa73 	bl	800216c <_malloc_r>
 8002c86:	b948      	cbnz	r0, 8002c9c <__smakebuf_r+0x44>
 8002c88:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002c8c:	059a      	lsls	r2, r3, #22
 8002c8e:	d4ef      	bmi.n	8002c70 <__smakebuf_r+0x18>
 8002c90:	f023 0303 	bic.w	r3, r3, #3
 8002c94:	f043 0302 	orr.w	r3, r3, #2
 8002c98:	81a3      	strh	r3, [r4, #12]
 8002c9a:	e7e3      	b.n	8002c64 <__smakebuf_r+0xc>
 8002c9c:	4b0d      	ldr	r3, [pc, #52]	; (8002cd4 <__smakebuf_r+0x7c>)
 8002c9e:	62b3      	str	r3, [r6, #40]	; 0x28
 8002ca0:	89a3      	ldrh	r3, [r4, #12]
 8002ca2:	6020      	str	r0, [r4, #0]
 8002ca4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ca8:	81a3      	strh	r3, [r4, #12]
 8002caa:	9b00      	ldr	r3, [sp, #0]
 8002cac:	6120      	str	r0, [r4, #16]
 8002cae:	6163      	str	r3, [r4, #20]
 8002cb0:	9b01      	ldr	r3, [sp, #4]
 8002cb2:	b15b      	cbz	r3, 8002ccc <__smakebuf_r+0x74>
 8002cb4:	4630      	mov	r0, r6
 8002cb6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002cba:	f000 f897 	bl	8002dec <_isatty_r>
 8002cbe:	b128      	cbz	r0, 8002ccc <__smakebuf_r+0x74>
 8002cc0:	89a3      	ldrh	r3, [r4, #12]
 8002cc2:	f023 0303 	bic.w	r3, r3, #3
 8002cc6:	f043 0301 	orr.w	r3, r3, #1
 8002cca:	81a3      	strh	r3, [r4, #12]
 8002ccc:	89a0      	ldrh	r0, [r4, #12]
 8002cce:	4305      	orrs	r5, r0
 8002cd0:	81a5      	strh	r5, [r4, #12]
 8002cd2:	e7cd      	b.n	8002c70 <__smakebuf_r+0x18>
 8002cd4:	08001fc5 	.word	0x08001fc5

08002cd8 <memchr>:
 8002cd8:	4603      	mov	r3, r0
 8002cda:	b510      	push	{r4, lr}
 8002cdc:	b2c9      	uxtb	r1, r1
 8002cde:	4402      	add	r2, r0
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	d101      	bne.n	8002cea <memchr+0x12>
 8002ce6:	2000      	movs	r0, #0
 8002ce8:	e003      	b.n	8002cf2 <memchr+0x1a>
 8002cea:	7804      	ldrb	r4, [r0, #0]
 8002cec:	3301      	adds	r3, #1
 8002cee:	428c      	cmp	r4, r1
 8002cf0:	d1f6      	bne.n	8002ce0 <memchr+0x8>
 8002cf2:	bd10      	pop	{r4, pc}

08002cf4 <__malloc_lock>:
 8002cf4:	4801      	ldr	r0, [pc, #4]	; (8002cfc <__malloc_lock+0x8>)
 8002cf6:	f7ff ba37 	b.w	8002168 <__retarget_lock_acquire_recursive>
 8002cfa:	bf00      	nop
 8002cfc:	200000a0 	.word	0x200000a0

08002d00 <__malloc_unlock>:
 8002d00:	4801      	ldr	r0, [pc, #4]	; (8002d08 <__malloc_unlock+0x8>)
 8002d02:	f7ff ba32 	b.w	800216a <__retarget_lock_release_recursive>
 8002d06:	bf00      	nop
 8002d08:	200000a0 	.word	0x200000a0

08002d0c <_free_r>:
 8002d0c:	b538      	push	{r3, r4, r5, lr}
 8002d0e:	4605      	mov	r5, r0
 8002d10:	2900      	cmp	r1, #0
 8002d12:	d043      	beq.n	8002d9c <_free_r+0x90>
 8002d14:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002d18:	1f0c      	subs	r4, r1, #4
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	bfb8      	it	lt
 8002d1e:	18e4      	addlt	r4, r4, r3
 8002d20:	f7ff ffe8 	bl	8002cf4 <__malloc_lock>
 8002d24:	4a1e      	ldr	r2, [pc, #120]	; (8002da0 <_free_r+0x94>)
 8002d26:	6813      	ldr	r3, [r2, #0]
 8002d28:	4610      	mov	r0, r2
 8002d2a:	b933      	cbnz	r3, 8002d3a <_free_r+0x2e>
 8002d2c:	6063      	str	r3, [r4, #4]
 8002d2e:	6014      	str	r4, [r2, #0]
 8002d30:	4628      	mov	r0, r5
 8002d32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002d36:	f7ff bfe3 	b.w	8002d00 <__malloc_unlock>
 8002d3a:	42a3      	cmp	r3, r4
 8002d3c:	d90a      	bls.n	8002d54 <_free_r+0x48>
 8002d3e:	6821      	ldr	r1, [r4, #0]
 8002d40:	1862      	adds	r2, r4, r1
 8002d42:	4293      	cmp	r3, r2
 8002d44:	bf01      	itttt	eq
 8002d46:	681a      	ldreq	r2, [r3, #0]
 8002d48:	685b      	ldreq	r3, [r3, #4]
 8002d4a:	1852      	addeq	r2, r2, r1
 8002d4c:	6022      	streq	r2, [r4, #0]
 8002d4e:	6063      	str	r3, [r4, #4]
 8002d50:	6004      	str	r4, [r0, #0]
 8002d52:	e7ed      	b.n	8002d30 <_free_r+0x24>
 8002d54:	461a      	mov	r2, r3
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	b10b      	cbz	r3, 8002d5e <_free_r+0x52>
 8002d5a:	42a3      	cmp	r3, r4
 8002d5c:	d9fa      	bls.n	8002d54 <_free_r+0x48>
 8002d5e:	6811      	ldr	r1, [r2, #0]
 8002d60:	1850      	adds	r0, r2, r1
 8002d62:	42a0      	cmp	r0, r4
 8002d64:	d10b      	bne.n	8002d7e <_free_r+0x72>
 8002d66:	6820      	ldr	r0, [r4, #0]
 8002d68:	4401      	add	r1, r0
 8002d6a:	1850      	adds	r0, r2, r1
 8002d6c:	4283      	cmp	r3, r0
 8002d6e:	6011      	str	r1, [r2, #0]
 8002d70:	d1de      	bne.n	8002d30 <_free_r+0x24>
 8002d72:	6818      	ldr	r0, [r3, #0]
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	4401      	add	r1, r0
 8002d78:	6011      	str	r1, [r2, #0]
 8002d7a:	6053      	str	r3, [r2, #4]
 8002d7c:	e7d8      	b.n	8002d30 <_free_r+0x24>
 8002d7e:	d902      	bls.n	8002d86 <_free_r+0x7a>
 8002d80:	230c      	movs	r3, #12
 8002d82:	602b      	str	r3, [r5, #0]
 8002d84:	e7d4      	b.n	8002d30 <_free_r+0x24>
 8002d86:	6820      	ldr	r0, [r4, #0]
 8002d88:	1821      	adds	r1, r4, r0
 8002d8a:	428b      	cmp	r3, r1
 8002d8c:	bf01      	itttt	eq
 8002d8e:	6819      	ldreq	r1, [r3, #0]
 8002d90:	685b      	ldreq	r3, [r3, #4]
 8002d92:	1809      	addeq	r1, r1, r0
 8002d94:	6021      	streq	r1, [r4, #0]
 8002d96:	6063      	str	r3, [r4, #4]
 8002d98:	6054      	str	r4, [r2, #4]
 8002d9a:	e7c9      	b.n	8002d30 <_free_r+0x24>
 8002d9c:	bd38      	pop	{r3, r4, r5, pc}
 8002d9e:	bf00      	nop
 8002da0:	20000088 	.word	0x20000088

08002da4 <_read_r>:
 8002da4:	b538      	push	{r3, r4, r5, lr}
 8002da6:	4604      	mov	r4, r0
 8002da8:	4608      	mov	r0, r1
 8002daa:	4611      	mov	r1, r2
 8002dac:	2200      	movs	r2, #0
 8002dae:	4d05      	ldr	r5, [pc, #20]	; (8002dc4 <_read_r+0x20>)
 8002db0:	602a      	str	r2, [r5, #0]
 8002db2:	461a      	mov	r2, r3
 8002db4:	f7fe ffce 	bl	8001d54 <_read>
 8002db8:	1c43      	adds	r3, r0, #1
 8002dba:	d102      	bne.n	8002dc2 <_read_r+0x1e>
 8002dbc:	682b      	ldr	r3, [r5, #0]
 8002dbe:	b103      	cbz	r3, 8002dc2 <_read_r+0x1e>
 8002dc0:	6023      	str	r3, [r4, #0]
 8002dc2:	bd38      	pop	{r3, r4, r5, pc}
 8002dc4:	200000a8 	.word	0x200000a8

08002dc8 <_fstat_r>:
 8002dc8:	b538      	push	{r3, r4, r5, lr}
 8002dca:	2300      	movs	r3, #0
 8002dcc:	4d06      	ldr	r5, [pc, #24]	; (8002de8 <_fstat_r+0x20>)
 8002dce:	4604      	mov	r4, r0
 8002dd0:	4608      	mov	r0, r1
 8002dd2:	4611      	mov	r1, r2
 8002dd4:	602b      	str	r3, [r5, #0]
 8002dd6:	f7ff f801 	bl	8001ddc <_fstat>
 8002dda:	1c43      	adds	r3, r0, #1
 8002ddc:	d102      	bne.n	8002de4 <_fstat_r+0x1c>
 8002dde:	682b      	ldr	r3, [r5, #0]
 8002de0:	b103      	cbz	r3, 8002de4 <_fstat_r+0x1c>
 8002de2:	6023      	str	r3, [r4, #0]
 8002de4:	bd38      	pop	{r3, r4, r5, pc}
 8002de6:	bf00      	nop
 8002de8:	200000a8 	.word	0x200000a8

08002dec <_isatty_r>:
 8002dec:	b538      	push	{r3, r4, r5, lr}
 8002dee:	2300      	movs	r3, #0
 8002df0:	4d05      	ldr	r5, [pc, #20]	; (8002e08 <_isatty_r+0x1c>)
 8002df2:	4604      	mov	r4, r0
 8002df4:	4608      	mov	r0, r1
 8002df6:	602b      	str	r3, [r5, #0]
 8002df8:	f7fe ffff 	bl	8001dfa <_isatty>
 8002dfc:	1c43      	adds	r3, r0, #1
 8002dfe:	d102      	bne.n	8002e06 <_isatty_r+0x1a>
 8002e00:	682b      	ldr	r3, [r5, #0]
 8002e02:	b103      	cbz	r3, 8002e06 <_isatty_r+0x1a>
 8002e04:	6023      	str	r3, [r4, #0]
 8002e06:	bd38      	pop	{r3, r4, r5, pc}
 8002e08:	200000a8 	.word	0x200000a8

08002e0c <_init>:
 8002e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e0e:	bf00      	nop
 8002e10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e12:	bc08      	pop	{r3}
 8002e14:	469e      	mov	lr, r3
 8002e16:	4770      	bx	lr

08002e18 <_fini>:
 8002e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e1a:	bf00      	nop
 8002e1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e1e:	bc08      	pop	{r3}
 8002e20:	469e      	mov	lr, r3
 8002e22:	4770      	bx	lr
