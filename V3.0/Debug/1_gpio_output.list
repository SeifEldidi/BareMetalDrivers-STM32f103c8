
1_gpio_output.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000035f8  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  08003728  08003728  00013728  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080037fc  080037fc  0002009c  2**0
                  CONTENTS
  4 .ARM          00000000  080037fc  080037fc  0002009c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080037fc  080037fc  0002009c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080037fc  080037fc  000137fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003800  08003800  00013800  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000009c  20000000  08003804  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000068  2000009c  080038a0  0002009c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000104  080038a0  00020104  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000051ac  00000000  00000000  000200c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000012ba  00000000  00000000  00025271  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000338  00000000  00000000  00026530  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000002b0  00000000  00000000  00026868  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013169  00000000  00000000  00026b18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000446f  00000000  00000000  00039c81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005d80d  00000000  00000000  0003e0f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0009b8fd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000137c  00000000  00000000  0009b950  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	2000009c 	.word	0x2000009c
 800014c:	00000000 	.word	0x00000000
 8000150:	08003710 	.word	0x08003710

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	200000a0 	.word	0x200000a0
 800016c:	08003710 	.word	0x08003710

08000170 <SYSTICK_INIT>:
#if SYSTICK_INTERRUPT_EN == EN
void (*SYS_CALLBACK_)(void) =NULL;
#endif

void SYSTICK_INIT(void (*SYS_CALLBACK)(void),int32_t Base_Delay_Us)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	b084      	sub	sp, #16
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
 8000178:	6039      	str	r1, [r7, #0]
	int32_t LOAD_VAL;
	/*Simple Function to calculate SYSCLK*/
	switch ((RCC->CFGR & (0x00000003 << RCC_SL_SWS_POS)) >> RCC_SL_SWS_POS) {
 800017a:	4b1e      	ldr	r3, [pc, #120]	; (80001f4 <SYSTICK_INIT+0x84>)
 800017c:	685b      	ldr	r3, [r3, #4]
 800017e:	089b      	lsrs	r3, r3, #2
 8000180:	f003 0303 	and.w	r3, r3, #3
 8000184:	2b01      	cmp	r3, #1
 8000186:	d902      	bls.n	800018e <SYSTICK_INIT+0x1e>
 8000188:	2b02      	cmp	r3, #2
 800018a:	d004      	beq.n	8000196 <SYSTICK_INIT+0x26>
 800018c:	e009      	b.n	80001a2 <SYSTICK_INIT+0x32>
		case 0x00000000UL:/*----HSI----*/
		case 0x00000001UL:/*---HSR----*/
			SYS_CLK = 8000000UL;
 800018e:	4b1a      	ldr	r3, [pc, #104]	; (80001f8 <SYSTICK_INIT+0x88>)
 8000190:	4a1a      	ldr	r2, [pc, #104]	; (80001fc <SYSTICK_INIT+0x8c>)
 8000192:	601a      	str	r2, [r3, #0]
			break;
 8000194:	e005      	b.n	80001a2 <SYSTICK_INIT+0x32>
		case 0x00000002UL:/*---PLL----*/
			SYS_CLK = PLL_CLK_CALC();
 8000196:	f001 fe77 	bl	8001e88 <PLL_CLK_CALC>
 800019a:	4603      	mov	r3, r0
 800019c:	4a16      	ldr	r2, [pc, #88]	; (80001f8 <SYSTICK_INIT+0x88>)
 800019e:	6013      	str	r3, [r2, #0]
			break;
 80001a0:	bf00      	nop
	}
#if SYSTICK_INTERRUPT_EN == EN
	SYS_CALLBACK_=SYS_CALLBACK;
 80001a2:	4a17      	ldr	r2, [pc, #92]	; (8000200 <SYSTICK_INIT+0x90>)
 80001a4:	687b      	ldr	r3, [r7, #4]
 80001a6:	6013      	str	r3, [r2, #0]
	LOAD_VAL = (Base_Delay_Us*((SYS_CLK)/(1000000)));
 80001a8:	4b13      	ldr	r3, [pc, #76]	; (80001f8 <SYSTICK_INIT+0x88>)
 80001aa:	681b      	ldr	r3, [r3, #0]
 80001ac:	4a15      	ldr	r2, [pc, #84]	; (8000204 <SYSTICK_INIT+0x94>)
 80001ae:	fba2 2303 	umull	r2, r3, r2, r3
 80001b2:	0c9b      	lsrs	r3, r3, #18
 80001b4:	683a      	ldr	r2, [r7, #0]
 80001b6:	fb02 f303 	mul.w	r3, r2, r3
 80001ba:	60fb      	str	r3, [r7, #12]
	if(LOAD_VAL > SYSTICK_MAX_VAL)
 80001bc:	68fb      	ldr	r3, [r7, #12]
 80001be:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80001c2:	d306      	bcc.n	80001d2 <SYSTICK_INIT+0x62>
		LOAD_VAL = ((SYS_CLK)/1000);
 80001c4:	4b0c      	ldr	r3, [pc, #48]	; (80001f8 <SYSTICK_INIT+0x88>)
 80001c6:	681b      	ldr	r3, [r3, #0]
 80001c8:	4a0f      	ldr	r2, [pc, #60]	; (8000208 <SYSTICK_INIT+0x98>)
 80001ca:	fba2 2303 	umull	r2, r3, r2, r3
 80001ce:	099b      	lsrs	r3, r3, #6
 80001d0:	60fb      	str	r3, [r7, #12]
	SYSTICK->RVR = LOAD_VAL; /*---Reload---*/
 80001d2:	4a0e      	ldr	r2, [pc, #56]	; (800020c <SYSTICK_INIT+0x9c>)
 80001d4:	68fb      	ldr	r3, [r7, #12]
 80001d6:	6053      	str	r3, [r2, #4]
	SYSTICK->CVR = SYSTICK_CLEAR_VAL; /*----Clear Current---*/
 80001d8:	4b0c      	ldr	r3, [pc, #48]	; (800020c <SYSTICK_INIT+0x9c>)
 80001da:	2200      	movs	r2, #0
 80001dc:	609a      	str	r2, [r3, #8]
	SYSTICK->CSR  |= SYSTICK_CNT_EN |SYSTICK_CLKSRC_PROC |SYSTICK_INT_EN;  /*------Enable ------*/
 80001de:	4b0b      	ldr	r3, [pc, #44]	; (800020c <SYSTICK_INIT+0x9c>)
 80001e0:	681b      	ldr	r3, [r3, #0]
 80001e2:	4a0a      	ldr	r2, [pc, #40]	; (800020c <SYSTICK_INIT+0x9c>)
 80001e4:	f043 0307 	orr.w	r3, r3, #7
 80001e8:	6013      	str	r3, [r2, #0]
#endif
}
 80001ea:	bf00      	nop
 80001ec:	3710      	adds	r7, #16
 80001ee:	46bd      	mov	sp, r7
 80001f0:	bd80      	pop	{r7, pc}
 80001f2:	bf00      	nop
 80001f4:	40021000 	.word	0x40021000
 80001f8:	200000e4 	.word	0x200000e4
 80001fc:	007a1200 	.word	0x007a1200
 8000200:	200000b8 	.word	0x200000b8
 8000204:	431bde83 	.word	0x431bde83
 8000208:	10624dd3 	.word	0x10624dd3
 800020c:	e000e010 	.word	0xe000e010

08000210 <SysTick_Handler>:
	return SYSTICK->CVR;
}

#if SYSTICK_INTERRUPT_EN == EN
void SysTick_Handler(void)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	af00      	add	r7, sp, #0
	if(SYS_CALLBACK_)
 8000214:	4b04      	ldr	r3, [pc, #16]	; (8000228 <SysTick_Handler+0x18>)
 8000216:	681b      	ldr	r3, [r3, #0]
 8000218:	2b00      	cmp	r3, #0
 800021a:	d002      	beq.n	8000222 <SysTick_Handler+0x12>
		SYS_CALLBACK_();
 800021c:	4b02      	ldr	r3, [pc, #8]	; (8000228 <SysTick_Handler+0x18>)
 800021e:	681b      	ldr	r3, [r3, #0]
 8000220:	4798      	blx	r3
}
 8000222:	bf00      	nop
 8000224:	bd80      	pop	{r7, pc}
 8000226:	bf00      	nop
 8000228:	200000b8 	.word	0x200000b8

0800022c <HAL_EDGE_INT_init>:
	static void (*ADC_CALLBACK_)(void)= NULL;
#endif


static void HAL_EDGE_INT_init(ADC_init_t *ADC)
{
 800022c:	b480      	push	{r7}
 800022e:	b083      	sub	sp, #12
 8000230:	af00      	add	r7, sp, #0
 8000232:	6078      	str	r0, [r7, #4]
	ADC->Init.Instance->CR1 |= (1<<5);
	NVIC_EnableIRQ(ADC1_2_IRQn);
	ADC_CALLBACK_=ADC->ADC_Callback;
	__enable_irq();
#endif
}
 8000234:	bf00      	nop
 8000236:	370c      	adds	r7, #12
 8000238:	46bd      	mov	sp, r7
 800023a:	bc80      	pop	{r7}
 800023c:	4770      	bx	lr
	...

08000240 <HAL_ADC_Init>:

void HAL_ADC_Init(ADC_init_t *ADC)
{
 8000240:	b580      	push	{r7, lr}
 8000242:	b082      	sub	sp, #8
 8000244:	af00      	add	r7, sp, #0
 8000246:	6078      	str	r0, [r7, #4]
	if(ADC != NULL)
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	2b00      	cmp	r3, #0
 800024c:	d03c      	beq.n	80002c8 <HAL_ADC_Init+0x88>
	{
		switch(ADC->ADC_Mode)
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	681b      	ldr	r3, [r3, #0]
 8000252:	2b03      	cmp	r3, #3
 8000254:	d838      	bhi.n	80002c8 <HAL_ADC_Init+0x88>
 8000256:	a201      	add	r2, pc, #4	; (adr r2, 800025c <HAL_ADC_Init+0x1c>)
 8000258:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800025c:	0800026d 	.word	0x0800026d
 8000260:	08000289 	.word	0x08000289
 8000264:	080002b9 	.word	0x080002b9
 8000268:	080002c7 	.word	0x080002c7
		{
			case HAL_ADC_SCHN_SN_CONV:
				HAL_SHN_Init(&ADC->Init);
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	3398      	adds	r3, #152	; 0x98
 8000270:	4618      	mov	r0, r3
 8000272:	f000 fcbb 	bl	8000bec <HAL_SHN_Init>
				ADC->Init.Sample_Time=ADC->Sample_Time[0];
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	689a      	ldr	r2, [r3, #8]
 800027a:	687b      	ldr	r3, [r7, #4]
 800027c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
				HAL_EDGE_INT_init(ADC);
 8000280:	6878      	ldr	r0, [r7, #4]
 8000282:	f7ff ffd3 	bl	800022c <HAL_EDGE_INT_init>
				break;
 8000286:	e01f      	b.n	80002c8 <HAL_ADC_Init+0x88>
			case HAL_ADC_SCHN_AUTO_CONV:
				ADC->Init.Sample_Time=ADC->Sample_Time[0];
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	689a      	ldr	r2, [r3, #8]
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
				HAL_SHN_Init(&ADC->Init);
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	3398      	adds	r3, #152	; 0x98
 8000296:	4618      	mov	r0, r3
 8000298:	f000 fca8 	bl	8000bec <HAL_SHN_Init>
				ADC->Init.Instance->CR2 |= CONTINOUS_CONV;
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80002a2:	689a      	ldr	r2, [r3, #8]
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80002aa:	f042 0202 	orr.w	r2, r2, #2
 80002ae:	609a      	str	r2, [r3, #8]
				HAL_EDGE_INT_init(ADC);
 80002b0:	6878      	ldr	r0, [r7, #4]
 80002b2:	f7ff ffbb 	bl	800022c <HAL_EDGE_INT_init>
				break;
 80002b6:	e007      	b.n	80002c8 <HAL_ADC_Init+0x88>
			case HAL_ADC_MCHN_SN_CONV:
				HAL_MULT_SING_Init(ADC);
 80002b8:	6878      	ldr	r0, [r7, #4]
 80002ba:	f000 fce1 	bl	8000c80 <HAL_MULT_SING_Init>
				HAL_EDGE_INT_init(ADC);
 80002be:	6878      	ldr	r0, [r7, #4]
 80002c0:	f7ff ffb4 	bl	800022c <HAL_EDGE_INT_init>
				break;
 80002c4:	e000      	b.n	80002c8 <HAL_ADC_Init+0x88>
			case HAL_ADC_MCHN_AUTO_CONV:

				break;
 80002c6:	bf00      	nop
		}
	}else{

	}
}
 80002c8:	bf00      	nop
 80002ca:	3708      	adds	r7, #8
 80002cc:	46bd      	mov	sp, r7
 80002ce:	bd80      	pop	{r7, pc}

080002d0 <HAL_ADC_WTD_EN>:

static void HAL_ADC_WTD_EN(ADC_CH_t *Channel,uint32_t Channel_NO)
{
 80002d0:	b480      	push	{r7}
 80002d2:	b083      	sub	sp, #12
 80002d4:	af00      	add	r7, sp, #0
 80002d6:	6078      	str	r0, [r7, #4]
 80002d8:	6039      	str	r1, [r7, #0]
	switch (Channel->Watchdog_EN) {
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	68db      	ldr	r3, [r3, #12]
 80002de:	2b00      	cmp	r3, #0
 80002e0:	d002      	beq.n	80002e8 <HAL_ADC_WTD_EN+0x18>
 80002e2:	2b01      	cmp	r3, #1
 80002e4:	d01b      	beq.n	800031e <HAL_ADC_WTD_EN+0x4e>
			break;
		case HAL_WATCHDOG_DISABLE:
			Channel->Instance->CR1 &= AWDEN_DIS_MSK;
			break;
		default:
			break;
 80002e6:	e023      	b.n	8000330 <HAL_ADC_WTD_EN+0x60>
			Channel->Instance->CR1 |= AWDEN_EN_MSK;
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	685a      	ldr	r2, [r3, #4]
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	681b      	ldr	r3, [r3, #0]
 80002f2:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80002f6:	605a      	str	r2, [r3, #4]
			Channel->Instance->CR1 |= Channel_NO;
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	6859      	ldr	r1, [r3, #4]
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	681b      	ldr	r3, [r3, #0]
 8000302:	683a      	ldr	r2, [r7, #0]
 8000304:	430a      	orrs	r2, r1
 8000306:	605a      	str	r2, [r3, #4]
			Channel->Instance->HTR =Channel->Watchog_High;
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	687a      	ldr	r2, [r7, #4]
 800030e:	6912      	ldr	r2, [r2, #16]
 8000310:	625a      	str	r2, [r3, #36]	; 0x24
			Channel->Instance->LTR =Channel->Watchdog_LOW;
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	681b      	ldr	r3, [r3, #0]
 8000316:	687a      	ldr	r2, [r7, #4]
 8000318:	6952      	ldr	r2, [r2, #20]
 800031a:	629a      	str	r2, [r3, #40]	; 0x28
			break;
 800031c:	e008      	b.n	8000330 <HAL_ADC_WTD_EN+0x60>
			Channel->Instance->CR1 &= AWDEN_DIS_MSK;
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	681b      	ldr	r3, [r3, #0]
 8000322:	685a      	ldr	r2, [r3, #4]
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	681b      	ldr	r3, [r3, #0]
 8000328:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800032c:	605a      	str	r2, [r3, #4]
			break;
 800032e:	bf00      	nop
	}
}
 8000330:	bf00      	nop
 8000332:	370c      	adds	r7, #12
 8000334:	46bd      	mov	sp, r7
 8000336:	bc80      	pop	{r7}
 8000338:	4770      	bx	lr
	...

0800033c <HAL_ADC_CHN_SET>:

static void HAL_ADC_CHN_SET(ADC_CH_t *Channel) {
 800033c:	b580      	push	{r7, lr}
 800033e:	b08a      	sub	sp, #40	; 0x28
 8000340:	af00      	add	r7, sp, #0
 8000342:	6078      	str	r0, [r7, #4]
	GPIO_t GPIO_IN;
	GPIO_IN.Mode=HAL_GPIO_IN_AN;
 8000344:	2306      	movs	r3, #6
 8000346:	60fb      	str	r3, [r7, #12]

	switch (Channel->Channel_NO) {
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	685b      	ldr	r3, [r3, #4]
 800034c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000350:	f000 81c1 	beq.w	80006d6 <HAL_ADC_CHN_SET+0x39a>
 8000354:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000358:	f200 81cc 	bhi.w	80006f4 <HAL_ADC_CHN_SET+0x3b8>
 800035c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000360:	f000 81aa 	beq.w	80006b8 <HAL_ADC_CHN_SET+0x37c>
 8000364:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000368:	f200 81c4 	bhi.w	80006f4 <HAL_ADC_CHN_SET+0x3b8>
 800036c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000370:	f000 8193 	beq.w	800069a <HAL_ADC_CHN_SET+0x35e>
 8000374:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000378:	f200 81bc 	bhi.w	80006f4 <HAL_ADC_CHN_SET+0x3b8>
 800037c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000380:	f000 817c 	beq.w	800067c <HAL_ADC_CHN_SET+0x340>
 8000384:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000388:	f200 81b4 	bhi.w	80006f4 <HAL_ADC_CHN_SET+0x3b8>
 800038c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000390:	f000 8165 	beq.w	800065e <HAL_ADC_CHN_SET+0x322>
 8000394:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000398:	f200 81ac 	bhi.w	80006f4 <HAL_ADC_CHN_SET+0x3b8>
 800039c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80003a0:	f000 814f 	beq.w	8000642 <HAL_ADC_CHN_SET+0x306>
 80003a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80003a8:	f200 81a4 	bhi.w	80006f4 <HAL_ADC_CHN_SET+0x3b8>
 80003ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80003b0:	f000 8130 	beq.w	8000614 <HAL_ADC_CHN_SET+0x2d8>
 80003b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80003b8:	f200 819c 	bhi.w	80006f4 <HAL_ADC_CHN_SET+0x3b8>
 80003bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80003c0:	f000 8111 	beq.w	80005e6 <HAL_ADC_CHN_SET+0x2aa>
 80003c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80003c8:	f200 8194 	bhi.w	80006f4 <HAL_ADC_CHN_SET+0x3b8>
 80003cc:	2b80      	cmp	r3, #128	; 0x80
 80003ce:	f000 80f3 	beq.w	80005b8 <HAL_ADC_CHN_SET+0x27c>
 80003d2:	2b80      	cmp	r3, #128	; 0x80
 80003d4:	f200 818e 	bhi.w	80006f4 <HAL_ADC_CHN_SET+0x3b8>
 80003d8:	2b20      	cmp	r3, #32
 80003da:	d849      	bhi.n	8000470 <HAL_ADC_CHN_SET+0x134>
 80003dc:	2b00      	cmp	r3, #0
 80003de:	f000 8189 	beq.w	80006f4 <HAL_ADC_CHN_SET+0x3b8>
 80003e2:	3b01      	subs	r3, #1
 80003e4:	2b1f      	cmp	r3, #31
 80003e6:	f200 8185 	bhi.w	80006f4 <HAL_ADC_CHN_SET+0x3b8>
 80003ea:	a201      	add	r2, pc, #4	; (adr r2, 80003f0 <HAL_ADC_CHN_SET+0xb4>)
 80003ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003f0:	08000479 	.word	0x08000479
 80003f4:	080004a5 	.word	0x080004a5
 80003f8:	080006f5 	.word	0x080006f5
 80003fc:	080004d3 	.word	0x080004d3
 8000400:	080006f5 	.word	0x080006f5
 8000404:	080006f5 	.word	0x080006f5
 8000408:	080006f5 	.word	0x080006f5
 800040c:	08000501 	.word	0x08000501
 8000410:	080006f5 	.word	0x080006f5
 8000414:	080006f5 	.word	0x080006f5
 8000418:	080006f5 	.word	0x080006f5
 800041c:	080006f5 	.word	0x080006f5
 8000420:	080006f5 	.word	0x080006f5
 8000424:	080006f5 	.word	0x080006f5
 8000428:	080006f5 	.word	0x080006f5
 800042c:	0800052f 	.word	0x0800052f
 8000430:	080006f5 	.word	0x080006f5
 8000434:	080006f5 	.word	0x080006f5
 8000438:	080006f5 	.word	0x080006f5
 800043c:	080006f5 	.word	0x080006f5
 8000440:	080006f5 	.word	0x080006f5
 8000444:	080006f5 	.word	0x080006f5
 8000448:	080006f5 	.word	0x080006f5
 800044c:	080006f5 	.word	0x080006f5
 8000450:	080006f5 	.word	0x080006f5
 8000454:	080006f5 	.word	0x080006f5
 8000458:	080006f5 	.word	0x080006f5
 800045c:	080006f5 	.word	0x080006f5
 8000460:	080006f5 	.word	0x080006f5
 8000464:	080006f5 	.word	0x080006f5
 8000468:	080006f5 	.word	0x080006f5
 800046c:	0800055d 	.word	0x0800055d
 8000470:	2b40      	cmp	r3, #64	; 0x40
 8000472:	f000 808a 	beq.w	800058a <HAL_ADC_CHN_SET+0x24e>
			HAL_ADC_WTD_EN(Channel, AWDCH_CHN_15);
			Channel->Instance->SQR3  = AWDCH_CHN_15;
			Channel->Instance->SMPR1 = (Channel->Sample_Time<<15);
			break;
	}
}
 8000476:	e13d      	b.n	80006f4 <HAL_ADC_CHN_SET+0x3b8>
			HAL_ADC_WTD_EN(Channel, AWDCH_CHN_0);
 8000478:	2100      	movs	r1, #0
 800047a:	6878      	ldr	r0, [r7, #4]
 800047c:	f7ff ff28 	bl	80002d0 <HAL_ADC_WTD_EN>
			Channel->Instance->SQR3 = AWDCH_CHN_0;
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	2200      	movs	r2, #0
 8000486:	635a      	str	r2, [r3, #52]	; 0x34
			Channel->Instance->SMPR2 = (Channel->Sample_Time<<0);
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	687a      	ldr	r2, [r7, #4]
 800048e:	6992      	ldr	r2, [r2, #24]
 8000490:	611a      	str	r2, [r3, #16]
			GPIO_IN.PIN = GPIO_PIN_0;
 8000492:	2300      	movs	r3, #0
 8000494:	617b      	str	r3, [r7, #20]
			HAL_Init_PIN(GPIOA,&GPIO_IN);
 8000496:	f107 030c 	add.w	r3, r7, #12
 800049a:	4619      	mov	r1, r3
 800049c:	4897      	ldr	r0, [pc, #604]	; (80006fc <HAL_ADC_CHN_SET+0x3c0>)
 800049e:	f000 fd89 	bl	8000fb4 <HAL_Init_PIN>
			break;
 80004a2:	e127      	b.n	80006f4 <HAL_ADC_CHN_SET+0x3b8>
			HAL_ADC_WTD_EN(Channel, AWDCH_CHN_1);
 80004a4:	2101      	movs	r1, #1
 80004a6:	6878      	ldr	r0, [r7, #4]
 80004a8:	f7ff ff12 	bl	80002d0 <HAL_ADC_WTD_EN>
			Channel->Instance->SQR3 = AWDCH_CHN_1;
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	2201      	movs	r2, #1
 80004b2:	635a      	str	r2, [r3, #52]	; 0x34
			Channel->Instance->SMPR2 = (Channel->Sample_Time<<3);
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	699a      	ldr	r2, [r3, #24]
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	00d2      	lsls	r2, r2, #3
 80004be:	611a      	str	r2, [r3, #16]
			GPIO_IN.PIN = GPIO_PIN_1;
 80004c0:	2301      	movs	r3, #1
 80004c2:	617b      	str	r3, [r7, #20]
			HAL_Init_PIN(GPIOA,&GPIO_IN);
 80004c4:	f107 030c 	add.w	r3, r7, #12
 80004c8:	4619      	mov	r1, r3
 80004ca:	488c      	ldr	r0, [pc, #560]	; (80006fc <HAL_ADC_CHN_SET+0x3c0>)
 80004cc:	f000 fd72 	bl	8000fb4 <HAL_Init_PIN>
			break;
 80004d0:	e110      	b.n	80006f4 <HAL_ADC_CHN_SET+0x3b8>
			HAL_ADC_WTD_EN(Channel, AWDCH_CHN_2);
 80004d2:	2102      	movs	r1, #2
 80004d4:	6878      	ldr	r0, [r7, #4]
 80004d6:	f7ff fefb 	bl	80002d0 <HAL_ADC_WTD_EN>
			Channel->Instance->SQR3 = AWDCH_CHN_2;
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	2202      	movs	r2, #2
 80004e0:	635a      	str	r2, [r3, #52]	; 0x34
			Channel->Instance->SMPR2 = (Channel->Sample_Time<<6);
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	699a      	ldr	r2, [r3, #24]
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	0192      	lsls	r2, r2, #6
 80004ec:	611a      	str	r2, [r3, #16]
			GPIO_IN.PIN = GPIO_PIN_2;
 80004ee:	2302      	movs	r3, #2
 80004f0:	617b      	str	r3, [r7, #20]
			HAL_Init_PIN(GPIOA,&GPIO_IN);
 80004f2:	f107 030c 	add.w	r3, r7, #12
 80004f6:	4619      	mov	r1, r3
 80004f8:	4880      	ldr	r0, [pc, #512]	; (80006fc <HAL_ADC_CHN_SET+0x3c0>)
 80004fa:	f000 fd5b 	bl	8000fb4 <HAL_Init_PIN>
			break;
 80004fe:	e0f9      	b.n	80006f4 <HAL_ADC_CHN_SET+0x3b8>
			HAL_ADC_WTD_EN(Channel, AWDCH_CHN_3);
 8000500:	2103      	movs	r1, #3
 8000502:	6878      	ldr	r0, [r7, #4]
 8000504:	f7ff fee4 	bl	80002d0 <HAL_ADC_WTD_EN>
			Channel->Instance->SQR3 = AWDCH_CHN_3;
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	2203      	movs	r2, #3
 800050e:	635a      	str	r2, [r3, #52]	; 0x34
			Channel->Instance->SMPR2 = (Channel->Sample_Time<<9);
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	699a      	ldr	r2, [r3, #24]
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	0252      	lsls	r2, r2, #9
 800051a:	611a      	str	r2, [r3, #16]
			GPIO_IN.PIN = GPIO_PIN_3;
 800051c:	2303      	movs	r3, #3
 800051e:	617b      	str	r3, [r7, #20]
			HAL_Init_PIN(GPIOA,&GPIO_IN);
 8000520:	f107 030c 	add.w	r3, r7, #12
 8000524:	4619      	mov	r1, r3
 8000526:	4875      	ldr	r0, [pc, #468]	; (80006fc <HAL_ADC_CHN_SET+0x3c0>)
 8000528:	f000 fd44 	bl	8000fb4 <HAL_Init_PIN>
			break;
 800052c:	e0e2      	b.n	80006f4 <HAL_ADC_CHN_SET+0x3b8>
			HAL_ADC_WTD_EN(Channel, AWDCH_CHN_4);
 800052e:	2104      	movs	r1, #4
 8000530:	6878      	ldr	r0, [r7, #4]
 8000532:	f7ff fecd 	bl	80002d0 <HAL_ADC_WTD_EN>
			Channel->Instance->SQR3 = AWDCH_CHN_4;
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	2204      	movs	r2, #4
 800053c:	635a      	str	r2, [r3, #52]	; 0x34
			Channel->Instance->SMPR2 = (Channel->Sample_Time<<12);
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	699a      	ldr	r2, [r3, #24]
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	0312      	lsls	r2, r2, #12
 8000548:	611a      	str	r2, [r3, #16]
			GPIO_IN.PIN = GPIO_PIN_4;
 800054a:	2304      	movs	r3, #4
 800054c:	617b      	str	r3, [r7, #20]
			HAL_Init_PIN(GPIOA,&GPIO_IN);
 800054e:	f107 030c 	add.w	r3, r7, #12
 8000552:	4619      	mov	r1, r3
 8000554:	4869      	ldr	r0, [pc, #420]	; (80006fc <HAL_ADC_CHN_SET+0x3c0>)
 8000556:	f000 fd2d 	bl	8000fb4 <HAL_Init_PIN>
			break;
 800055a:	e0cb      	b.n	80006f4 <HAL_ADC_CHN_SET+0x3b8>
			HAL_ADC_WTD_EN(Channel, AWDCH_CHN_5);
 800055c:	2105      	movs	r1, #5
 800055e:	6878      	ldr	r0, [r7, #4]
 8000560:	f7ff feb6 	bl	80002d0 <HAL_ADC_WTD_EN>
			Channel->Instance->SQR3 = AWDCH_CHN_5;
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	2205      	movs	r2, #5
 800056a:	635a      	str	r2, [r3, #52]	; 0x34
			Channel->Instance->SMPR2 = (Channel->Sample_Time<<15);
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	699a      	ldr	r2, [r3, #24]
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	03d2      	lsls	r2, r2, #15
 8000576:	611a      	str	r2, [r3, #16]
			GPIO_IN.PIN = GPIO_PIN_5;
 8000578:	2305      	movs	r3, #5
 800057a:	617b      	str	r3, [r7, #20]
			HAL_Init_PIN(GPIOA,&GPIO_IN);
 800057c:	f107 030c 	add.w	r3, r7, #12
 8000580:	4619      	mov	r1, r3
 8000582:	485e      	ldr	r0, [pc, #376]	; (80006fc <HAL_ADC_CHN_SET+0x3c0>)
 8000584:	f000 fd16 	bl	8000fb4 <HAL_Init_PIN>
			break;
 8000588:	e0b4      	b.n	80006f4 <HAL_ADC_CHN_SET+0x3b8>
			HAL_ADC_WTD_EN(Channel, AWDCH_CHN_6);
 800058a:	2106      	movs	r1, #6
 800058c:	6878      	ldr	r0, [r7, #4]
 800058e:	f7ff fe9f 	bl	80002d0 <HAL_ADC_WTD_EN>
			Channel->Instance->SQR3 = AWDCH_CHN_6;
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	2206      	movs	r2, #6
 8000598:	635a      	str	r2, [r3, #52]	; 0x34
			Channel->Instance->SMPR2 = (Channel->Sample_Time<<18);
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	699a      	ldr	r2, [r3, #24]
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	0492      	lsls	r2, r2, #18
 80005a4:	611a      	str	r2, [r3, #16]
			GPIO_IN.PIN = GPIO_PIN_6;
 80005a6:	2306      	movs	r3, #6
 80005a8:	617b      	str	r3, [r7, #20]
			HAL_Init_PIN(GPIOA,&GPIO_IN);
 80005aa:	f107 030c 	add.w	r3, r7, #12
 80005ae:	4619      	mov	r1, r3
 80005b0:	4852      	ldr	r0, [pc, #328]	; (80006fc <HAL_ADC_CHN_SET+0x3c0>)
 80005b2:	f000 fcff 	bl	8000fb4 <HAL_Init_PIN>
			break;
 80005b6:	e09d      	b.n	80006f4 <HAL_ADC_CHN_SET+0x3b8>
			HAL_ADC_WTD_EN(Channel, AWDCH_CHN_7);
 80005b8:	2107      	movs	r1, #7
 80005ba:	6878      	ldr	r0, [r7, #4]
 80005bc:	f7ff fe88 	bl	80002d0 <HAL_ADC_WTD_EN>
			Channel->Instance->SQR3 = AWDCH_CHN_7;
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	2207      	movs	r2, #7
 80005c6:	635a      	str	r2, [r3, #52]	; 0x34
			Channel->Instance->SMPR2 = (Channel->Sample_Time<<21);
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	699a      	ldr	r2, [r3, #24]
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	0552      	lsls	r2, r2, #21
 80005d2:	611a      	str	r2, [r3, #16]
			GPIO_IN.PIN = GPIO_PIN_7;
 80005d4:	2307      	movs	r3, #7
 80005d6:	617b      	str	r3, [r7, #20]
			HAL_Init_PIN(GPIOA,&GPIO_IN);
 80005d8:	f107 030c 	add.w	r3, r7, #12
 80005dc:	4619      	mov	r1, r3
 80005de:	4847      	ldr	r0, [pc, #284]	; (80006fc <HAL_ADC_CHN_SET+0x3c0>)
 80005e0:	f000 fce8 	bl	8000fb4 <HAL_Init_PIN>
			break;
 80005e4:	e086      	b.n	80006f4 <HAL_ADC_CHN_SET+0x3b8>
			HAL_ADC_WTD_EN(Channel, AWDCH_CHN_8);
 80005e6:	2108      	movs	r1, #8
 80005e8:	6878      	ldr	r0, [r7, #4]
 80005ea:	f7ff fe71 	bl	80002d0 <HAL_ADC_WTD_EN>
			Channel->Instance->SQR3 = AWDCH_CHN_8;
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	2208      	movs	r2, #8
 80005f4:	635a      	str	r2, [r3, #52]	; 0x34
			Channel->Instance->SMPR2 = (Channel->Sample_Time<<24);
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	699a      	ldr	r2, [r3, #24]
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	0612      	lsls	r2, r2, #24
 8000600:	611a      	str	r2, [r3, #16]
			GPIO_IN.PIN = GPIO_PIN_0;
 8000602:	2300      	movs	r3, #0
 8000604:	617b      	str	r3, [r7, #20]
			HAL_Init_PIN(GPIOB,&GPIO_IN);
 8000606:	f107 030c 	add.w	r3, r7, #12
 800060a:	4619      	mov	r1, r3
 800060c:	483c      	ldr	r0, [pc, #240]	; (8000700 <HAL_ADC_CHN_SET+0x3c4>)
 800060e:	f000 fcd1 	bl	8000fb4 <HAL_Init_PIN>
			break;
 8000612:	e06f      	b.n	80006f4 <HAL_ADC_CHN_SET+0x3b8>
			HAL_ADC_WTD_EN(Channel, AWDCH_CHN_9);
 8000614:	2109      	movs	r1, #9
 8000616:	6878      	ldr	r0, [r7, #4]
 8000618:	f7ff fe5a 	bl	80002d0 <HAL_ADC_WTD_EN>
			Channel->Instance->SQR3 = AWDCH_CHN_9;
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	2209      	movs	r2, #9
 8000622:	635a      	str	r2, [r3, #52]	; 0x34
			Channel->Instance->SMPR2 = (Channel->Sample_Time<<27);
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	699a      	ldr	r2, [r3, #24]
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	06d2      	lsls	r2, r2, #27
 800062e:	611a      	str	r2, [r3, #16]
			GPIO_IN.PIN = GPIO_PIN_1;
 8000630:	2301      	movs	r3, #1
 8000632:	617b      	str	r3, [r7, #20]
			HAL_Init_PIN(GPIOB,&GPIO_IN);
 8000634:	f107 030c 	add.w	r3, r7, #12
 8000638:	4619      	mov	r1, r3
 800063a:	4831      	ldr	r0, [pc, #196]	; (8000700 <HAL_ADC_CHN_SET+0x3c4>)
 800063c:	f000 fcba 	bl	8000fb4 <HAL_Init_PIN>
			break;
 8000640:	e058      	b.n	80006f4 <HAL_ADC_CHN_SET+0x3b8>
			HAL_ADC_WTD_EN(Channel, AWDCH_CHN_10);
 8000642:	210a      	movs	r1, #10
 8000644:	6878      	ldr	r0, [r7, #4]
 8000646:	f7ff fe43 	bl	80002d0 <HAL_ADC_WTD_EN>
			Channel->Instance->SQR3 = AWDCH_CHN_10;
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	220a      	movs	r2, #10
 8000650:	635a      	str	r2, [r3, #52]	; 0x34
			Channel->Instance->SMPR1 = (Channel->Sample_Time<<0);
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	687a      	ldr	r2, [r7, #4]
 8000658:	6992      	ldr	r2, [r2, #24]
 800065a:	60da      	str	r2, [r3, #12]
			break;
 800065c:	e04a      	b.n	80006f4 <HAL_ADC_CHN_SET+0x3b8>
			HAL_ADC_WTD_EN(Channel, AWDCH_CHN_11);
 800065e:	210b      	movs	r1, #11
 8000660:	6878      	ldr	r0, [r7, #4]
 8000662:	f7ff fe35 	bl	80002d0 <HAL_ADC_WTD_EN>
			Channel->Instance->SQR3 = AWDCH_CHN_11;
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	220b      	movs	r2, #11
 800066c:	635a      	str	r2, [r3, #52]	; 0x34
			Channel->Instance->SMPR1 = (Channel->Sample_Time<<3);
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	699a      	ldr	r2, [r3, #24]
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	00d2      	lsls	r2, r2, #3
 8000678:	60da      	str	r2, [r3, #12]
			break;
 800067a:	e03b      	b.n	80006f4 <HAL_ADC_CHN_SET+0x3b8>
			HAL_ADC_WTD_EN(Channel, AWDCH_CHN_12);
 800067c:	210c      	movs	r1, #12
 800067e:	6878      	ldr	r0, [r7, #4]
 8000680:	f7ff fe26 	bl	80002d0 <HAL_ADC_WTD_EN>
			Channel->Instance->SQR3 = AWDCH_CHN_12;
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	220c      	movs	r2, #12
 800068a:	635a      	str	r2, [r3, #52]	; 0x34
			Channel->Instance->SMPR1 = (Channel->Sample_Time<<6);
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	699a      	ldr	r2, [r3, #24]
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	0192      	lsls	r2, r2, #6
 8000696:	60da      	str	r2, [r3, #12]
			break;
 8000698:	e02c      	b.n	80006f4 <HAL_ADC_CHN_SET+0x3b8>
			HAL_ADC_WTD_EN(Channel, AWDCH_CHN_13);
 800069a:	210d      	movs	r1, #13
 800069c:	6878      	ldr	r0, [r7, #4]
 800069e:	f7ff fe17 	bl	80002d0 <HAL_ADC_WTD_EN>
			Channel->Instance->SQR3 = AWDCH_CHN_13;
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	220d      	movs	r2, #13
 80006a8:	635a      	str	r2, [r3, #52]	; 0x34
			Channel->Instance->SMPR1 = (Channel->Sample_Time<<9);
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	699a      	ldr	r2, [r3, #24]
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	0252      	lsls	r2, r2, #9
 80006b4:	60da      	str	r2, [r3, #12]
			break;
 80006b6:	e01d      	b.n	80006f4 <HAL_ADC_CHN_SET+0x3b8>
			HAL_ADC_WTD_EN(Channel, AWDCH_CHN_14);
 80006b8:	210e      	movs	r1, #14
 80006ba:	6878      	ldr	r0, [r7, #4]
 80006bc:	f7ff fe08 	bl	80002d0 <HAL_ADC_WTD_EN>
			Channel->Instance->SQR3 = AWDCH_CHN_14;
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	220e      	movs	r2, #14
 80006c6:	635a      	str	r2, [r3, #52]	; 0x34
			Channel->Instance->SMPR1 = (Channel->Sample_Time<<12);
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	699a      	ldr	r2, [r3, #24]
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	0312      	lsls	r2, r2, #12
 80006d2:	60da      	str	r2, [r3, #12]
			break;
 80006d4:	e00e      	b.n	80006f4 <HAL_ADC_CHN_SET+0x3b8>
			HAL_ADC_WTD_EN(Channel, AWDCH_CHN_15);
 80006d6:	210f      	movs	r1, #15
 80006d8:	6878      	ldr	r0, [r7, #4]
 80006da:	f7ff fdf9 	bl	80002d0 <HAL_ADC_WTD_EN>
			Channel->Instance->SQR3  = AWDCH_CHN_15;
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	220f      	movs	r2, #15
 80006e4:	635a      	str	r2, [r3, #52]	; 0x34
			Channel->Instance->SMPR1 = (Channel->Sample_Time<<15);
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	699a      	ldr	r2, [r3, #24]
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	03d2      	lsls	r2, r2, #15
 80006f0:	60da      	str	r2, [r3, #12]
			break;
 80006f2:	bf00      	nop
}
 80006f4:	bf00      	nop
 80006f6:	3728      	adds	r7, #40	; 0x28
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	40010800 	.word	0x40010800
 8000700:	40010c00 	.word	0x40010c00

08000704 <HAL_SHN_ALLGN_SET>:

static void HAL_SHN_ALLGN_SET(ADC_CH_t *Channel)
{
 8000704:	b480      	push	{r7}
 8000706:	b083      	sub	sp, #12
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
	switch (Channel->Alignment) {
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	689b      	ldr	r3, [r3, #8]
 8000710:	2b00      	cmp	r3, #0
 8000712:	d002      	beq.n	800071a <HAL_SHN_ALLGN_SET+0x16>
 8000714:	2b01      	cmp	r3, #1
 8000716:	d009      	beq.n	800072c <HAL_SHN_ALLGN_SET+0x28>
			break;
		case HAL_ADC_ALLIGNMENT_RIGHT:
			Channel->Instance->CR2 &= ALLIGN_RIGH_MSK;
			break;
	}
}
 8000718:	e011      	b.n	800073e <HAL_SHN_ALLGN_SET+0x3a>
			Channel->Instance->CR2 |= ALLIGN_LEFT_MSK;
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	689a      	ldr	r2, [r3, #8]
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000728:	609a      	str	r2, [r3, #8]
			break;
 800072a:	e008      	b.n	800073e <HAL_SHN_ALLGN_SET+0x3a>
			Channel->Instance->CR2 &= ALLIGN_RIGH_MSK;
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	689a      	ldr	r2, [r3, #8]
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800073a:	609a      	str	r2, [r3, #8]
			break;
 800073c:	bf00      	nop
}
 800073e:	bf00      	nop
 8000740:	370c      	adds	r7, #12
 8000742:	46bd      	mov	sp, r7
 8000744:	bc80      	pop	{r7}
 8000746:	4770      	bx	lr

08000748 <HAL_ADC_MULTCHN_SET>:

static void HAL_ADC_MULTCHN_SET(ADC_init_t *Channel,uint8_t POS) {
 8000748:	b580      	push	{r7, lr}
 800074a:	b08c      	sub	sp, #48	; 0x30
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
 8000750:	460b      	mov	r3, r1
 8000752:	70fb      	strb	r3, [r7, #3]

	GPIO_t GPIO_IN;
	GPIO_IN.Mode=HAL_GPIO_IN_AN;
 8000754:	2306      	movs	r3, #6
 8000756:	60fb      	str	r3, [r7, #12]
	volatile uint32_t *CONFIG_REG=NULL;
 8000758:	2300      	movs	r3, #0
 800075a:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t OFFSET=0;
 800075c:	2300      	movs	r3, #0
 800075e:	62bb      	str	r3, [r7, #40]	; 0x28
	CONFIG_REG=(POS<=6)?&Channel->Init.Instance->SQR3:(POS>6 && POS<=12)?&Channel->Init.Instance->SQR2:&Channel->Init.Instance->SQR1;
 8000760:	78fb      	ldrb	r3, [r7, #3]
 8000762:	2b06      	cmp	r3, #6
 8000764:	d804      	bhi.n	8000770 <HAL_ADC_MULTCHN_SET+0x28>
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800076c:	3334      	adds	r3, #52	; 0x34
 800076e:	e00e      	b.n	800078e <HAL_ADC_MULTCHN_SET+0x46>
 8000770:	78fb      	ldrb	r3, [r7, #3]
 8000772:	2b06      	cmp	r3, #6
 8000774:	d907      	bls.n	8000786 <HAL_ADC_MULTCHN_SET+0x3e>
 8000776:	78fb      	ldrb	r3, [r7, #3]
 8000778:	2b0c      	cmp	r3, #12
 800077a:	d804      	bhi.n	8000786 <HAL_ADC_MULTCHN_SET+0x3e>
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000782:	3330      	adds	r3, #48	; 0x30
 8000784:	e003      	b.n	800078e <HAL_ADC_MULTCHN_SET+0x46>
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800078c:	332c      	adds	r3, #44	; 0x2c
 800078e:	62fb      	str	r3, [r7, #44]	; 0x2c
	OFFSET=(POS<=6)?POS:(POS>6 && POS<=12)?POS-6:POS-13;
 8000790:	78fb      	ldrb	r3, [r7, #3]
 8000792:	2b06      	cmp	r3, #6
 8000794:	d801      	bhi.n	800079a <HAL_ADC_MULTCHN_SET+0x52>
 8000796:	78fb      	ldrb	r3, [r7, #3]
 8000798:	e00a      	b.n	80007b0 <HAL_ADC_MULTCHN_SET+0x68>
 800079a:	78fb      	ldrb	r3, [r7, #3]
 800079c:	2b06      	cmp	r3, #6
 800079e:	d905      	bls.n	80007ac <HAL_ADC_MULTCHN_SET+0x64>
 80007a0:	78fb      	ldrb	r3, [r7, #3]
 80007a2:	2b0c      	cmp	r3, #12
 80007a4:	d802      	bhi.n	80007ac <HAL_ADC_MULTCHN_SET+0x64>
 80007a6:	78fb      	ldrb	r3, [r7, #3]
 80007a8:	3b06      	subs	r3, #6
 80007aa:	e001      	b.n	80007b0 <HAL_ADC_MULTCHN_SET+0x68>
 80007ac:	78fb      	ldrb	r3, [r7, #3]
 80007ae:	3b0d      	subs	r3, #13
 80007b0:	62bb      	str	r3, [r7, #40]	; 0x28

	switch (Channel->CHANNEL_POS[POS]) {
 80007b2:	78fa      	ldrb	r2, [r7, #3]
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	3214      	adds	r2, #20
 80007b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80007bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80007c0:	f000 81f8 	beq.w	8000bb4 <HAL_ADC_MULTCHN_SET+0x46c>
 80007c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80007c8:	f200 8207 	bhi.w	8000bda <HAL_ADC_MULTCHN_SET+0x492>
 80007cc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80007d0:	f000 81dd 	beq.w	8000b8e <HAL_ADC_MULTCHN_SET+0x446>
 80007d4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80007d8:	f200 81ff 	bhi.w	8000bda <HAL_ADC_MULTCHN_SET+0x492>
 80007dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80007e0:	f000 81c2 	beq.w	8000b68 <HAL_ADC_MULTCHN_SET+0x420>
 80007e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80007e8:	f200 81f7 	bhi.w	8000bda <HAL_ADC_MULTCHN_SET+0x492>
 80007ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80007f0:	f000 81a7 	beq.w	8000b42 <HAL_ADC_MULTCHN_SET+0x3fa>
 80007f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80007f8:	f200 81ef 	bhi.w	8000bda <HAL_ADC_MULTCHN_SET+0x492>
 80007fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000800:	f000 818c 	beq.w	8000b1c <HAL_ADC_MULTCHN_SET+0x3d4>
 8000804:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000808:	f200 81e7 	bhi.w	8000bda <HAL_ADC_MULTCHN_SET+0x492>
 800080c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000810:	f000 8172 	beq.w	8000af8 <HAL_ADC_MULTCHN_SET+0x3b0>
 8000814:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000818:	f200 81df 	bhi.w	8000bda <HAL_ADC_MULTCHN_SET+0x492>
 800081c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000820:	f000 814f 	beq.w	8000ac2 <HAL_ADC_MULTCHN_SET+0x37a>
 8000824:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000828:	f200 81d7 	bhi.w	8000bda <HAL_ADC_MULTCHN_SET+0x492>
 800082c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000830:	f000 812c 	beq.w	8000a8c <HAL_ADC_MULTCHN_SET+0x344>
 8000834:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000838:	f200 81cf 	bhi.w	8000bda <HAL_ADC_MULTCHN_SET+0x492>
 800083c:	2b80      	cmp	r3, #128	; 0x80
 800083e:	f000 810a 	beq.w	8000a56 <HAL_ADC_MULTCHN_SET+0x30e>
 8000842:	2b80      	cmp	r3, #128	; 0x80
 8000844:	f200 81c9 	bhi.w	8000bda <HAL_ADC_MULTCHN_SET+0x492>
 8000848:	2b20      	cmp	r3, #32
 800084a:	d849      	bhi.n	80008e0 <HAL_ADC_MULTCHN_SET+0x198>
 800084c:	2b00      	cmp	r3, #0
 800084e:	f000 81c4 	beq.w	8000bda <HAL_ADC_MULTCHN_SET+0x492>
 8000852:	3b01      	subs	r3, #1
 8000854:	2b1f      	cmp	r3, #31
 8000856:	f200 81c0 	bhi.w	8000bda <HAL_ADC_MULTCHN_SET+0x492>
 800085a:	a201      	add	r2, pc, #4	; (adr r2, 8000860 <HAL_ADC_MULTCHN_SET+0x118>)
 800085c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000860:	080008e9 	.word	0x080008e9
 8000864:	08000913 	.word	0x08000913
 8000868:	08000bdb 	.word	0x08000bdb
 800086c:	08000949 	.word	0x08000949
 8000870:	08000bdb 	.word	0x08000bdb
 8000874:	08000bdb 	.word	0x08000bdb
 8000878:	08000bdb 	.word	0x08000bdb
 800087c:	0800097f 	.word	0x0800097f
 8000880:	08000bdb 	.word	0x08000bdb
 8000884:	08000bdb 	.word	0x08000bdb
 8000888:	08000bdb 	.word	0x08000bdb
 800088c:	08000bdb 	.word	0x08000bdb
 8000890:	08000bdb 	.word	0x08000bdb
 8000894:	08000bdb 	.word	0x08000bdb
 8000898:	08000bdb 	.word	0x08000bdb
 800089c:	080009b5 	.word	0x080009b5
 80008a0:	08000bdb 	.word	0x08000bdb
 80008a4:	08000bdb 	.word	0x08000bdb
 80008a8:	08000bdb 	.word	0x08000bdb
 80008ac:	08000bdb 	.word	0x08000bdb
 80008b0:	08000bdb 	.word	0x08000bdb
 80008b4:	08000bdb 	.word	0x08000bdb
 80008b8:	08000bdb 	.word	0x08000bdb
 80008bc:	08000bdb 	.word	0x08000bdb
 80008c0:	08000bdb 	.word	0x08000bdb
 80008c4:	08000bdb 	.word	0x08000bdb
 80008c8:	08000bdb 	.word	0x08000bdb
 80008cc:	08000bdb 	.word	0x08000bdb
 80008d0:	08000bdb 	.word	0x08000bdb
 80008d4:	08000bdb 	.word	0x08000bdb
 80008d8:	08000bdb 	.word	0x08000bdb
 80008dc:	080009eb 	.word	0x080009eb
 80008e0:	2b40      	cmp	r3, #64	; 0x40
 80008e2:	f000 809d 	beq.w	8000a20 <HAL_ADC_MULTCHN_SET+0x2d8>

			*CONFIG_REG  = AWDCH_CHN_15<<5*OFFSET;
			Channel->Init.Instance->SMPR1 = (Channel->Sample_Time[POS]<<15);
			break;
	}
}
 80008e6:	e178      	b.n	8000bda <HAL_ADC_MULTCHN_SET+0x492>
			*CONFIG_REG = (AWDCH_CHN_0<<5*OFFSET);
 80008e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008ea:	2200      	movs	r2, #0
 80008ec:	601a      	str	r2, [r3, #0]
			Channel->Init.Instance->SMPR2 = (Channel->Sample_Time[POS]<<0);
 80008ee:	78f9      	ldrb	r1, [r7, #3]
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80008f6:	687a      	ldr	r2, [r7, #4]
 80008f8:	3102      	adds	r1, #2
 80008fa:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80008fe:	611a      	str	r2, [r3, #16]
			GPIO_IN.PIN = GPIO_PIN_0;
 8000900:	2300      	movs	r3, #0
 8000902:	617b      	str	r3, [r7, #20]
			HAL_Init_PIN(GPIOA,&GPIO_IN);
 8000904:	f107 030c 	add.w	r3, r7, #12
 8000908:	4619      	mov	r1, r3
 800090a:	48b6      	ldr	r0, [pc, #728]	; (8000be4 <HAL_ADC_MULTCHN_SET+0x49c>)
 800090c:	f000 fb52 	bl	8000fb4 <HAL_Init_PIN>
			break;
 8000910:	e163      	b.n	8000bda <HAL_ADC_MULTCHN_SET+0x492>
			*CONFIG_REG = AWDCH_CHN_1<<5*OFFSET;
 8000912:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000914:	4613      	mov	r3, r2
 8000916:	009b      	lsls	r3, r3, #2
 8000918:	4413      	add	r3, r2
 800091a:	2201      	movs	r2, #1
 800091c:	409a      	lsls	r2, r3
 800091e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000920:	601a      	str	r2, [r3, #0]
			Channel->Init.Instance->SMPR2 = (Channel->Sample_Time[POS]<<3);
 8000922:	78fa      	ldrb	r2, [r7, #3]
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	3202      	adds	r2, #2
 8000928:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000932:	00d2      	lsls	r2, r2, #3
 8000934:	611a      	str	r2, [r3, #16]
			GPIO_IN.PIN = GPIO_PIN_1;
 8000936:	2301      	movs	r3, #1
 8000938:	617b      	str	r3, [r7, #20]
			HAL_Init_PIN(GPIOA,&GPIO_IN);
 800093a:	f107 030c 	add.w	r3, r7, #12
 800093e:	4619      	mov	r1, r3
 8000940:	48a8      	ldr	r0, [pc, #672]	; (8000be4 <HAL_ADC_MULTCHN_SET+0x49c>)
 8000942:	f000 fb37 	bl	8000fb4 <HAL_Init_PIN>
			break;
 8000946:	e148      	b.n	8000bda <HAL_ADC_MULTCHN_SET+0x492>
			*CONFIG_REG = AWDCH_CHN_2<<5*OFFSET;
 8000948:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800094a:	4613      	mov	r3, r2
 800094c:	009b      	lsls	r3, r3, #2
 800094e:	4413      	add	r3, r2
 8000950:	2202      	movs	r2, #2
 8000952:	409a      	lsls	r2, r3
 8000954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000956:	601a      	str	r2, [r3, #0]
			Channel->Init.Instance->SMPR2 = (Channel->Sample_Time[POS]<<6);
 8000958:	78fa      	ldrb	r2, [r7, #3]
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	3202      	adds	r2, #2
 800095e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000968:	0192      	lsls	r2, r2, #6
 800096a:	611a      	str	r2, [r3, #16]
			GPIO_IN.PIN = GPIO_PIN_2;
 800096c:	2302      	movs	r3, #2
 800096e:	617b      	str	r3, [r7, #20]
			HAL_Init_PIN(GPIOA,&GPIO_IN);
 8000970:	f107 030c 	add.w	r3, r7, #12
 8000974:	4619      	mov	r1, r3
 8000976:	489b      	ldr	r0, [pc, #620]	; (8000be4 <HAL_ADC_MULTCHN_SET+0x49c>)
 8000978:	f000 fb1c 	bl	8000fb4 <HAL_Init_PIN>
			break;
 800097c:	e12d      	b.n	8000bda <HAL_ADC_MULTCHN_SET+0x492>
			*CONFIG_REG = AWDCH_CHN_3<<5*OFFSET;
 800097e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000980:	4613      	mov	r3, r2
 8000982:	009b      	lsls	r3, r3, #2
 8000984:	4413      	add	r3, r2
 8000986:	2203      	movs	r2, #3
 8000988:	409a      	lsls	r2, r3
 800098a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800098c:	601a      	str	r2, [r3, #0]
			Channel->Init.Instance->SMPR2 = (Channel->Sample_Time[POS]<<9);
 800098e:	78fa      	ldrb	r2, [r7, #3]
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	3202      	adds	r2, #2
 8000994:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800099e:	0252      	lsls	r2, r2, #9
 80009a0:	611a      	str	r2, [r3, #16]
			GPIO_IN.PIN = GPIO_PIN_3;
 80009a2:	2303      	movs	r3, #3
 80009a4:	617b      	str	r3, [r7, #20]
			HAL_Init_PIN(GPIOA,&GPIO_IN);
 80009a6:	f107 030c 	add.w	r3, r7, #12
 80009aa:	4619      	mov	r1, r3
 80009ac:	488d      	ldr	r0, [pc, #564]	; (8000be4 <HAL_ADC_MULTCHN_SET+0x49c>)
 80009ae:	f000 fb01 	bl	8000fb4 <HAL_Init_PIN>
			break;
 80009b2:	e112      	b.n	8000bda <HAL_ADC_MULTCHN_SET+0x492>
			*CONFIG_REG = AWDCH_CHN_4<<5*OFFSET;
 80009b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80009b6:	4613      	mov	r3, r2
 80009b8:	009b      	lsls	r3, r3, #2
 80009ba:	4413      	add	r3, r2
 80009bc:	2204      	movs	r2, #4
 80009be:	409a      	lsls	r2, r3
 80009c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009c2:	601a      	str	r2, [r3, #0]
			Channel->Init.Instance->SMPR2 = (Channel->Sample_Time[POS]<<12);
 80009c4:	78fa      	ldrb	r2, [r7, #3]
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	3202      	adds	r2, #2
 80009ca:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80009d4:	0312      	lsls	r2, r2, #12
 80009d6:	611a      	str	r2, [r3, #16]
			GPIO_IN.PIN = GPIO_PIN_4;
 80009d8:	2304      	movs	r3, #4
 80009da:	617b      	str	r3, [r7, #20]
			HAL_Init_PIN(GPIOA,&GPIO_IN);
 80009dc:	f107 030c 	add.w	r3, r7, #12
 80009e0:	4619      	mov	r1, r3
 80009e2:	4880      	ldr	r0, [pc, #512]	; (8000be4 <HAL_ADC_MULTCHN_SET+0x49c>)
 80009e4:	f000 fae6 	bl	8000fb4 <HAL_Init_PIN>
			break;
 80009e8:	e0f7      	b.n	8000bda <HAL_ADC_MULTCHN_SET+0x492>
			*CONFIG_REG = AWDCH_CHN_5<<5*OFFSET;
 80009ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80009ec:	4613      	mov	r3, r2
 80009ee:	009b      	lsls	r3, r3, #2
 80009f0:	4413      	add	r3, r2
 80009f2:	2205      	movs	r2, #5
 80009f4:	409a      	lsls	r2, r3
 80009f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009f8:	601a      	str	r2, [r3, #0]
			Channel->Init.Instance->SMPR2 = (Channel->Sample_Time[POS]<<15);
 80009fa:	78fa      	ldrb	r2, [r7, #3]
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	3202      	adds	r2, #2
 8000a00:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000a0a:	03d2      	lsls	r2, r2, #15
 8000a0c:	611a      	str	r2, [r3, #16]
			GPIO_IN.PIN = GPIO_PIN_5;
 8000a0e:	2305      	movs	r3, #5
 8000a10:	617b      	str	r3, [r7, #20]
			HAL_Init_PIN(GPIOA,&GPIO_IN);
 8000a12:	f107 030c 	add.w	r3, r7, #12
 8000a16:	4619      	mov	r1, r3
 8000a18:	4872      	ldr	r0, [pc, #456]	; (8000be4 <HAL_ADC_MULTCHN_SET+0x49c>)
 8000a1a:	f000 facb 	bl	8000fb4 <HAL_Init_PIN>
			break;
 8000a1e:	e0dc      	b.n	8000bda <HAL_ADC_MULTCHN_SET+0x492>
			*CONFIG_REG = AWDCH_CHN_6<<5*OFFSET;
 8000a20:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000a22:	4613      	mov	r3, r2
 8000a24:	009b      	lsls	r3, r3, #2
 8000a26:	4413      	add	r3, r2
 8000a28:	2206      	movs	r2, #6
 8000a2a:	409a      	lsls	r2, r3
 8000a2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a2e:	601a      	str	r2, [r3, #0]
			Channel->Init.Instance->SMPR2 = (Channel->Sample_Time[POS]<<18);
 8000a30:	78fa      	ldrb	r2, [r7, #3]
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	3202      	adds	r2, #2
 8000a36:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000a40:	0492      	lsls	r2, r2, #18
 8000a42:	611a      	str	r2, [r3, #16]
			GPIO_IN.PIN = GPIO_PIN_6;
 8000a44:	2306      	movs	r3, #6
 8000a46:	617b      	str	r3, [r7, #20]
			HAL_Init_PIN(GPIOA,&GPIO_IN);
 8000a48:	f107 030c 	add.w	r3, r7, #12
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	4865      	ldr	r0, [pc, #404]	; (8000be4 <HAL_ADC_MULTCHN_SET+0x49c>)
 8000a50:	f000 fab0 	bl	8000fb4 <HAL_Init_PIN>
			break;
 8000a54:	e0c1      	b.n	8000bda <HAL_ADC_MULTCHN_SET+0x492>
			*CONFIG_REG = AWDCH_CHN_7<<5*OFFSET;
 8000a56:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000a58:	4613      	mov	r3, r2
 8000a5a:	009b      	lsls	r3, r3, #2
 8000a5c:	4413      	add	r3, r2
 8000a5e:	2207      	movs	r2, #7
 8000a60:	409a      	lsls	r2, r3
 8000a62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a64:	601a      	str	r2, [r3, #0]
			Channel->Init.Instance->SMPR2 = (Channel->Sample_Time[POS]<<21);
 8000a66:	78fa      	ldrb	r2, [r7, #3]
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	3202      	adds	r2, #2
 8000a6c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000a76:	0552      	lsls	r2, r2, #21
 8000a78:	611a      	str	r2, [r3, #16]
			GPIO_IN.PIN = GPIO_PIN_7;
 8000a7a:	2307      	movs	r3, #7
 8000a7c:	617b      	str	r3, [r7, #20]
			HAL_Init_PIN(GPIOA,&GPIO_IN);
 8000a7e:	f107 030c 	add.w	r3, r7, #12
 8000a82:	4619      	mov	r1, r3
 8000a84:	4857      	ldr	r0, [pc, #348]	; (8000be4 <HAL_ADC_MULTCHN_SET+0x49c>)
 8000a86:	f000 fa95 	bl	8000fb4 <HAL_Init_PIN>
			break;
 8000a8a:	e0a6      	b.n	8000bda <HAL_ADC_MULTCHN_SET+0x492>
			*CONFIG_REG = AWDCH_CHN_8<<5*OFFSET;
 8000a8c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000a8e:	4613      	mov	r3, r2
 8000a90:	009b      	lsls	r3, r3, #2
 8000a92:	4413      	add	r3, r2
 8000a94:	2208      	movs	r2, #8
 8000a96:	409a      	lsls	r2, r3
 8000a98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a9a:	601a      	str	r2, [r3, #0]
			Channel->Init.Instance->SMPR2 = (Channel->Sample_Time[POS]<<24);
 8000a9c:	78fa      	ldrb	r2, [r7, #3]
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	3202      	adds	r2, #2
 8000aa2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000aac:	0612      	lsls	r2, r2, #24
 8000aae:	611a      	str	r2, [r3, #16]
			GPIO_IN.PIN = GPIO_PIN_0;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	617b      	str	r3, [r7, #20]
			HAL_Init_PIN(GPIOB,&GPIO_IN);
 8000ab4:	f107 030c 	add.w	r3, r7, #12
 8000ab8:	4619      	mov	r1, r3
 8000aba:	484b      	ldr	r0, [pc, #300]	; (8000be8 <HAL_ADC_MULTCHN_SET+0x4a0>)
 8000abc:	f000 fa7a 	bl	8000fb4 <HAL_Init_PIN>
			break;
 8000ac0:	e08b      	b.n	8000bda <HAL_ADC_MULTCHN_SET+0x492>
			*CONFIG_REG = AWDCH_CHN_9<<5*OFFSET;
 8000ac2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000ac4:	4613      	mov	r3, r2
 8000ac6:	009b      	lsls	r3, r3, #2
 8000ac8:	4413      	add	r3, r2
 8000aca:	2209      	movs	r2, #9
 8000acc:	409a      	lsls	r2, r3
 8000ace:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ad0:	601a      	str	r2, [r3, #0]
			Channel->Init.Instance->SMPR2 = (Channel->Sample_Time[POS]<<27);
 8000ad2:	78fa      	ldrb	r2, [r7, #3]
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	3202      	adds	r2, #2
 8000ad8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000ae2:	06d2      	lsls	r2, r2, #27
 8000ae4:	611a      	str	r2, [r3, #16]
			GPIO_IN.PIN = GPIO_PIN_1;
 8000ae6:	2301      	movs	r3, #1
 8000ae8:	617b      	str	r3, [r7, #20]
			HAL_Init_PIN(GPIOB,&GPIO_IN);
 8000aea:	f107 030c 	add.w	r3, r7, #12
 8000aee:	4619      	mov	r1, r3
 8000af0:	483d      	ldr	r0, [pc, #244]	; (8000be8 <HAL_ADC_MULTCHN_SET+0x4a0>)
 8000af2:	f000 fa5f 	bl	8000fb4 <HAL_Init_PIN>
			break;
 8000af6:	e070      	b.n	8000bda <HAL_ADC_MULTCHN_SET+0x492>
			*CONFIG_REG = AWDCH_CHN_10<<5*OFFSET;
 8000af8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000afa:	4613      	mov	r3, r2
 8000afc:	009b      	lsls	r3, r3, #2
 8000afe:	4413      	add	r3, r2
 8000b00:	220a      	movs	r2, #10
 8000b02:	409a      	lsls	r2, r3
 8000b04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b06:	601a      	str	r2, [r3, #0]
			Channel->Init.Instance->SMPR1 = (Channel->Sample_Time[POS]<<0);
 8000b08:	78f9      	ldrb	r1, [r7, #3]
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000b10:	687a      	ldr	r2, [r7, #4]
 8000b12:	3102      	adds	r1, #2
 8000b14:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8000b18:	60da      	str	r2, [r3, #12]
			break;
 8000b1a:	e05e      	b.n	8000bda <HAL_ADC_MULTCHN_SET+0x492>
			*CONFIG_REG = AWDCH_CHN_11<<5*OFFSET;
 8000b1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000b1e:	4613      	mov	r3, r2
 8000b20:	009b      	lsls	r3, r3, #2
 8000b22:	4413      	add	r3, r2
 8000b24:	220b      	movs	r2, #11
 8000b26:	409a      	lsls	r2, r3
 8000b28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b2a:	601a      	str	r2, [r3, #0]
			Channel->Init.Instance->SMPR1 = (Channel->Sample_Time[POS]<<3);
 8000b2c:	78fa      	ldrb	r2, [r7, #3]
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	3202      	adds	r2, #2
 8000b32:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000b3c:	00d2      	lsls	r2, r2, #3
 8000b3e:	60da      	str	r2, [r3, #12]
			break;
 8000b40:	e04b      	b.n	8000bda <HAL_ADC_MULTCHN_SET+0x492>
			*CONFIG_REG = AWDCH_CHN_12<<5*OFFSET;
 8000b42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000b44:	4613      	mov	r3, r2
 8000b46:	009b      	lsls	r3, r3, #2
 8000b48:	4413      	add	r3, r2
 8000b4a:	220c      	movs	r2, #12
 8000b4c:	409a      	lsls	r2, r3
 8000b4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b50:	601a      	str	r2, [r3, #0]
			Channel->Init.Instance->SMPR1 = (Channel->Sample_Time[POS]<<6);
 8000b52:	78fa      	ldrb	r2, [r7, #3]
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	3202      	adds	r2, #2
 8000b58:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000b62:	0192      	lsls	r2, r2, #6
 8000b64:	60da      	str	r2, [r3, #12]
			break;
 8000b66:	e038      	b.n	8000bda <HAL_ADC_MULTCHN_SET+0x492>
			*CONFIG_REG = AWDCH_CHN_13<<5*OFFSET;
 8000b68:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000b6a:	4613      	mov	r3, r2
 8000b6c:	009b      	lsls	r3, r3, #2
 8000b6e:	4413      	add	r3, r2
 8000b70:	220d      	movs	r2, #13
 8000b72:	409a      	lsls	r2, r3
 8000b74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b76:	601a      	str	r2, [r3, #0]
			Channel->Init.Instance->SMPR1 = (Channel->Sample_Time[POS]<<9);
 8000b78:	78fa      	ldrb	r2, [r7, #3]
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	3202      	adds	r2, #2
 8000b7e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000b88:	0252      	lsls	r2, r2, #9
 8000b8a:	60da      	str	r2, [r3, #12]
			break;
 8000b8c:	e025      	b.n	8000bda <HAL_ADC_MULTCHN_SET+0x492>
			*CONFIG_REG = AWDCH_CHN_14<<5*OFFSET;
 8000b8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000b90:	4613      	mov	r3, r2
 8000b92:	009b      	lsls	r3, r3, #2
 8000b94:	4413      	add	r3, r2
 8000b96:	220e      	movs	r2, #14
 8000b98:	409a      	lsls	r2, r3
 8000b9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b9c:	601a      	str	r2, [r3, #0]
			Channel->Init.Instance->SMPR1 = (Channel->Sample_Time[POS]<<12);
 8000b9e:	78fa      	ldrb	r2, [r7, #3]
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	3202      	adds	r2, #2
 8000ba4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000bae:	0312      	lsls	r2, r2, #12
 8000bb0:	60da      	str	r2, [r3, #12]
			break;
 8000bb2:	e012      	b.n	8000bda <HAL_ADC_MULTCHN_SET+0x492>
			*CONFIG_REG  = AWDCH_CHN_15<<5*OFFSET;
 8000bb4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000bb6:	4613      	mov	r3, r2
 8000bb8:	009b      	lsls	r3, r3, #2
 8000bba:	4413      	add	r3, r2
 8000bbc:	220f      	movs	r2, #15
 8000bbe:	409a      	lsls	r2, r3
 8000bc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bc2:	601a      	str	r2, [r3, #0]
			Channel->Init.Instance->SMPR1 = (Channel->Sample_Time[POS]<<15);
 8000bc4:	78fa      	ldrb	r2, [r7, #3]
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	3202      	adds	r2, #2
 8000bca:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000bd4:	03d2      	lsls	r2, r2, #15
 8000bd6:	60da      	str	r2, [r3, #12]
			break;
 8000bd8:	bf00      	nop
}
 8000bda:	bf00      	nop
 8000bdc:	3730      	adds	r7, #48	; 0x30
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	40010800 	.word	0x40010800
 8000be8:	40010c00 	.word	0x40010c00

08000bec <HAL_SHN_Init>:


static void HAL_SHN_Init(ADC_CH_t *Channel)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b082      	sub	sp, #8
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
	if( Channel != NULL)
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d038      	beq.n	8000c6c <HAL_SHN_Init+0x80>
	{
		/**Single Channel Initilization **/
		if(Channel->Instance==ADC1)
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	4a1d      	ldr	r2, [pc, #116]	; (8000c74 <HAL_SHN_Init+0x88>)
 8000c00:	4293      	cmp	r3, r2
 8000c02:	d106      	bne.n	8000c12 <HAL_SHN_Init+0x26>
			HAL_RCC_ADC1_EN();
 8000c04:	4b1c      	ldr	r3, [pc, #112]	; (8000c78 <HAL_SHN_Init+0x8c>)
 8000c06:	699b      	ldr	r3, [r3, #24]
 8000c08:	4a1b      	ldr	r2, [pc, #108]	; (8000c78 <HAL_SHN_Init+0x8c>)
 8000c0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c0e:	6193      	str	r3, [r2, #24]
 8000c10:	e00a      	b.n	8000c28 <HAL_SHN_Init+0x3c>
		else if(Channel->Instance==ADC2)
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	4a19      	ldr	r2, [pc, #100]	; (8000c7c <HAL_SHN_Init+0x90>)
 8000c18:	4293      	cmp	r3, r2
 8000c1a:	d105      	bne.n	8000c28 <HAL_SHN_Init+0x3c>
			HAL_RCC_ADC2_EN();
 8000c1c:	4b16      	ldr	r3, [pc, #88]	; (8000c78 <HAL_SHN_Init+0x8c>)
 8000c1e:	699b      	ldr	r3, [r3, #24]
 8000c20:	4a15      	ldr	r2, [pc, #84]	; (8000c78 <HAL_SHN_Init+0x8c>)
 8000c22:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c26:	6193      	str	r3, [r2, #24]

		/*Set the number of conversions to one */
		Channel->Instance->SQR1 = (0x00000000UL<<20);
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	62da      	str	r2, [r3, #44]	; 0x2c

		/*Select a certain channel */
		HAL_ADC_CHN_SET(Channel);
 8000c30:	6878      	ldr	r0, [r7, #4]
 8000c32:	f7ff fb83 	bl	800033c <HAL_ADC_CHN_SET>
		/*Set up Allignment of channel*/
		HAL_SHN_ALLGN_SET(Channel);
 8000c36:	6878      	ldr	r0, [r7, #4]
 8000c38:	f7ff fd64 	bl	8000704 <HAL_SHN_ALLGN_SET>

		/*Clear the Bit responsible for continous conv*/
		Channel->Instance->CR2 &= SINGLE_CONV;
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	689a      	ldr	r2, [r3, #8]
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	f022 0202 	bic.w	r2, r2, #2
 8000c4a:	609a      	str	r2, [r3, #8]
		/*Turn on ADC */
		Channel->Instance->CR2 |= ADON_ON;
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	689a      	ldr	r2, [r3, #8]
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	f042 0201 	orr.w	r2, r2, #1
 8000c5a:	609a      	str	r2, [r3, #8]
		/*Start Conversion */
		Channel->Instance->CR2 |= ADON_ON;
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	689a      	ldr	r2, [r3, #8]
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	f042 0201 	orr.w	r2, r2, #1
 8000c6a:	609a      	str	r2, [r3, #8]
	}
}
 8000c6c:	bf00      	nop
 8000c6e:	3708      	adds	r7, #8
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	40012400 	.word	0x40012400
 8000c78:	40021000 	.word	0x40021000
 8000c7c:	40012800 	.word	0x40012800

08000c80 <HAL_MULT_SING_Init>:


static void HAL_MULT_SING_Init(ADC_init_t *ADC)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b084      	sub	sp, #16
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
	if(ADC != NULL)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d05b      	beq.n	8000d46 <HAL_MULT_SING_Init+0xc6>
	{
		/*---------Enable RCC PERIPH CLK--------*/
		if (ADC->Init.Instance == ADC1)
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000c94:	4a2e      	ldr	r2, [pc, #184]	; (8000d50 <HAL_MULT_SING_Init+0xd0>)
 8000c96:	4293      	cmp	r3, r2
 8000c98:	d106      	bne.n	8000ca8 <HAL_MULT_SING_Init+0x28>
			HAL_RCC_ADC1_EN();
 8000c9a:	4b2e      	ldr	r3, [pc, #184]	; (8000d54 <HAL_MULT_SING_Init+0xd4>)
 8000c9c:	699b      	ldr	r3, [r3, #24]
 8000c9e:	4a2d      	ldr	r2, [pc, #180]	; (8000d54 <HAL_MULT_SING_Init+0xd4>)
 8000ca0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ca4:	6193      	str	r3, [r2, #24]
 8000ca6:	e00b      	b.n	8000cc0 <HAL_MULT_SING_Init+0x40>
		else if (ADC->Init.Instance == ADC2)
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000cae:	4a2a      	ldr	r2, [pc, #168]	; (8000d58 <HAL_MULT_SING_Init+0xd8>)
 8000cb0:	4293      	cmp	r3, r2
 8000cb2:	d105      	bne.n	8000cc0 <HAL_MULT_SING_Init+0x40>
			HAL_RCC_ADC2_EN();
 8000cb4:	4b27      	ldr	r3, [pc, #156]	; (8000d54 <HAL_MULT_SING_Init+0xd4>)
 8000cb6:	699b      	ldr	r3, [r3, #24]
 8000cb8:	4a26      	ldr	r2, [pc, #152]	; (8000d54 <HAL_MULT_SING_Init+0xd4>)
 8000cba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cbe:	6193      	str	r3, [r2, #24]
		/*---------DMA Enable---------------*/
		ADC->Init.Instance->CR2 |= DMA_EN_MSK;
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000cc6:	689a      	ldr	r2, [r3, #8]
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000cce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000cd2:	609a      	str	r2, [r3, #8]

		/*----------Multiple Channels Selected Init-------*/
		uint8_t Channel_Cnt=0;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	73fb      	strb	r3, [r7, #15]
		for(Channel_Cnt=0;Channel_Cnt<=ADC->NO_channels-1;Channel_Cnt++)
 8000cd8:	2300      	movs	r3, #0
 8000cda:	73fb      	strb	r3, [r7, #15]
 8000cdc:	e007      	b.n	8000cee <HAL_MULT_SING_Init+0x6e>
		{
			HAL_ADC_MULTCHN_SET(ADC,Channel_Cnt);
 8000cde:	7bfb      	ldrb	r3, [r7, #15]
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	6878      	ldr	r0, [r7, #4]
 8000ce4:	f7ff fd30 	bl	8000748 <HAL_ADC_MULTCHN_SET>
		for(Channel_Cnt=0;Channel_Cnt<=ADC->NO_channels-1;Channel_Cnt++)
 8000ce8:	7bfb      	ldrb	r3, [r7, #15]
 8000cea:	3301      	adds	r3, #1
 8000cec:	73fb      	strb	r3, [r7, #15]
 8000cee:	7bfa      	ldrb	r2, [r7, #15]
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	685b      	ldr	r3, [r3, #4]
 8000cf4:	3b01      	subs	r3, #1
 8000cf6:	429a      	cmp	r2, r3
 8000cf8:	d9f1      	bls.n	8000cde <HAL_MULT_SING_Init+0x5e>
		}
		ADC->Init.Instance->SQR1=((ADC->NO_channels-1)<<20U);
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	685b      	ldr	r3, [r3, #4]
 8000cfe:	1e5a      	subs	r2, r3, #1
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000d06:	0512      	lsls	r2, r2, #20
 8000d08:	62da      	str	r2, [r3, #44]	; 0x2c
		/*Clear the Bit responsible for continous conv*/
		ADC->Init.Instance->CR2 &= SINGLE_CONV;
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000d10:	689a      	ldr	r2, [r3, #8]
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000d18:	f022 0202 	bic.w	r2, r2, #2
 8000d1c:	609a      	str	r2, [r3, #8]
		/*Turn on ADC */
		ADC->Init.Instance->CR2 |= ADON_ON;
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000d24:	689a      	ldr	r2, [r3, #8]
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000d2c:	f042 0201 	orr.w	r2, r2, #1
 8000d30:	609a      	str	r2, [r3, #8]
		/*Start Conversion */
		ADC->Init.Instance->CR2|= ADON_ON;
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000d38:	689a      	ldr	r2, [r3, #8]
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000d40:	f042 0201 	orr.w	r2, r2, #1
 8000d44:	609a      	str	r2, [r3, #8]
	}
}
 8000d46:	bf00      	nop
 8000d48:	3710      	adds	r7, #16
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	40012400 	.word	0x40012400
 8000d54:	40021000 	.word	0x40021000
 8000d58:	40012800 	.word	0x40012800

08000d5c <HAL_ADC_SHN_READ>:

static uint16_t HAL_ADC_SHN_READ(ADC_CH_t *Channel,uint8_t Flag)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b085      	sub	sp, #20
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
 8000d64:	460b      	mov	r3, r1
 8000d66:	70fb      	strb	r3, [r7, #3]
	/*------Start Convertion if Auto is not selected---------*/
	if(Flag == HAL_ADC_SING_FLAG)
 8000d68:	78fb      	ldrb	r3, [r7, #3]
 8000d6a:	2b01      	cmp	r3, #1
 8000d6c:	d107      	bne.n	8000d7e <HAL_ADC_SHN_READ+0x22>
		Channel->Instance->CR2 |= ADON_ON;
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	689a      	ldr	r2, [r3, #8]
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	f042 0201 	orr.w	r2, r2, #1
 8000d7c:	609a      	str	r2, [r3, #8]
	else if(Flag == HAL_ADC_CONT_FLAG){
	}

	/*------Polling Method----------*/
	while(!(READ_BIT(Channel->Instance->SR,HAL_ADC_EOC)));
 8000d7e:	bf00      	nop
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	085b      	lsrs	r3, r3, #1
 8000d88:	f003 0301 	and.w	r3, r3, #1
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d0f7      	beq.n	8000d80 <HAL_ADC_SHN_READ+0x24>

	/*------Read Reg-----------------*/
	uint16_t REG_VAL=(Channel->Instance->DR & 0xFFFF);
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d96:	81fb      	strh	r3, [r7, #14]

	/*----Adjust Result According to allignment----*/
	switch(Channel->Alignment)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	689b      	ldr	r3, [r3, #8]
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d001      	beq.n	8000da4 <HAL_ADC_SHN_READ+0x48>
 8000da0:	2b01      	cmp	r3, #1
	{
			case HAL_ADC_ALLIGNMENT_LEFT:
				REG_VAL=(REG_VAL>>4);
				break;
			case HAL_ADC_ALLIGNMENT_RIGHT:
				break;
 8000da2:	e003      	b.n	8000dac <HAL_ADC_SHN_READ+0x50>
				REG_VAL=(REG_VAL>>4);
 8000da4:	89fb      	ldrh	r3, [r7, #14]
 8000da6:	091b      	lsrs	r3, r3, #4
 8000da8:	81fb      	strh	r3, [r7, #14]
				break;
 8000daa:	bf00      	nop
	}
	/*-----Return Result------*/
	return REG_VAL;
 8000dac:	89fb      	ldrh	r3, [r7, #14]
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	3714      	adds	r7, #20
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bc80      	pop	{r7}
 8000db6:	4770      	bx	lr

08000db8 <HAL_ADC_MHN_READ>:

static uint8_t HAL_ADC_MHN_READ(ADC_CH_t *Channel,uint8_t Flag,uint16_t *Buffer,uint8_t No)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b087      	sub	sp, #28
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	60f8      	str	r0, [r7, #12]
 8000dc0:	607a      	str	r2, [r7, #4]
 8000dc2:	461a      	mov	r2, r3
 8000dc4:	460b      	mov	r3, r1
 8000dc6:	72fb      	strb	r3, [r7, #11]
 8000dc8:	4613      	mov	r3, r2
 8000dca:	72bb      	strb	r3, [r7, #10]
	uint8_t RET=1;
 8000dcc:	2301      	movs	r3, #1
 8000dce:	74fb      	strb	r3, [r7, #19]
	if (Flag == HAL_ADC_SING_FLAG)
 8000dd0:	7afb      	ldrb	r3, [r7, #11]
 8000dd2:	2b01      	cmp	r3, #1
 8000dd4:	d107      	bne.n	8000de6 <HAL_ADC_MHN_READ+0x2e>
		Channel->Instance->CR2 |= ADON_ON;
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	689a      	ldr	r2, [r3, #8]
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	f042 0201 	orr.w	r2, r2, #1
 8000de4:	609a      	str	r2, [r3, #8]
	else if (Flag == HAL_ADC_CONT_FLAG) {
	}
	uint8_t Cnt=0;
 8000de6:	2300      	movs	r3, #0
 8000de8:	75fb      	strb	r3, [r7, #23]
	while(Cnt<=No-1)
 8000dea:	e01f      	b.n	8000e2c <HAL_ADC_MHN_READ+0x74>
	{
		/*------Polling Method----------*/
		while (!(READ_BIT(Channel->Instance->SR, HAL_ADC_EOC)));
 8000dec:	bf00      	nop
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	085b      	lsrs	r3, r3, #1
 8000df6:	f003 0301 	and.w	r3, r3, #1
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d0f7      	beq.n	8000dee <HAL_ADC_MHN_READ+0x36>

		/*------Read Reg-----------------*/
		uint16_t REG_VAL = (Channel->Instance->DR & 0xFFFF);
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e04:	82bb      	strh	r3, [r7, #20]

		/*----Adjust Result According to allignment----*/
		switch (Channel->Alignment) {
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	689b      	ldr	r3, [r3, #8]
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d001      	beq.n	8000e12 <HAL_ADC_MHN_READ+0x5a>
 8000e0e:	2b01      	cmp	r3, #1
		case HAL_ADC_ALLIGNMENT_LEFT:
			REG_VAL = (REG_VAL >> 4);
			break;
		case HAL_ADC_ALLIGNMENT_RIGHT:
			break;
 8000e10:	e003      	b.n	8000e1a <HAL_ADC_MHN_READ+0x62>
			REG_VAL = (REG_VAL >> 4);
 8000e12:	8abb      	ldrh	r3, [r7, #20]
 8000e14:	091b      	lsrs	r3, r3, #4
 8000e16:	82bb      	strh	r3, [r7, #20]
			break;
 8000e18:	bf00      	nop
		}
		/*-----Return Result------*/
		*(Buffer+Cnt)=REG_VAL;
 8000e1a:	7dfb      	ldrb	r3, [r7, #23]
 8000e1c:	005b      	lsls	r3, r3, #1
 8000e1e:	687a      	ldr	r2, [r7, #4]
 8000e20:	4413      	add	r3, r2
 8000e22:	8aba      	ldrh	r2, [r7, #20]
 8000e24:	801a      	strh	r2, [r3, #0]
		Cnt++;
 8000e26:	7dfb      	ldrb	r3, [r7, #23]
 8000e28:	3301      	adds	r3, #1
 8000e2a:	75fb      	strb	r3, [r7, #23]
	while(Cnt<=No-1)
 8000e2c:	7aba      	ldrb	r2, [r7, #10]
 8000e2e:	7dfb      	ldrb	r3, [r7, #23]
 8000e30:	429a      	cmp	r2, r3
 8000e32:	d8db      	bhi.n	8000dec <HAL_ADC_MHN_READ+0x34>
	}
	return RET;
 8000e34:	7cfb      	ldrb	r3, [r7, #19]
}
 8000e36:	4618      	mov	r0, r3
 8000e38:	371c      	adds	r7, #28
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bc80      	pop	{r7}
 8000e3e:	4770      	bx	lr

08000e40 <HAL_ADC_READ>:
	return RET;
}

#if HAL_ADC_INT_EN == DIS
uint8_t HAL_ADC_READ(ADC_init_t *ADC,uint16_t *ADC_VAL)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b084      	sub	sp, #16
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
 8000e48:	6039      	str	r1, [r7, #0]
	uint8_t RET=1;
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	73fb      	strb	r3, [r7, #15]
	uint16_t Res=0;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	81bb      	strh	r3, [r7, #12]
	switch(ADC->ADC_Mode)
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	2b03      	cmp	r3, #3
 8000e58:	d82f      	bhi.n	8000eba <HAL_ADC_READ+0x7a>
 8000e5a:	a201      	add	r2, pc, #4	; (adr r2, 8000e60 <HAL_ADC_READ+0x20>)
 8000e5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e60:	08000e71 	.word	0x08000e71
 8000e64:	08000e89 	.word	0x08000e89
 8000e68:	08000ea1 	.word	0x08000ea1
 8000e6c:	08000ebb 	.word	0x08000ebb
	{
		case HAL_ADC_SCHN_SN_CONV:
			Res=HAL_ADC_SHN_READ(&ADC->Init,HAL_ADC_SING_FLAG);
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	3398      	adds	r3, #152	; 0x98
 8000e74:	2101      	movs	r1, #1
 8000e76:	4618      	mov	r0, r3
 8000e78:	f7ff ff70 	bl	8000d5c <HAL_ADC_SHN_READ>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	81bb      	strh	r3, [r7, #12]
			*ADC_VAL=Res;
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	89ba      	ldrh	r2, [r7, #12]
 8000e84:	801a      	strh	r2, [r3, #0]
			break;
 8000e86:	e018      	b.n	8000eba <HAL_ADC_READ+0x7a>
		case HAL_ADC_SCHN_AUTO_CONV:
			Res=HAL_ADC_SHN_READ(&ADC->Init,HAL_ADC_CONT_FLAG);
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	3398      	adds	r3, #152	; 0x98
 8000e8c:	2100      	movs	r1, #0
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f7ff ff64 	bl	8000d5c <HAL_ADC_SHN_READ>
 8000e94:	4603      	mov	r3, r0
 8000e96:	81bb      	strh	r3, [r7, #12]
			*ADC_VAL=Res;
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	89ba      	ldrh	r2, [r7, #12]
 8000e9c:	801a      	strh	r2, [r3, #0]
			break;
 8000e9e:	e00c      	b.n	8000eba <HAL_ADC_READ+0x7a>
		case HAL_ADC_MCHN_SN_CONV:
			RET=HAL_ADC_MHN_READ(&ADC->Init,HAL_ADC_SING_FLAG,ADC_VAL,ADC->NO_channels);
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	f103 0098 	add.w	r0, r3, #152	; 0x98
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	685b      	ldr	r3, [r3, #4]
 8000eaa:	b2db      	uxtb	r3, r3
 8000eac:	683a      	ldr	r2, [r7, #0]
 8000eae:	2101      	movs	r1, #1
 8000eb0:	f7ff ff82 	bl	8000db8 <HAL_ADC_MHN_READ>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	73fb      	strb	r3, [r7, #15]
			break;
 8000eb8:	bf00      	nop
		case HAL_ADC_MCHN_AUTO_CONV:
			break;
	}
	return RET;
 8000eba:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	3710      	adds	r7, #16
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}

08000ec4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b083      	sub	sp, #12
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	4603      	mov	r3, r0
 8000ecc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ece:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	db0b      	blt.n	8000eee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ed6:	79fb      	ldrb	r3, [r7, #7]
 8000ed8:	f003 021f 	and.w	r2, r3, #31
 8000edc:	4906      	ldr	r1, [pc, #24]	; (8000ef8 <__NVIC_EnableIRQ+0x34>)
 8000ede:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee2:	095b      	lsrs	r3, r3, #5
 8000ee4:	2001      	movs	r0, #1
 8000ee6:	fa00 f202 	lsl.w	r2, r0, r2
 8000eea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000eee:	bf00      	nop
 8000ef0:	370c      	adds	r7, #12
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bc80      	pop	{r7}
 8000ef6:	4770      	bx	lr
 8000ef8:	e000e100 	.word	0xe000e100

08000efc <AFIO_CONFIG>:
#endif

/*Will be updated With Interrupts Soon*/

static void AFIO_CONFIG(GPIO_TypeDef *GPIO_PORT ,uint8_t ORD,uint8_t SH)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b083      	sub	sp, #12
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
 8000f04:	460b      	mov	r3, r1
 8000f06:	70fb      	strb	r3, [r7, #3]
 8000f08:	4613      	mov	r3, r2
 8000f0a:	70bb      	strb	r3, [r7, #2]
	if (GPIO_PORT == GPIOA) {
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	4a23      	ldr	r2, [pc, #140]	; (8000f9c <AFIO_CONFIG+0xa0>)
 8000f10:	4293      	cmp	r3, r2
 8000f12:	d106      	bne.n	8000f22 <AFIO_CONFIG+0x26>
		AFIO->EXTICR[ORD] = (0b000) << SH;
 8000f14:	4a22      	ldr	r2, [pc, #136]	; (8000fa0 <AFIO_CONFIG+0xa4>)
 8000f16:	78fb      	ldrb	r3, [r7, #3]
 8000f18:	3302      	adds	r3, #2
 8000f1a:	2100      	movs	r1, #0
 8000f1c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	} else if (GPIO_PORT == GPIOD) {
		AFIO->EXTICR[ORD] = (0b011) << SH;
	} else if (GPIO_PORT == GPIOE) {
		AFIO->EXTICR[ORD] = (0b100) << SH;
	} else {}
}
 8000f20:	e036      	b.n	8000f90 <AFIO_CONFIG+0x94>
	} else if (GPIO_PORT == GPIOB) {
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	4a1f      	ldr	r2, [pc, #124]	; (8000fa4 <AFIO_CONFIG+0xa8>)
 8000f26:	4293      	cmp	r3, r2
 8000f28:	d109      	bne.n	8000f3e <AFIO_CONFIG+0x42>
		AFIO->EXTICR[ORD] = (0b001) << SH;
 8000f2a:	78bb      	ldrb	r3, [r7, #2]
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	fa02 f103 	lsl.w	r1, r2, r3
 8000f32:	4a1b      	ldr	r2, [pc, #108]	; (8000fa0 <AFIO_CONFIG+0xa4>)
 8000f34:	78fb      	ldrb	r3, [r7, #3]
 8000f36:	3302      	adds	r3, #2
 8000f38:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000f3c:	e028      	b.n	8000f90 <AFIO_CONFIG+0x94>
	} else if (GPIO_PORT == GPIOC) {
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	4a19      	ldr	r2, [pc, #100]	; (8000fa8 <AFIO_CONFIG+0xac>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d109      	bne.n	8000f5a <AFIO_CONFIG+0x5e>
		AFIO->EXTICR[ORD] = (0b010) << SH;
 8000f46:	78bb      	ldrb	r3, [r7, #2]
 8000f48:	2202      	movs	r2, #2
 8000f4a:	fa02 f103 	lsl.w	r1, r2, r3
 8000f4e:	4a14      	ldr	r2, [pc, #80]	; (8000fa0 <AFIO_CONFIG+0xa4>)
 8000f50:	78fb      	ldrb	r3, [r7, #3]
 8000f52:	3302      	adds	r3, #2
 8000f54:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000f58:	e01a      	b.n	8000f90 <AFIO_CONFIG+0x94>
	} else if (GPIO_PORT == GPIOD) {
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	4a13      	ldr	r2, [pc, #76]	; (8000fac <AFIO_CONFIG+0xb0>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d109      	bne.n	8000f76 <AFIO_CONFIG+0x7a>
		AFIO->EXTICR[ORD] = (0b011) << SH;
 8000f62:	78bb      	ldrb	r3, [r7, #2]
 8000f64:	2203      	movs	r2, #3
 8000f66:	fa02 f103 	lsl.w	r1, r2, r3
 8000f6a:	4a0d      	ldr	r2, [pc, #52]	; (8000fa0 <AFIO_CONFIG+0xa4>)
 8000f6c:	78fb      	ldrb	r3, [r7, #3]
 8000f6e:	3302      	adds	r3, #2
 8000f70:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000f74:	e00c      	b.n	8000f90 <AFIO_CONFIG+0x94>
	} else if (GPIO_PORT == GPIOE) {
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	4a0d      	ldr	r2, [pc, #52]	; (8000fb0 <AFIO_CONFIG+0xb4>)
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d108      	bne.n	8000f90 <AFIO_CONFIG+0x94>
		AFIO->EXTICR[ORD] = (0b100) << SH;
 8000f7e:	78bb      	ldrb	r3, [r7, #2]
 8000f80:	2204      	movs	r2, #4
 8000f82:	fa02 f103 	lsl.w	r1, r2, r3
 8000f86:	4a06      	ldr	r2, [pc, #24]	; (8000fa0 <AFIO_CONFIG+0xa4>)
 8000f88:	78fb      	ldrb	r3, [r7, #3]
 8000f8a:	3302      	adds	r3, #2
 8000f8c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000f90:	bf00      	nop
 8000f92:	370c      	adds	r7, #12
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bc80      	pop	{r7}
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
 8000f9c:	40010800 	.word	0x40010800
 8000fa0:	40010000 	.word	0x40010000
 8000fa4:	40010c00 	.word	0x40010c00
 8000fa8:	40011000 	.word	0x40011000
 8000fac:	40011400 	.word	0x40011400
 8000fb0:	40011800 	.word	0x40011800

08000fb4 <HAL_Init_PIN>:

void HAL_Init_PIN(GPIO_TypeDef *GPIO_PORT,GPIO_t *GPIO_PIN)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b086      	sub	sp, #24
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
 8000fbc:	6039      	str	r1, [r7, #0]
	uint32_t Pin_Number=((uint32_t)GPIO_PIN->PIN);
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	689b      	ldr	r3, [r3, #8]
 8000fc2:	613b      	str	r3, [r7, #16]
	uint32_t REG_VAL=0x00;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	617b      	str	r3, [r7, #20]
	volatile uint32_t *CONFIG_REG=NULL;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	60fb      	str	r3, [r7, #12]
	uint32_t RegisterOffset=0x00;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	60bb      	str	r3, [r7, #8]

	/*Enable Perripheral CLK through RCC Registers*/

	if(GPIO_PORT==GPIOA)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	4a86      	ldr	r2, [pc, #536]	; (80011ec <HAL_Init_PIN+0x238>)
 8000fd4:	4293      	cmp	r3, r2
 8000fd6:	d106      	bne.n	8000fe6 <HAL_Init_PIN+0x32>
	{
		__HAL_RCC_GPIOA_EN();
 8000fd8:	4b85      	ldr	r3, [pc, #532]	; (80011f0 <HAL_Init_PIN+0x23c>)
 8000fda:	699b      	ldr	r3, [r3, #24]
 8000fdc:	4a84      	ldr	r2, [pc, #528]	; (80011f0 <HAL_Init_PIN+0x23c>)
 8000fde:	f043 0304 	orr.w	r3, r3, #4
 8000fe2:	6193      	str	r3, [r2, #24]
 8000fe4:	e02a      	b.n	800103c <HAL_Init_PIN+0x88>
	}else if(GPIO_PORT==GPIOB)
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	4a82      	ldr	r2, [pc, #520]	; (80011f4 <HAL_Init_PIN+0x240>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d106      	bne.n	8000ffc <HAL_Init_PIN+0x48>
	{
		__HAL_RCC_GPIOB_EN();
 8000fee:	4b80      	ldr	r3, [pc, #512]	; (80011f0 <HAL_Init_PIN+0x23c>)
 8000ff0:	699b      	ldr	r3, [r3, #24]
 8000ff2:	4a7f      	ldr	r2, [pc, #508]	; (80011f0 <HAL_Init_PIN+0x23c>)
 8000ff4:	f043 0308 	orr.w	r3, r3, #8
 8000ff8:	6193      	str	r3, [r2, #24]
 8000ffa:	e01f      	b.n	800103c <HAL_Init_PIN+0x88>
	}else if(GPIO_PORT==GPIOC)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	4a7e      	ldr	r2, [pc, #504]	; (80011f8 <HAL_Init_PIN+0x244>)
 8001000:	4293      	cmp	r3, r2
 8001002:	d106      	bne.n	8001012 <HAL_Init_PIN+0x5e>
	{
		__HAL_RCC_GPIOC_EN();
 8001004:	4b7a      	ldr	r3, [pc, #488]	; (80011f0 <HAL_Init_PIN+0x23c>)
 8001006:	699b      	ldr	r3, [r3, #24]
 8001008:	4a79      	ldr	r2, [pc, #484]	; (80011f0 <HAL_Init_PIN+0x23c>)
 800100a:	f043 0310 	orr.w	r3, r3, #16
 800100e:	6193      	str	r3, [r2, #24]
 8001010:	e014      	b.n	800103c <HAL_Init_PIN+0x88>
	}else if(GPIO_PORT==GPIOD)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	4a79      	ldr	r2, [pc, #484]	; (80011fc <HAL_Init_PIN+0x248>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d106      	bne.n	8001028 <HAL_Init_PIN+0x74>
	{
		__HAL_RCC_GPIOD_EN();
 800101a:	4b75      	ldr	r3, [pc, #468]	; (80011f0 <HAL_Init_PIN+0x23c>)
 800101c:	699b      	ldr	r3, [r3, #24]
 800101e:	4a74      	ldr	r2, [pc, #464]	; (80011f0 <HAL_Init_PIN+0x23c>)
 8001020:	f043 0320 	orr.w	r3, r3, #32
 8001024:	6193      	str	r3, [r2, #24]
 8001026:	e009      	b.n	800103c <HAL_Init_PIN+0x88>
	}else if(GPIO_PORT==GPIOE)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	4a75      	ldr	r2, [pc, #468]	; (8001200 <HAL_Init_PIN+0x24c>)
 800102c:	4293      	cmp	r3, r2
 800102e:	d105      	bne.n	800103c <HAL_Init_PIN+0x88>
	{
		__HAL_RCC_GPIOE_EN();
 8001030:	4b6f      	ldr	r3, [pc, #444]	; (80011f0 <HAL_Init_PIN+0x23c>)
 8001032:	699b      	ldr	r3, [r3, #24]
 8001034:	4a6e      	ldr	r2, [pc, #440]	; (80011f0 <HAL_Init_PIN+0x23c>)
 8001036:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800103a:	6193      	str	r3, [r2, #24]

	}
	/**Set status of PIN*/
	if( Pin_Number >= 0x00U)
	{
		switch(GPIO_PIN->Mode)
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	3b01      	subs	r3, #1
 8001042:	2b05      	cmp	r3, #5
 8001044:	f200 80a8 	bhi.w	8001198 <HAL_Init_PIN+0x1e4>
 8001048:	a201      	add	r2, pc, #4	; (adr r2, 8001050 <HAL_Init_PIN+0x9c>)
 800104a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800104e:	bf00      	nop
 8001050:	08001069 	.word	0x08001069
 8001054:	08001071 	.word	0x08001071
 8001058:	0800107b 	.word	0x0800107b
 800105c:	08001085 	.word	0x08001085
 8001060:	0800108f 	.word	0x0800108f
 8001064:	08001193 	.word	0x08001193
		{
			case HAL_GPIO_OUT_PP:
				REG_VAL=HAL_GPIO_OUT_PP_MSK+(GPIO_PIN->SPEED);
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	617b      	str	r3, [r7, #20]
				break;
 800106e:	e094      	b.n	800119a <HAL_Init_PIN+0x1e6>
			case HAL_GPIO_OUT_OD:
				REG_VAL=HAL_GPIO_OUT_OD_MSK	+(GPIO_PIN->SPEED);
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	3304      	adds	r3, #4
 8001076:	617b      	str	r3, [r7, #20]
				break;
 8001078:	e08f      	b.n	800119a <HAL_Init_PIN+0x1e6>
			case HAL_GPIO_OUT_ALT_PP:
				REG_VAL=HAL_GPIO_OUT_ALTPP_MSK+(GPIO_PIN->SPEED);
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	3308      	adds	r3, #8
 8001080:	617b      	str	r3, [r7, #20]
				break;
 8001082:	e08a      	b.n	800119a <HAL_Init_PIN+0x1e6>
			case HAL_GPIO_OUT_ALT_OD:
				REG_VAL=HAL_GPIO_OUT_ALTOD_MSK+(GPIO_PIN->SPEED);
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	330c      	adds	r3, #12
 800108a:	617b      	str	r3, [r7, #20]
				break;
 800108c:	e085      	b.n	800119a <HAL_Init_PIN+0x1e6>
			case HAL_GPIO_IN:
					switch(GPIO_PIN->PULL)
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	68db      	ldr	r3, [r3, #12]
 8001092:	2b02      	cmp	r3, #2
 8001094:	d016      	beq.n	80010c4 <HAL_Init_PIN+0x110>
 8001096:	2b02      	cmp	r3, #2
 8001098:	d821      	bhi.n	80010de <HAL_Init_PIN+0x12a>
 800109a:	2b00      	cmp	r3, #0
 800109c:	d002      	beq.n	80010a4 <HAL_Init_PIN+0xf0>
 800109e:	2b01      	cmp	r3, #1
 80010a0:	d003      	beq.n	80010aa <HAL_Init_PIN+0xf6>
 80010a2:	e01c      	b.n	80010de <HAL_Init_PIN+0x12a>
					{
						case HAL_GPIO_NOPULL:
							REG_VAL=HAL_GPIO_IN_MSK+HAL_GPIO_IN_NO_PULL_MSK;
 80010a4:	2304      	movs	r3, #4
 80010a6:	617b      	str	r3, [r7, #20]
							break;
 80010a8:	e019      	b.n	80010de <HAL_Init_PIN+0x12a>
						case HAL_GPIO_PULLUP:
							REG_VAL=HAL_GPIO_IN_MSK+HAL_GPIO_IN_PULLD_MSK;
 80010aa:	230c      	movs	r3, #12
 80010ac:	617b      	str	r3, [r7, #20]
							SET_BIT(GPIO_PORT->BSRR,(uint32_t)GPIO_PIN->PIN);
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	691a      	ldr	r2, [r3, #16]
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	689b      	ldr	r3, [r3, #8]
 80010b6:	2101      	movs	r1, #1
 80010b8:	fa01 f303 	lsl.w	r3, r1, r3
 80010bc:	431a      	orrs	r2, r3
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	611a      	str	r2, [r3, #16]
							break;
 80010c2:	e00c      	b.n	80010de <HAL_Init_PIN+0x12a>
						case HAL_GPIO_PULLDOWN:
							REG_VAL=HAL_GPIO_IN_MSK+HAL_GPIO_IN_PULLUP_MSK;
 80010c4:	230c      	movs	r3, #12
 80010c6:	617b      	str	r3, [r7, #20]
							SET_BIT(GPIO_PORT->BRR,(uint32_t)GPIO_PIN->PIN);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	695a      	ldr	r2, [r3, #20]
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	689b      	ldr	r3, [r3, #8]
 80010d0:	2101      	movs	r1, #1
 80010d2:	fa01 f303 	lsl.w	r3, r1, r3
 80010d6:	431a      	orrs	r2, r3
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	615a      	str	r2, [r3, #20]
							break;
 80010dc:	bf00      	nop
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010de:	b672      	cpsid	i
}
 80010e0:	bf00      	nop
					#if (HAL_GPIO_INT0_EN==EN)||(HAL_GPIO_INT1_EN==EN)||(HAL_GPIO_INT2_EN==EN)||(HAL_GPIO_INT3_EN==EN)\
					||(HAL_GPIO_INT4_EN==EN)||(HAL_GPIO_INT5_EN==EN)||(HAL_GPIO_INT6_EN==EN)||(HAL_GPIO_INT7_EN==EN)\
					||(HAL_GPIO_INT8_EN==EN)||(HAL_GPIO_INT9_EN==EN)||(HAL_GPIO_INT10_EN==EN)||(HAL_GPIO_INT11_EN==EN)\
					||(HAL_GPIO_INT12_EN==EN)||(HAL_GPIO_INT13_EN==EN)||(HAL_GPIO_INT14_EN==EN)||(HAL_GPIO_INT15_EN==EN)
					__disable_irq();
					__HAL_RCC_AFIO_EN();
 80010e2:	4b43      	ldr	r3, [pc, #268]	; (80011f0 <HAL_Init_PIN+0x23c>)
 80010e4:	699b      	ldr	r3, [r3, #24]
 80010e6:	4a42      	ldr	r2, [pc, #264]	; (80011f0 <HAL_Init_PIN+0x23c>)
 80010e8:	f043 0301 	orr.w	r3, r3, #1
 80010ec:	6193      	str	r3, [r2, #24]
 80010ee:	693b      	ldr	r3, [r7, #16]
 80010f0:	2b0f      	cmp	r3, #15
 80010f2:	d84b      	bhi.n	800118c <HAL_Init_PIN+0x1d8>
 80010f4:	a201      	add	r2, pc, #4	; (adr r2, 80010fc <HAL_Init_PIN+0x148>)
 80010f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010fa:	bf00      	nop
 80010fc:	0800113d 	.word	0x0800113d
 8001100:	0800118d 	.word	0x0800118d
 8001104:	0800118d 	.word	0x0800118d
 8001108:	0800118d 	.word	0x0800118d
 800110c:	0800118d 	.word	0x0800118d
 8001110:	0800118d 	.word	0x0800118d
 8001114:	0800118d 	.word	0x0800118d
 8001118:	0800118d 	.word	0x0800118d
 800111c:	0800118d 	.word	0x0800118d
 8001120:	0800118d 	.word	0x0800118d
 8001124:	0800118d 	.word	0x0800118d
 8001128:	0800118d 	.word	0x0800118d
 800112c:	0800118d 	.word	0x0800118d
 8001130:	0800118d 	.word	0x0800118d
 8001134:	0800118d 	.word	0x0800118d
 8001138:	0800118d 	.word	0x0800118d
					/*---------Call back Initiliazed --------*/
					switch(Pin_Number)
					{
						case EXTI_LINE_0:
						#if (HAL_GPIO_INT0_EN==EN)
							AFIO_CONFIG(GPIO_PORT,0,0);
 800113c:	2200      	movs	r2, #0
 800113e:	2100      	movs	r1, #0
 8001140:	6878      	ldr	r0, [r7, #4]
 8001142:	f7ff fedb 	bl	8000efc <AFIO_CONFIG>
							EXTI_CLL0  = GPIO_PIN->EXTI_CLL;
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	695b      	ldr	r3, [r3, #20]
 800114a:	4a2e      	ldr	r2, [pc, #184]	; (8001204 <HAL_Init_PIN+0x250>)
 800114c:	6013      	str	r3, [r2, #0]
							EXTI->IMR |= EXTI_LINE_0_EN;
 800114e:	4b2e      	ldr	r3, [pc, #184]	; (8001208 <HAL_Init_PIN+0x254>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	4a2d      	ldr	r2, [pc, #180]	; (8001208 <HAL_Init_PIN+0x254>)
 8001154:	f043 0301 	orr.w	r3, r3, #1
 8001158:	6013      	str	r3, [r2, #0]
							if(GPIO_PIN ->EDGE_TRIGGER == HAL_GPIO_INT_REDG)
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	7e9b      	ldrb	r3, [r3, #26]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d106      	bne.n	8001170 <HAL_Init_PIN+0x1bc>
								EXTI->RTSR |= EXTI_LINE_0_EN;
 8001162:	4b29      	ldr	r3, [pc, #164]	; (8001208 <HAL_Init_PIN+0x254>)
 8001164:	689b      	ldr	r3, [r3, #8]
 8001166:	4a28      	ldr	r2, [pc, #160]	; (8001208 <HAL_Init_PIN+0x254>)
 8001168:	f043 0301 	orr.w	r3, r3, #1
 800116c:	6093      	str	r3, [r2, #8]
 800116e:	e009      	b.n	8001184 <HAL_Init_PIN+0x1d0>
							else if(GPIO_PIN ->EDGE_TRIGGER == HAL_GPIO_INT_FEDG)
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	7e9b      	ldrb	r3, [r3, #26]
 8001174:	2b01      	cmp	r3, #1
 8001176:	d105      	bne.n	8001184 <HAL_Init_PIN+0x1d0>
								EXTI->FTSR |= EXTI_LINE_0_EN;
 8001178:	4b23      	ldr	r3, [pc, #140]	; (8001208 <HAL_Init_PIN+0x254>)
 800117a:	68db      	ldr	r3, [r3, #12]
 800117c:	4a22      	ldr	r2, [pc, #136]	; (8001208 <HAL_Init_PIN+0x254>)
 800117e:	f043 0301 	orr.w	r3, r3, #1
 8001182:	60d3      	str	r3, [r2, #12]
							NVIC_EnableIRQ(EXTI0_IRQn);
 8001184:	2006      	movs	r0, #6
 8001186:	f7ff fe9d 	bl	8000ec4 <__NVIC_EnableIRQ>
						#endif
 							break;
 800118a:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 800118c:	b662      	cpsie	i
}
 800118e:	bf00      	nop
						#endif
							break;
					}
					__enable_irq();
				#endif
				break;
 8001190:	e003      	b.n	800119a <HAL_Init_PIN+0x1e6>
			case HAL_GPIO_IN_AN:
				REG_VAL=HAL_GPIO_IN_AN_MSK+HAL_GPIO_IN_MSK;
 8001192:	2300      	movs	r3, #0
 8001194:	617b      	str	r3, [r7, #20]
				break;
 8001196:	e000      	b.n	800119a <HAL_Init_PIN+0x1e6>
			default:
				break;
 8001198:	bf00      	nop
		}
		/*Select Either CRH or CRL depending on position of the bit*/
		CONFIG_REG=Pin_Number>8?&GPIO_PORT->CRH:&GPIO_PORT->CRL;
 800119a:	693b      	ldr	r3, [r7, #16]
 800119c:	2b08      	cmp	r3, #8
 800119e:	d902      	bls.n	80011a6 <HAL_Init_PIN+0x1f2>
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	3304      	adds	r3, #4
 80011a4:	e000      	b.n	80011a8 <HAL_Init_PIN+0x1f4>
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	60fb      	str	r3, [r7, #12]

		/*Determine Bit offset if the pin number is greater simply subtract and multiply by 4 or left shift by 2 2^2=4 */
		RegisterOffset=Pin_Number>8?((Pin_Number-8)<<2U):((Pin_Number)<<2U);
 80011aa:	693b      	ldr	r3, [r7, #16]
 80011ac:	2b08      	cmp	r3, #8
 80011ae:	d903      	bls.n	80011b8 <HAL_Init_PIN+0x204>
 80011b0:	693b      	ldr	r3, [r7, #16]
 80011b2:	3b08      	subs	r3, #8
 80011b4:	009b      	lsls	r3, r3, #2
 80011b6:	e001      	b.n	80011bc <HAL_Init_PIN+0x208>
 80011b8:	693b      	ldr	r3, [r7, #16]
 80011ba:	009b      	lsls	r3, r3, #2
 80011bc:	60bb      	str	r3, [r7, #8]

		/*Clear Bits of Certain Pin*/
		(*CONFIG_REG)&=~(CLEAR_MASK_GPIO<<RegisterOffset);
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	681a      	ldr	r2, [r3, #0]
 80011c2:	210f      	movs	r1, #15
 80011c4:	68bb      	ldr	r3, [r7, #8]
 80011c6:	fa01 f303 	lsl.w	r3, r1, r3
 80011ca:	43db      	mvns	r3, r3
 80011cc:	401a      	ands	r2, r3
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	601a      	str	r2, [r3, #0]

		/*Set Bits of Certain Pin*/
		(*CONFIG_REG)|=(REG_VAL<<RegisterOffset);
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	681a      	ldr	r2, [r3, #0]
 80011d6:	6979      	ldr	r1, [r7, #20]
 80011d8:	68bb      	ldr	r3, [r7, #8]
 80011da:	fa01 f303 	lsl.w	r3, r1, r3
 80011de:	431a      	orrs	r2, r3
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	601a      	str	r2, [r3, #0]
	}
}
 80011e4:	bf00      	nop
 80011e6:	3718      	adds	r7, #24
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	40010800 	.word	0x40010800
 80011f0:	40021000 	.word	0x40021000
 80011f4:	40010c00 	.word	0x40010c00
 80011f8:	40011000 	.word	0x40011000
 80011fc:	40011400 	.word	0x40011400
 8001200:	40011800 	.word	0x40011800
 8001204:	200000bc 	.word	0x200000bc
 8001208:	40010400 	.word	0x40010400

0800120c <HAL_Write_PIN>:
{

}

void HAL_Write_PIN(GPIO_TypeDef *GPIO_PORT,GPIO_t *GPIO_PIN,GPIO_STATE State)
{
 800120c:	b480      	push	{r7}
 800120e:	b085      	sub	sp, #20
 8001210:	af00      	add	r7, sp, #0
 8001212:	60f8      	str	r0, [r7, #12]
 8001214:	60b9      	str	r1, [r7, #8]
 8001216:	4613      	mov	r3, r2
 8001218:	71fb      	strb	r3, [r7, #7]
	if (GPIO_PORT != NULL && GPIO_PIN != NULL) {
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d01d      	beq.n	800125c <HAL_Write_PIN+0x50>
 8001220:	68bb      	ldr	r3, [r7, #8]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d01a      	beq.n	800125c <HAL_Write_PIN+0x50>
		switch (State) {
 8001226:	79fb      	ldrb	r3, [r7, #7]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d00c      	beq.n	8001246 <HAL_Write_PIN+0x3a>
 800122c:	2b01      	cmp	r3, #1
 800122e:	d117      	bne.n	8001260 <HAL_Write_PIN+0x54>
		case GPIO_RESET:
			SET_BIT(GPIO_PORT->BRR, (uint32_t )GPIO_PIN->PIN);
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	695a      	ldr	r2, [r3, #20]
 8001234:	68bb      	ldr	r3, [r7, #8]
 8001236:	689b      	ldr	r3, [r3, #8]
 8001238:	2101      	movs	r1, #1
 800123a:	fa01 f303 	lsl.w	r3, r1, r3
 800123e:	431a      	orrs	r2, r3
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	615a      	str	r2, [r3, #20]
			break;
 8001244:	e00d      	b.n	8001262 <HAL_Write_PIN+0x56>
		case GPIO_SET:
			SET_BIT(GPIO_PORT->BSRR, (uint32_t )GPIO_PIN->PIN);
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	691a      	ldr	r2, [r3, #16]
 800124a:	68bb      	ldr	r3, [r7, #8]
 800124c:	689b      	ldr	r3, [r3, #8]
 800124e:	2101      	movs	r1, #1
 8001250:	fa01 f303 	lsl.w	r3, r1, r3
 8001254:	431a      	orrs	r2, r3
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	611a      	str	r2, [r3, #16]
			break;
 800125a:	e002      	b.n	8001262 <HAL_Write_PIN+0x56>
		default:
			break;
		}
	}
 800125c:	bf00      	nop
 800125e:	e000      	b.n	8001262 <HAL_Write_PIN+0x56>
			break;
 8001260:	bf00      	nop
}
 8001262:	bf00      	nop
 8001264:	3714      	adds	r7, #20
 8001266:	46bd      	mov	sp, r7
 8001268:	bc80      	pop	{r7}
 800126a:	4770      	bx	lr

0800126c <HAL_Toggle_PIN>:

void HAL_Toggle_PIN(GPIO_TypeDef *GPIO_PORT,GPIO_t *GPIO_PIN)
{
 800126c:	b480      	push	{r7}
 800126e:	b083      	sub	sp, #12
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
 8001274:	6039      	str	r1, [r7, #0]
	if (GPIO_PORT != NULL && GPIO_PIN != NULL) {
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d00c      	beq.n	8001296 <HAL_Toggle_PIN+0x2a>
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d009      	beq.n	8001296 <HAL_Toggle_PIN+0x2a>
		GPIO_PORT->ODR^=(1U<<(uint32_t)GPIO_PIN->PIN);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	68da      	ldr	r2, [r3, #12]
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	689b      	ldr	r3, [r3, #8]
 800128a:	2101      	movs	r1, #1
 800128c:	fa01 f303 	lsl.w	r3, r1, r3
 8001290:	405a      	eors	r2, r3
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	60da      	str	r2, [r3, #12]
	}
}
 8001296:	bf00      	nop
 8001298:	370c      	adds	r7, #12
 800129a:	46bd      	mov	sp, r7
 800129c:	bc80      	pop	{r7}
 800129e:	4770      	bx	lr

080012a0 <EXTI0_IRQHandler>:
	return Bit_Status;
}

#if HAL_GPIO_INT0_EN==EN
void EXTI0_IRQHandler(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
	EXTI->PR |= (1<<EXTI_LINE_0_EN);
 80012a4:	4b07      	ldr	r3, [pc, #28]	; (80012c4 <EXTI0_IRQHandler+0x24>)
 80012a6:	695b      	ldr	r3, [r3, #20]
 80012a8:	4a06      	ldr	r2, [pc, #24]	; (80012c4 <EXTI0_IRQHandler+0x24>)
 80012aa:	f043 0302 	orr.w	r3, r3, #2
 80012ae:	6153      	str	r3, [r2, #20]
    if(EXTI_CLL0 != NULL)
 80012b0:	4b05      	ldr	r3, [pc, #20]	; (80012c8 <EXTI0_IRQHandler+0x28>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d002      	beq.n	80012be <EXTI0_IRQHandler+0x1e>
	  (*EXTI_CLL0)();
 80012b8:	4b03      	ldr	r3, [pc, #12]	; (80012c8 <EXTI0_IRQHandler+0x28>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4798      	blx	r3
}
 80012be:	bf00      	nop
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	40010400 	.word	0x40010400
 80012c8:	200000bc 	.word	0x200000bc

080012cc <HAL_TIMER_init>:
static void HAL_TIMER_PWM_init(TimerU_D_t *Timer);
static void HAL_TIMER_CHN_CONFIG_GPIO(TIM_TypeDef *TIME,uint32_t CHN,uint8_t Flag);
static void HAL_TIMER_IPCAP_init(TimerU_D_t *Timer);

void HAL_TIMER_init(TimerU_D_t *Timer)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b082      	sub	sp, #8
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
	if(Timer != NULL)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d026      	beq.n	8001328 <HAL_TIMER_init+0x5c>
	{
		switch(Timer->Mode)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	2b07      	cmp	r3, #7
 80012e0:	d823      	bhi.n	800132a <HAL_TIMER_init+0x5e>
 80012e2:	a201      	add	r2, pc, #4	; (adr r2, 80012e8 <HAL_TIMER_init+0x1c>)
 80012e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012e8:	08001309 	.word	0x08001309
 80012ec:	08001309 	.word	0x08001309
 80012f0:	08001309 	.word	0x08001309
 80012f4:	0800132b 	.word	0x0800132b
 80012f8:	08001309 	.word	0x08001309
 80012fc:	08001311 	.word	0x08001311
 8001300:	08001319 	.word	0x08001319
 8001304:	08001321 	.word	0x08001321
		{
			case HAL_TIMER_UP_COUNTER:
			case HAL_TIMER_DOWN_COUNTER:
			case HAL_TIMER_UP_D_COUNTER_D_F:
			case HAL_TIMER_UP_D_COUNTER_U_D_F:
				HAL_TIMER_TIMEBASE_init(Timer);
 8001308:	6878      	ldr	r0, [r7, #4]
 800130a:	f000 f8bb 	bl	8001484 <HAL_TIMER_TIMEBASE_init>
				break;
 800130e:	e00c      	b.n	800132a <HAL_TIMER_init+0x5e>
			case HAL_TIMER_OP_CMP_MODE:
				HAL_TIMER_OUTCMP_Init(Timer);
 8001310:	6878      	ldr	r0, [r7, #4]
 8001312:	f000 f9b3 	bl	800167c <HAL_TIMER_OUTCMP_Init>
				break;
 8001316:	e008      	b.n	800132a <HAL_TIMER_init+0x5e>
			case HAL_TIMER_OP_PWM_MODE:
				HAL_TIMER_PWM_init(Timer);
 8001318:	6878      	ldr	r0, [r7, #4]
 800131a:	f000 fae3 	bl	80018e4 <HAL_TIMER_PWM_init>
				break;
 800131e:	e004      	b.n	800132a <HAL_TIMER_init+0x5e>
			case HAL_TIMER_IP_CAP_MODE:
				HAL_TIMER_IPCAP_init(Timer);
 8001320:	6878      	ldr	r0, [r7, #4]
 8001322:	f000 fbfd 	bl	8001b20 <HAL_TIMER_IPCAP_init>
				break;
 8001326:	e000      	b.n	800132a <HAL_TIMER_init+0x5e>
		}
	}
 8001328:	bf00      	nop
}
 800132a:	bf00      	nop
 800132c:	3708      	adds	r7, #8
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop

08001334 <EN_CLOCK>:

static void EN_CLOCK(TimerU_D_t *Timer)
{
 8001334:	b480      	push	{r7}
 8001336:	b083      	sub	sp, #12
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
	if (Timer->Instance == TIM2)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001344:	d106      	bne.n	8001354 <EN_CLOCK+0x20>
		HAL_RCC_TIMER2_EN();
 8001346:	4b11      	ldr	r3, [pc, #68]	; (800138c <EN_CLOCK+0x58>)
 8001348:	69db      	ldr	r3, [r3, #28]
 800134a:	4a10      	ldr	r2, [pc, #64]	; (800138c <EN_CLOCK+0x58>)
 800134c:	f043 0301 	orr.w	r3, r3, #1
 8001350:	61d3      	str	r3, [r2, #28]
	else if (Timer->Instance == TIM4)
		HAL_RCC_TIMER4_EN();
	else {

	}
}
 8001352:	e016      	b.n	8001382 <EN_CLOCK+0x4e>
	else if (Timer->Instance == TIM3)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a0d      	ldr	r2, [pc, #52]	; (8001390 <EN_CLOCK+0x5c>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d106      	bne.n	800136c <EN_CLOCK+0x38>
		HAL_RCC_TIMER3_EN();
 800135e:	4b0b      	ldr	r3, [pc, #44]	; (800138c <EN_CLOCK+0x58>)
 8001360:	69db      	ldr	r3, [r3, #28]
 8001362:	4a0a      	ldr	r2, [pc, #40]	; (800138c <EN_CLOCK+0x58>)
 8001364:	f043 0302 	orr.w	r3, r3, #2
 8001368:	61d3      	str	r3, [r2, #28]
}
 800136a:	e00a      	b.n	8001382 <EN_CLOCK+0x4e>
	else if (Timer->Instance == TIM4)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a08      	ldr	r2, [pc, #32]	; (8001394 <EN_CLOCK+0x60>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d105      	bne.n	8001382 <EN_CLOCK+0x4e>
		HAL_RCC_TIMER4_EN();
 8001376:	4b05      	ldr	r3, [pc, #20]	; (800138c <EN_CLOCK+0x58>)
 8001378:	69db      	ldr	r3, [r3, #28]
 800137a:	4a04      	ldr	r2, [pc, #16]	; (800138c <EN_CLOCK+0x58>)
 800137c:	f043 0304 	orr.w	r3, r3, #4
 8001380:	61d3      	str	r3, [r2, #28]
}
 8001382:	bf00      	nop
 8001384:	370c      	adds	r7, #12
 8001386:	46bd      	mov	sp, r7
 8001388:	bc80      	pop	{r7}
 800138a:	4770      	bx	lr
 800138c:	40021000 	.word	0x40021000
 8001390:	40000400 	.word	0x40000400
 8001394:	40000800 	.word	0x40000800

08001398 <EN_CLOCK_OP>:

static void EN_CLOCK_OP(TimerU_D_t *Timer ,uint8_t Flag) {
 8001398:	b580      	push	{r7, lr}
 800139a:	b084      	sub	sp, #16
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
 80013a0:	460b      	mov	r3, r1
 80013a2:	70fb      	strb	r3, [r7, #3]
	uint8_t CNT;
	if (Timer->Instance == TIM2) {
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80013ac:	d11d      	bne.n	80013ea <EN_CLOCK_OP+0x52>
		HAL_RCC_TIMER2_EN();
 80013ae:	4b32      	ldr	r3, [pc, #200]	; (8001478 <EN_CLOCK_OP+0xe0>)
 80013b0:	69db      	ldr	r3, [r3, #28]
 80013b2:	4a31      	ldr	r2, [pc, #196]	; (8001478 <EN_CLOCK_OP+0xe0>)
 80013b4:	f043 0301 	orr.w	r3, r3, #1
 80013b8:	61d3      	str	r3, [r2, #28]
		for (CNT = 0; CNT <= Timer->NO_CMP_CHNS - 1; CNT++)
 80013ba:	2300      	movs	r3, #0
 80013bc:	73fb      	strb	r3, [r7, #15]
 80013be:	e00d      	b.n	80013dc <EN_CLOCK_OP+0x44>
			HAL_TIMER_CHN_CONFIG_GPIO(TIM2, Timer->CMP_CHN[CNT],Flag);
 80013c0:	7bfb      	ldrb	r3, [r7, #15]
 80013c2:	687a      	ldr	r2, [r7, #4]
 80013c4:	4413      	add	r3, r2
 80013c6:	7f1b      	ldrb	r3, [r3, #28]
 80013c8:	4619      	mov	r1, r3
 80013ca:	78fb      	ldrb	r3, [r7, #3]
 80013cc:	461a      	mov	r2, r3
 80013ce:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80013d2:	f000 f8c5 	bl	8001560 <HAL_TIMER_CHN_CONFIG_GPIO>
		for (CNT = 0; CNT <= Timer->NO_CMP_CHNS - 1; CNT++)
 80013d6:	7bfb      	ldrb	r3, [r7, #15]
 80013d8:	3301      	adds	r3, #1
 80013da:	73fb      	strb	r3, [r7, #15]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80013e2:	7bfa      	ldrb	r2, [r7, #15]
 80013e4:	429a      	cmp	r2, r3
 80013e6:	d3eb      	bcc.n	80013c0 <EN_CLOCK_OP+0x28>
		for (CNT = 0; CNT <= Timer->NO_CMP_CHNS - 1; CNT++)
			HAL_TIMER_CHN_CONFIG_GPIO(TIM4, Timer->CMP_CHN[CNT],Flag);
	} else {

	}
}
 80013e8:	e042      	b.n	8001470 <EN_CLOCK_OP+0xd8>
	} else if (Timer->Instance == TIM3) {
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4a23      	ldr	r2, [pc, #140]	; (800147c <EN_CLOCK_OP+0xe4>)
 80013f0:	4293      	cmp	r3, r2
 80013f2:	d11c      	bne.n	800142e <EN_CLOCK_OP+0x96>
		HAL_RCC_TIMER3_EN();
 80013f4:	4b20      	ldr	r3, [pc, #128]	; (8001478 <EN_CLOCK_OP+0xe0>)
 80013f6:	69db      	ldr	r3, [r3, #28]
 80013f8:	4a1f      	ldr	r2, [pc, #124]	; (8001478 <EN_CLOCK_OP+0xe0>)
 80013fa:	f043 0302 	orr.w	r3, r3, #2
 80013fe:	61d3      	str	r3, [r2, #28]
		for (CNT = 0; CNT <= Timer->NO_CMP_CHNS - 1; CNT++)
 8001400:	2300      	movs	r3, #0
 8001402:	73fb      	strb	r3, [r7, #15]
 8001404:	e00c      	b.n	8001420 <EN_CLOCK_OP+0x88>
			HAL_TIMER_CHN_CONFIG_GPIO(TIM3, Timer->CMP_CHN[CNT],Flag);
 8001406:	7bfb      	ldrb	r3, [r7, #15]
 8001408:	687a      	ldr	r2, [r7, #4]
 800140a:	4413      	add	r3, r2
 800140c:	7f1b      	ldrb	r3, [r3, #28]
 800140e:	4619      	mov	r1, r3
 8001410:	78fb      	ldrb	r3, [r7, #3]
 8001412:	461a      	mov	r2, r3
 8001414:	4819      	ldr	r0, [pc, #100]	; (800147c <EN_CLOCK_OP+0xe4>)
 8001416:	f000 f8a3 	bl	8001560 <HAL_TIMER_CHN_CONFIG_GPIO>
		for (CNT = 0; CNT <= Timer->NO_CMP_CHNS - 1; CNT++)
 800141a:	7bfb      	ldrb	r3, [r7, #15]
 800141c:	3301      	adds	r3, #1
 800141e:	73fb      	strb	r3, [r7, #15]
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001426:	7bfa      	ldrb	r2, [r7, #15]
 8001428:	429a      	cmp	r2, r3
 800142a:	d3ec      	bcc.n	8001406 <EN_CLOCK_OP+0x6e>
}
 800142c:	e020      	b.n	8001470 <EN_CLOCK_OP+0xd8>
	} else if (Timer->Instance == TIM4) {
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	4a13      	ldr	r2, [pc, #76]	; (8001480 <EN_CLOCK_OP+0xe8>)
 8001434:	4293      	cmp	r3, r2
 8001436:	d11b      	bne.n	8001470 <EN_CLOCK_OP+0xd8>
		HAL_RCC_TIMER4_EN();
 8001438:	4b0f      	ldr	r3, [pc, #60]	; (8001478 <EN_CLOCK_OP+0xe0>)
 800143a:	69db      	ldr	r3, [r3, #28]
 800143c:	4a0e      	ldr	r2, [pc, #56]	; (8001478 <EN_CLOCK_OP+0xe0>)
 800143e:	f043 0304 	orr.w	r3, r3, #4
 8001442:	61d3      	str	r3, [r2, #28]
		for (CNT = 0; CNT <= Timer->NO_CMP_CHNS - 1; CNT++)
 8001444:	2300      	movs	r3, #0
 8001446:	73fb      	strb	r3, [r7, #15]
 8001448:	e00c      	b.n	8001464 <EN_CLOCK_OP+0xcc>
			HAL_TIMER_CHN_CONFIG_GPIO(TIM4, Timer->CMP_CHN[CNT],Flag);
 800144a:	7bfb      	ldrb	r3, [r7, #15]
 800144c:	687a      	ldr	r2, [r7, #4]
 800144e:	4413      	add	r3, r2
 8001450:	7f1b      	ldrb	r3, [r3, #28]
 8001452:	4619      	mov	r1, r3
 8001454:	78fb      	ldrb	r3, [r7, #3]
 8001456:	461a      	mov	r2, r3
 8001458:	4809      	ldr	r0, [pc, #36]	; (8001480 <EN_CLOCK_OP+0xe8>)
 800145a:	f000 f881 	bl	8001560 <HAL_TIMER_CHN_CONFIG_GPIO>
		for (CNT = 0; CNT <= Timer->NO_CMP_CHNS - 1; CNT++)
 800145e:	7bfb      	ldrb	r3, [r7, #15]
 8001460:	3301      	adds	r3, #1
 8001462:	73fb      	strb	r3, [r7, #15]
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800146a:	7bfa      	ldrb	r2, [r7, #15]
 800146c:	429a      	cmp	r2, r3
 800146e:	d3ec      	bcc.n	800144a <EN_CLOCK_OP+0xb2>
}
 8001470:	bf00      	nop
 8001472:	3710      	adds	r7, #16
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}
 8001478:	40021000 	.word	0x40021000
 800147c:	40000400 	.word	0x40000400
 8001480:	40000800 	.word	0x40000800

08001484 <HAL_TIMER_TIMEBASE_init>:

/*---Initilization of Timer in UP-DOWN-UP DOWN Counting As a Time Base---*/
static void HAL_TIMER_TIMEBASE_init(TimerU_D_t *Timer)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b082      	sub	sp, #8
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
	if( Timer != NULL)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d062      	beq.n	8001558 <HAL_TIMER_TIMEBASE_init+0xd4>
	{
		/*----Enable Timer Clock----*/
		EN_CLOCK(Timer);
 8001492:	6878      	ldr	r0, [r7, #4]
 8001494:	f7ff ff4e 	bl	8001334 <EN_CLOCK>
		/*---Select Mode of operation----*/
		switch(Timer->Mode)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	2b04      	cmp	r3, #4
 800149e:	d83a      	bhi.n	8001516 <HAL_TIMER_TIMEBASE_init+0x92>
 80014a0:	a201      	add	r2, pc, #4	; (adr r2, 80014a8 <HAL_TIMER_TIMEBASE_init+0x24>)
 80014a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014a6:	bf00      	nop
 80014a8:	080014bd 	.word	0x080014bd
 80014ac:	080014cf 	.word	0x080014cf
 80014b0:	080014e1 	.word	0x080014e1
 80014b4:	080014f3 	.word	0x080014f3
 80014b8:	08001505 	.word	0x08001505
		{
			case HAL_TIMER_UP_COUNTER:
				Timer->Instance->CR1 &= HAL_TIMER_CNT_U;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	681a      	ldr	r2, [r3, #0]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f022 0210 	bic.w	r2, r2, #16
 80014ca:	601a      	str	r2, [r3, #0]
				break;
 80014cc:	e023      	b.n	8001516 <HAL_TIMER_TIMEBASE_init+0x92>
			case HAL_TIMER_DOWN_COUNTER:
				Timer->Instance->CR1 |= HAL_TIMER_CNT_D;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	681a      	ldr	r2, [r3, #0]
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f042 0210 	orr.w	r2, r2, #16
 80014dc:	601a      	str	r2, [r3, #0]
				break;
 80014de:	e01a      	b.n	8001516 <HAL_TIMER_TIMEBASE_init+0x92>
			case HAL_TIMER_UP_D_COUNTER_D_F:
				Timer->Instance->CR1 |=  HAL_TIMER_CNTR_D;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	681a      	ldr	r2, [r3, #0]
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f042 0220 	orr.w	r2, r2, #32
 80014ee:	601a      	str	r2, [r3, #0]
				break;
 80014f0:	e011      	b.n	8001516 <HAL_TIMER_TIMEBASE_init+0x92>
			case HAL_TIMER_UP_D_COUNTER_U_F:
				Timer->Instance->CR1 |= HAL_TIMER_CNTR_U;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	681a      	ldr	r2, [r3, #0]
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001500:	601a      	str	r2, [r3, #0]
				break;
 8001502:	e008      	b.n	8001516 <HAL_TIMER_TIMEBASE_init+0x92>
			case HAL_TIMER_UP_D_COUNTER_U_D_F:
				Timer->Instance->CR1 |= HAL_TIMER_CNTR_U_D;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	681a      	ldr	r2, [r3, #0]
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8001512:	601a      	str	r2, [r3, #0]
				break;
 8001514:	bf00      	nop
		}
		switch(Timer->SH_EN)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800151a:	2b00      	cmp	r3, #0
 800151c:	d001      	beq.n	8001522 <HAL_TIMER_TIMEBASE_init+0x9e>
 800151e:	2b01      	cmp	r3, #1
		{
			case HAL_TIMER_SHR_EN:
				Timer->Instance->CR1 |= HAL_TIMER_SH_EN;
				break;
			case HAL_TIMER_SHR_DIS:
				break;
 8001520:	e008      	b.n	8001534 <HAL_TIMER_TIMEBASE_init+0xb0>
				Timer->Instance->CR1 |= HAL_TIMER_SH_EN;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	681a      	ldr	r2, [r3, #0]
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001530:	601a      	str	r2, [r3, #0]
				break;
 8001532:	bf00      	nop
		}
		Timer->Instance->ARR = Timer->ARR_val;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	687a      	ldr	r2, [r7, #4]
 800153a:	6892      	ldr	r2, [r2, #8]
 800153c:	62da      	str	r2, [r3, #44]	; 0x2c
		Timer->Instance->PSC = Timer->Prescaler;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	687a      	ldr	r2, [r7, #4]
 8001544:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001546:	629a      	str	r2, [r3, #40]	; 0x28

		Timer->Instance->CR1 |= HAL_TIMER_CNT_EN;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	681a      	ldr	r2, [r3, #0]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f042 0201 	orr.w	r2, r2, #1
 8001556:	601a      	str	r2, [r3, #0]
	}
}
 8001558:	bf00      	nop
 800155a:	3708      	adds	r7, #8
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}

08001560 <HAL_TIMER_CHN_CONFIG_GPIO>:

static void HAL_TIMER_CHN_CONFIG_GPIO(TIM_TypeDef *TIME,uint32_t CHN,uint8_t FLAG)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b08c      	sub	sp, #48	; 0x30
 8001564:	af00      	add	r7, sp, #0
 8001566:	60f8      	str	r0, [r7, #12]
 8001568:	60b9      	str	r1, [r7, #8]
 800156a:	4613      	mov	r3, r2
 800156c:	71fb      	strb	r3, [r7, #7]
	GPIO_t Pin;
	GPIO_TypeDef *GPIO_PORT=NULL;
 800156e:	2300      	movs	r3, #0
 8001570:	62fb      	str	r3, [r7, #44]	; 0x2c

	if(FLAG==0)
 8001572:	79fb      	ldrb	r3, [r7, #7]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d104      	bne.n	8001582 <HAL_TIMER_CHN_CONFIG_GPIO+0x22>
	{
		Pin.Mode  = HAL_GPIO_OUT_ALT_PP;
 8001578:	2303      	movs	r3, #3
 800157a:	613b      	str	r3, [r7, #16]
		Pin.SPEED = HAL_GPIO_SPEED_FREQ_HIGH;
 800157c:	2303      	movs	r3, #3
 800157e:	617b      	str	r3, [r7, #20]
 8001580:	e003      	b.n	800158a <HAL_TIMER_CHN_CONFIG_GPIO+0x2a>
	}
	else{
		Pin.Mode = HAL_GPIO_IN;
 8001582:	2305      	movs	r3, #5
 8001584:	613b      	str	r3, [r7, #16]
		Pin.PULL = HAL_GPIO_NOPULL;
 8001586:	2300      	movs	r3, #0
 8001588:	61fb      	str	r3, [r7, #28]
	}
	if (TIME == TIM2)
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001590:	d11c      	bne.n	80015cc <HAL_TIMER_CHN_CONFIG_GPIO+0x6c>
 8001592:	68bb      	ldr	r3, [r7, #8]
 8001594:	2b03      	cmp	r3, #3
 8001596:	d816      	bhi.n	80015c6 <HAL_TIMER_CHN_CONFIG_GPIO+0x66>
 8001598:	a201      	add	r2, pc, #4	; (adr r2, 80015a0 <HAL_TIMER_CHN_CONFIG_GPIO+0x40>)
 800159a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800159e:	bf00      	nop
 80015a0:	080015b1 	.word	0x080015b1
 80015a4:	080015b7 	.word	0x080015b7
 80015a8:	080015bd 	.word	0x080015bd
 80015ac:	080015c1 	.word	0x080015c1
	{

		switch (CHN) {
			case HAL_TIMER_CMP_OUT_CHN_1:
				Pin.PIN=GPIO_PIN_0;
 80015b0:	2300      	movs	r3, #0
 80015b2:	61bb      	str	r3, [r7, #24]
				break;
 80015b4:	e007      	b.n	80015c6 <HAL_TIMER_CHN_CONFIG_GPIO+0x66>
			case HAL_TIMER_CMP_OUT_CHN_2:
				Pin.PIN=GPIO_PIN_1;
 80015b6:	2301      	movs	r3, #1
 80015b8:	61bb      	str	r3, [r7, #24]
				break;
 80015ba:	e004      	b.n	80015c6 <HAL_TIMER_CHN_CONFIG_GPIO+0x66>
			case HAL_TIMER_CMP_OUT_CHN_3:
				Pin.PIN=GPIO_PIN_2;
 80015bc:	2302      	movs	r3, #2
 80015be:	61bb      	str	r3, [r7, #24]
			case HAL_TIMER_CMP_OUT_CHN_4:
				Pin.PIN=GPIO_PIN_3;
 80015c0:	2303      	movs	r3, #3
 80015c2:	61bb      	str	r3, [r7, #24]
				break;
 80015c4:	bf00      	nop
		}
		GPIO_PORT = GPIOA;
 80015c6:	4b29      	ldr	r3, [pc, #164]	; (800166c <HAL_TIMER_CHN_CONFIG_GPIO+0x10c>)
 80015c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80015ca:	e044      	b.n	8001656 <HAL_TIMER_CHN_CONFIG_GPIO+0xf6>
	}
	else if (TIME == TIM3)
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	4a28      	ldr	r2, [pc, #160]	; (8001670 <HAL_TIMER_CHN_CONFIG_GPIO+0x110>)
 80015d0:	4293      	cmp	r3, r2
 80015d2:	d120      	bne.n	8001616 <HAL_TIMER_CHN_CONFIG_GPIO+0xb6>
 80015d4:	68bb      	ldr	r3, [r7, #8]
 80015d6:	2b03      	cmp	r3, #3
 80015d8:	d83d      	bhi.n	8001656 <HAL_TIMER_CHN_CONFIG_GPIO+0xf6>
 80015da:	a201      	add	r2, pc, #4	; (adr r2, 80015e0 <HAL_TIMER_CHN_CONFIG_GPIO+0x80>)
 80015dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015e0:	080015f1 	.word	0x080015f1
 80015e4:	080015fb 	.word	0x080015fb
 80015e8:	08001605 	.word	0x08001605
 80015ec:	0800160d 	.word	0x0800160d
	{
		switch (CHN) {
			case HAL_TIMER_CMP_OUT_CHN_1:
				GPIO_PORT = GPIOA;
 80015f0:	4b1e      	ldr	r3, [pc, #120]	; (800166c <HAL_TIMER_CHN_CONFIG_GPIO+0x10c>)
 80015f2:	62fb      	str	r3, [r7, #44]	; 0x2c
				Pin.PIN=GPIO_PIN_6;
 80015f4:	2306      	movs	r3, #6
 80015f6:	61bb      	str	r3, [r7, #24]
				break;
 80015f8:	e02d      	b.n	8001656 <HAL_TIMER_CHN_CONFIG_GPIO+0xf6>
			case HAL_TIMER_CMP_OUT_CHN_2:
				GPIO_PORT = GPIOA;
 80015fa:	4b1c      	ldr	r3, [pc, #112]	; (800166c <HAL_TIMER_CHN_CONFIG_GPIO+0x10c>)
 80015fc:	62fb      	str	r3, [r7, #44]	; 0x2c
				Pin.PIN=GPIO_PIN_7;
 80015fe:	2307      	movs	r3, #7
 8001600:	61bb      	str	r3, [r7, #24]
				break;
 8001602:	e028      	b.n	8001656 <HAL_TIMER_CHN_CONFIG_GPIO+0xf6>
			case HAL_TIMER_CMP_OUT_CHN_3:
				GPIO_PORT = GPIOB;
 8001604:	4b1b      	ldr	r3, [pc, #108]	; (8001674 <HAL_TIMER_CHN_CONFIG_GPIO+0x114>)
 8001606:	62fb      	str	r3, [r7, #44]	; 0x2c
				Pin.PIN=GPIO_PIN_0;
 8001608:	2300      	movs	r3, #0
 800160a:	61bb      	str	r3, [r7, #24]
			case HAL_TIMER_CMP_OUT_CHN_4:
				GPIO_PORT = GPIOB;
 800160c:	4b19      	ldr	r3, [pc, #100]	; (8001674 <HAL_TIMER_CHN_CONFIG_GPIO+0x114>)
 800160e:	62fb      	str	r3, [r7, #44]	; 0x2c
				Pin.PIN=GPIO_PIN_1;
 8001610:	2301      	movs	r3, #1
 8001612:	61bb      	str	r3, [r7, #24]
				break;
 8001614:	e01f      	b.n	8001656 <HAL_TIMER_CHN_CONFIG_GPIO+0xf6>
		}
	}
	else if (TIME == TIM4)
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	4a17      	ldr	r2, [pc, #92]	; (8001678 <HAL_TIMER_CHN_CONFIG_GPIO+0x118>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d11b      	bne.n	8001656 <HAL_TIMER_CHN_CONFIG_GPIO+0xf6>
 800161e:	68bb      	ldr	r3, [r7, #8]
 8001620:	2b03      	cmp	r3, #3
 8001622:	d816      	bhi.n	8001652 <HAL_TIMER_CHN_CONFIG_GPIO+0xf2>
 8001624:	a201      	add	r2, pc, #4	; (adr r2, 800162c <HAL_TIMER_CHN_CONFIG_GPIO+0xcc>)
 8001626:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800162a:	bf00      	nop
 800162c:	0800163d 	.word	0x0800163d
 8001630:	08001643 	.word	0x08001643
 8001634:	08001649 	.word	0x08001649
 8001638:	0800164d 	.word	0x0800164d
	{
		switch (CHN) {
			case HAL_TIMER_CMP_OUT_CHN_1:
				Pin.PIN=GPIO_PIN_6;
 800163c:	2306      	movs	r3, #6
 800163e:	61bb      	str	r3, [r7, #24]
				break;
 8001640:	e007      	b.n	8001652 <HAL_TIMER_CHN_CONFIG_GPIO+0xf2>
			case HAL_TIMER_CMP_OUT_CHN_2:
				Pin.PIN=GPIO_PIN_7;
 8001642:	2307      	movs	r3, #7
 8001644:	61bb      	str	r3, [r7, #24]
				break;
 8001646:	e004      	b.n	8001652 <HAL_TIMER_CHN_CONFIG_GPIO+0xf2>
			case HAL_TIMER_CMP_OUT_CHN_3:
				Pin.PIN=GPIO_PIN_8;
 8001648:	2308      	movs	r3, #8
 800164a:	61bb      	str	r3, [r7, #24]
			case HAL_TIMER_CMP_OUT_CHN_4:
				Pin.PIN=GPIO_PIN_9;
 800164c:	2309      	movs	r3, #9
 800164e:	61bb      	str	r3, [r7, #24]
				break;
 8001650:	bf00      	nop
		}
		GPIO_PORT = GPIOB;
 8001652:	4b08      	ldr	r3, [pc, #32]	; (8001674 <HAL_TIMER_CHN_CONFIG_GPIO+0x114>)
 8001654:	62fb      	str	r3, [r7, #44]	; 0x2c
	}
	else {

	}
	HAL_Init_PIN(GPIO_PORT,&Pin);
 8001656:	f107 0310 	add.w	r3, r7, #16
 800165a:	4619      	mov	r1, r3
 800165c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800165e:	f7ff fca9 	bl	8000fb4 <HAL_Init_PIN>
}
 8001662:	bf00      	nop
 8001664:	3730      	adds	r7, #48	; 0x30
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	40010800 	.word	0x40010800
 8001670:	40000400 	.word	0x40000400
 8001674:	40010c00 	.word	0x40010c00
 8001678:	40000800 	.word	0x40000800

0800167c <HAL_TIMER_OUTCMP_Init>:

static void HAL_TIMER_OUTCMP_Init(TimerU_D_t *Timer)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b084      	sub	sp, #16
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
	if(Timer != NULL)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2b00      	cmp	r3, #0
 8001688:	f000 8128 	beq.w	80018dc <HAL_TIMER_OUTCMP_Init+0x260>
	{
		uint8_t CNT=0;
 800168c:	2300      	movs	r3, #0
 800168e:	73fb      	strb	r3, [r7, #15]
		/*----Enable Timer Clock----*/
		EN_CLOCK_OP(Timer,0);
 8001690:	2100      	movs	r1, #0
 8001692:	6878      	ldr	r0, [r7, #4]
 8001694:	f7ff fe80 	bl	8001398 <EN_CLOCK_OP>

		/*-----------Enable Channel----------*/
		for(CNT=0;CNT<=Timer->NO_CMP_CHNS-1;CNT++)
 8001698:	2300      	movs	r3, #0
 800169a:	73fb      	strb	r3, [r7, #15]
 800169c:	e105      	b.n	80018aa <HAL_TIMER_OUTCMP_Init+0x22e>
		{
			switch (Timer->CMP_CHN[CNT]) {
 800169e:	7bfb      	ldrb	r3, [r7, #15]
 80016a0:	687a      	ldr	r2, [r7, #4]
 80016a2:	4413      	add	r3, r2
 80016a4:	7f1b      	ldrb	r3, [r3, #28]
 80016a6:	2b03      	cmp	r3, #3
 80016a8:	f200 80fc 	bhi.w	80018a4 <HAL_TIMER_OUTCMP_Init+0x228>
 80016ac:	a201      	add	r2, pc, #4	; (adr r2, 80016b4 <HAL_TIMER_OUTCMP_Init+0x38>)
 80016ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016b2:	bf00      	nop
 80016b4:	080016c5 	.word	0x080016c5
 80016b8:	0800173d 	.word	0x0800173d
 80016bc:	080017b5 	.word	0x080017b5
 80016c0:	0800182d 	.word	0x0800182d
			case HAL_TIMER_CMP_OUT_CHN_1:
				switch (Timer->CMP_Modes[CNT]) {
 80016c4:	7bfb      	ldrb	r3, [r7, #15]
 80016c6:	687a      	ldr	r2, [r7, #4]
 80016c8:	4413      	add	r3, r2
 80016ca:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016ce:	2b0a      	cmp	r3, #10
 80016d0:	d018      	beq.n	8001704 <HAL_TIMER_OUTCMP_Init+0x88>
 80016d2:	2b0a      	cmp	r3, #10
 80016d4:	dc1f      	bgt.n	8001716 <HAL_TIMER_OUTCMP_Init+0x9a>
 80016d6:	2b08      	cmp	r3, #8
 80016d8:	d002      	beq.n	80016e0 <HAL_TIMER_OUTCMP_Init+0x64>
 80016da:	2b09      	cmp	r3, #9
 80016dc:	d009      	beq.n	80016f2 <HAL_TIMER_OUTCMP_Init+0x76>
 80016de:	e01a      	b.n	8001716 <HAL_TIMER_OUTCMP_Init+0x9a>
					case HAL_TIMER_OUPUT_CMP_MODE_ACTIVE:
						Timer->Instance->CCMR1 |= (0b001<<4);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	699a      	ldr	r2, [r3, #24]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f042 0210 	orr.w	r2, r2, #16
 80016ee:	619a      	str	r2, [r3, #24]
						break;
 80016f0:	e011      	b.n	8001716 <HAL_TIMER_OUTCMP_Init+0x9a>
					case HAL_TIMER_OUPUT_CMP_MODE_TOGGLE:
						Timer->Instance->CCMR1 |= (0b011<<4);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	699a      	ldr	r2, [r3, #24]
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 8001700:	619a      	str	r2, [r3, #24]
						break;
 8001702:	e008      	b.n	8001716 <HAL_TIMER_OUTCMP_Init+0x9a>
					case HAL_TIMER_OUPUT_CMP_MODE_ACTLOW:
						Timer->Instance->CCMR1 |= (0b010<<4);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	699a      	ldr	r2, [r3, #24]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f042 0220 	orr.w	r2, r2, #32
 8001712:	619a      	str	r2, [r3, #24]
						break;
 8001714:	bf00      	nop
				}
				Timer->Instance->CCR1 = (Timer->CCR_val[CNT] & 0xFFFF);
 8001716:	7bfb      	ldrb	r3, [r7, #15]
 8001718:	687a      	ldr	r2, [r7, #4]
 800171a:	3302      	adds	r3, #2
 800171c:	009b      	lsls	r3, r3, #2
 800171e:	4413      	add	r3, r2
 8001720:	685a      	ldr	r2, [r3, #4]
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	b292      	uxth	r2, r2
 8001728:	635a      	str	r2, [r3, #52]	; 0x34
				Timer->Instance->CCER |= (1 << HAL_TIMER_CC1E_POS);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	6a1a      	ldr	r2, [r3, #32]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f042 0201 	orr.w	r2, r2, #1
 8001738:	621a      	str	r2, [r3, #32]
				break;
 800173a:	e0b3      	b.n	80018a4 <HAL_TIMER_OUTCMP_Init+0x228>
			case HAL_TIMER_CMP_OUT_CHN_2:
				switch (Timer->CMP_Modes[CNT]) {
 800173c:	7bfb      	ldrb	r3, [r7, #15]
 800173e:	687a      	ldr	r2, [r7, #4]
 8001740:	4413      	add	r3, r2
 8001742:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001746:	2b0a      	cmp	r3, #10
 8001748:	d018      	beq.n	800177c <HAL_TIMER_OUTCMP_Init+0x100>
 800174a:	2b0a      	cmp	r3, #10
 800174c:	dc1f      	bgt.n	800178e <HAL_TIMER_OUTCMP_Init+0x112>
 800174e:	2b08      	cmp	r3, #8
 8001750:	d002      	beq.n	8001758 <HAL_TIMER_OUTCMP_Init+0xdc>
 8001752:	2b09      	cmp	r3, #9
 8001754:	d009      	beq.n	800176a <HAL_TIMER_OUTCMP_Init+0xee>
 8001756:	e01a      	b.n	800178e <HAL_TIMER_OUTCMP_Init+0x112>
					case HAL_TIMER_OUPUT_CMP_MODE_ACTIVE:
						Timer->Instance->CCMR1 |= (0b001<<12);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	699a      	ldr	r2, [r3, #24]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001766:	619a      	str	r2, [r3, #24]
						break;
 8001768:	e011      	b.n	800178e <HAL_TIMER_OUTCMP_Init+0x112>
					case HAL_TIMER_OUPUT_CMP_MODE_TOGGLE:
						Timer->Instance->CCMR1 |= (0b011<<12);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	699a      	ldr	r2, [r3, #24]
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 8001778:	619a      	str	r2, [r3, #24]
						break;
 800177a:	e008      	b.n	800178e <HAL_TIMER_OUTCMP_Init+0x112>
					case HAL_TIMER_OUPUT_CMP_MODE_ACTLOW:
						Timer->Instance->CCMR1 |= (0b010<<12);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	699a      	ldr	r2, [r3, #24]
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800178a:	619a      	str	r2, [r3, #24]
						break;
 800178c:	bf00      	nop
				}
				Timer->Instance->CCR2 = (Timer->CCR_val[CNT] & 0xFFFF);
 800178e:	7bfb      	ldrb	r3, [r7, #15]
 8001790:	687a      	ldr	r2, [r7, #4]
 8001792:	3302      	adds	r3, #2
 8001794:	009b      	lsls	r3, r3, #2
 8001796:	4413      	add	r3, r2
 8001798:	685a      	ldr	r2, [r3, #4]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	b292      	uxth	r2, r2
 80017a0:	639a      	str	r2, [r3, #56]	; 0x38
				Timer->Instance->CCER |= (1 << HAL_TIMER_CC2E_POS);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	6a1a      	ldr	r2, [r3, #32]
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f042 0210 	orr.w	r2, r2, #16
 80017b0:	621a      	str	r2, [r3, #32]
				break;
 80017b2:	e077      	b.n	80018a4 <HAL_TIMER_OUTCMP_Init+0x228>
			case HAL_TIMER_CMP_OUT_CHN_3:
				switch (Timer->CMP_Modes[CNT]) {
 80017b4:	7bfb      	ldrb	r3, [r7, #15]
 80017b6:	687a      	ldr	r2, [r7, #4]
 80017b8:	4413      	add	r3, r2
 80017ba:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017be:	2b0a      	cmp	r3, #10
 80017c0:	d018      	beq.n	80017f4 <HAL_TIMER_OUTCMP_Init+0x178>
 80017c2:	2b0a      	cmp	r3, #10
 80017c4:	dc1f      	bgt.n	8001806 <HAL_TIMER_OUTCMP_Init+0x18a>
 80017c6:	2b08      	cmp	r3, #8
 80017c8:	d002      	beq.n	80017d0 <HAL_TIMER_OUTCMP_Init+0x154>
 80017ca:	2b09      	cmp	r3, #9
 80017cc:	d009      	beq.n	80017e2 <HAL_TIMER_OUTCMP_Init+0x166>
 80017ce:	e01a      	b.n	8001806 <HAL_TIMER_OUTCMP_Init+0x18a>
					case HAL_TIMER_OUPUT_CMP_MODE_ACTIVE:
						Timer->Instance->CCMR2 |= (0b001<<4);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	69da      	ldr	r2, [r3, #28]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f042 0210 	orr.w	r2, r2, #16
 80017de:	61da      	str	r2, [r3, #28]
						break;
 80017e0:	e011      	b.n	8001806 <HAL_TIMER_OUTCMP_Init+0x18a>
					case HAL_TIMER_OUPUT_CMP_MODE_TOGGLE:
						Timer->Instance->CCMR2 |= (0b011<<4);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	69da      	ldr	r2, [r3, #28]
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 80017f0:	61da      	str	r2, [r3, #28]
						break;
 80017f2:	e008      	b.n	8001806 <HAL_TIMER_OUTCMP_Init+0x18a>
					case HAL_TIMER_OUPUT_CMP_MODE_ACTLOW:
						Timer->Instance->CCMR2 |= (0b010<<4);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	69da      	ldr	r2, [r3, #28]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f042 0220 	orr.w	r2, r2, #32
 8001802:	61da      	str	r2, [r3, #28]
						break;
 8001804:	bf00      	nop
				}
				Timer->Instance->CCR3 = (Timer->CCR_val[CNT] & 0xFFFF);
 8001806:	7bfb      	ldrb	r3, [r7, #15]
 8001808:	687a      	ldr	r2, [r7, #4]
 800180a:	3302      	adds	r3, #2
 800180c:	009b      	lsls	r3, r3, #2
 800180e:	4413      	add	r3, r2
 8001810:	685a      	ldr	r2, [r3, #4]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	b292      	uxth	r2, r2
 8001818:	63da      	str	r2, [r3, #60]	; 0x3c
				Timer->Instance->CCER |= (1 << HAL_TIMER_CC3E_POS);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	6a1a      	ldr	r2, [r3, #32]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001828:	621a      	str	r2, [r3, #32]
				break;
 800182a:	e03b      	b.n	80018a4 <HAL_TIMER_OUTCMP_Init+0x228>
			case HAL_TIMER_CMP_OUT_CHN_4:
				switch (Timer->CMP_Modes[CNT]) {
 800182c:	7bfb      	ldrb	r3, [r7, #15]
 800182e:	687a      	ldr	r2, [r7, #4]
 8001830:	4413      	add	r3, r2
 8001832:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001836:	2b0a      	cmp	r3, #10
 8001838:	d018      	beq.n	800186c <HAL_TIMER_OUTCMP_Init+0x1f0>
 800183a:	2b0a      	cmp	r3, #10
 800183c:	dc1f      	bgt.n	800187e <HAL_TIMER_OUTCMP_Init+0x202>
 800183e:	2b08      	cmp	r3, #8
 8001840:	d002      	beq.n	8001848 <HAL_TIMER_OUTCMP_Init+0x1cc>
 8001842:	2b09      	cmp	r3, #9
 8001844:	d009      	beq.n	800185a <HAL_TIMER_OUTCMP_Init+0x1de>
 8001846:	e01a      	b.n	800187e <HAL_TIMER_OUTCMP_Init+0x202>
					case HAL_TIMER_OUPUT_CMP_MODE_ACTIVE:
						Timer->Instance->CCMR2 |= (0b001<<12);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	69da      	ldr	r2, [r3, #28]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001856:	61da      	str	r2, [r3, #28]
						break;
 8001858:	e011      	b.n	800187e <HAL_TIMER_OUTCMP_Init+0x202>
					case HAL_TIMER_OUPUT_CMP_MODE_TOGGLE:
						Timer->Instance->CCMR2 |= (0b011<<12);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	69da      	ldr	r2, [r3, #28]
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 8001868:	61da      	str	r2, [r3, #28]
						break;
 800186a:	e008      	b.n	800187e <HAL_TIMER_OUTCMP_Init+0x202>
					case HAL_TIMER_OUPUT_CMP_MODE_ACTLOW:
						Timer->Instance->CCMR2 |= (0b010<<12);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	69da      	ldr	r2, [r3, #28]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800187a:	61da      	str	r2, [r3, #28]
						break;
 800187c:	bf00      	nop
				}
				Timer->Instance->CCR4 = (Timer->CCR_val[CNT] & 0xFFFF);
 800187e:	7bfb      	ldrb	r3, [r7, #15]
 8001880:	687a      	ldr	r2, [r7, #4]
 8001882:	3302      	adds	r3, #2
 8001884:	009b      	lsls	r3, r3, #2
 8001886:	4413      	add	r3, r2
 8001888:	685a      	ldr	r2, [r3, #4]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	b292      	uxth	r2, r2
 8001890:	641a      	str	r2, [r3, #64]	; 0x40
				Timer->Instance->CCER |= (1 << HAL_TIMER_CC4E_POS);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	6a1a      	ldr	r2, [r3, #32]
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80018a0:	621a      	str	r2, [r3, #32]
				break;
 80018a2:	bf00      	nop
		for(CNT=0;CNT<=Timer->NO_CMP_CHNS-1;CNT++)
 80018a4:	7bfb      	ldrb	r3, [r7, #15]
 80018a6:	3301      	adds	r3, #1
 80018a8:	73fb      	strb	r3, [r7, #15]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80018b0:	7bfa      	ldrb	r2, [r7, #15]
 80018b2:	429a      	cmp	r2, r3
 80018b4:	f4ff aef3 	bcc.w	800169e <HAL_TIMER_OUTCMP_Init+0x22>
			}
		}
		Timer->Instance->ARR = Timer->ARR_val;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	687a      	ldr	r2, [r7, #4]
 80018be:	6892      	ldr	r2, [r2, #8]
 80018c0:	62da      	str	r2, [r3, #44]	; 0x2c

		Timer->Instance->PSC = Timer->Prescaler;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	687a      	ldr	r2, [r7, #4]
 80018c8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80018ca:	629a      	str	r2, [r3, #40]	; 0x28

		Timer->Instance->CR1 |= HAL_TIMER_CNT_EN;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	681a      	ldr	r2, [r3, #0]
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f042 0201 	orr.w	r2, r2, #1
 80018da:	601a      	str	r2, [r3, #0]
	}
}
 80018dc:	bf00      	nop
 80018de:	3710      	adds	r7, #16
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}

080018e4 <HAL_TIMER_PWM_init>:

static void HAL_TIMER_PWM_init(TimerU_D_t *Timer)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b084      	sub	sp, #16
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
	if(Timer != NULL)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	f000 8110 	beq.w	8001b14 <HAL_TIMER_PWM_init+0x230>
	{
		uint8_t CNT=0;
 80018f4:	2300      	movs	r3, #0
 80018f6:	73fb      	strb	r3, [r7, #15]
		/*--------ENable CLOCK----*/
		EN_CLOCK_OP(Timer,0);
 80018f8:	2100      	movs	r1, #0
 80018fa:	6878      	ldr	r0, [r7, #4]
 80018fc:	f7ff fd4c 	bl	8001398 <EN_CLOCK_OP>

		Timer->Instance->ARR = Timer->ARR_val;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	687a      	ldr	r2, [r7, #4]
 8001906:	6892      	ldr	r2, [r2, #8]
 8001908:	62da      	str	r2, [r3, #44]	; 0x2c
		Timer->Instance->PSC = Timer->Prescaler;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	687a      	ldr	r2, [r7, #4]
 8001910:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001912:	629a      	str	r2, [r3, #40]	; 0x28
		for (CNT = 0; CNT <= Timer->NO_CMP_CHNS - 1; CNT++) {
 8001914:	2300      	movs	r3, #0
 8001916:	73fb      	strb	r3, [r7, #15]
 8001918:	e0ed      	b.n	8001af6 <HAL_TIMER_PWM_init+0x212>
			switch (Timer->CMP_CHN[CNT]) {
 800191a:	7bfb      	ldrb	r3, [r7, #15]
 800191c:	687a      	ldr	r2, [r7, #4]
 800191e:	4413      	add	r3, r2
 8001920:	7f1b      	ldrb	r3, [r3, #28]
 8001922:	2b03      	cmp	r3, #3
 8001924:	f200 80e4 	bhi.w	8001af0 <HAL_TIMER_PWM_init+0x20c>
 8001928:	a201      	add	r2, pc, #4	; (adr r2, 8001930 <HAL_TIMER_PWM_init+0x4c>)
 800192a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800192e:	bf00      	nop
 8001930:	08001941 	.word	0x08001941
 8001934:	080019ad 	.word	0x080019ad
 8001938:	08001a19 	.word	0x08001a19
 800193c:	08001a85 	.word	0x08001a85
			case HAL_TIMER_CMP_OUT_CHN_1:
				switch (Timer->CMP_Modes[CNT]) {
 8001940:	7bfb      	ldrb	r3, [r7, #15]
 8001942:	687a      	ldr	r2, [r7, #4]
 8001944:	4413      	add	r3, r2
 8001946:	f893 3020 	ldrb.w	r3, [r3, #32]
 800194a:	2b0b      	cmp	r3, #11
 800194c:	d002      	beq.n	8001954 <HAL_TIMER_PWM_init+0x70>
 800194e:	2b0c      	cmp	r3, #12
 8001950:	d009      	beq.n	8001966 <HAL_TIMER_PWM_init+0x82>
 8001952:	e011      	b.n	8001978 <HAL_TIMER_PWM_init+0x94>
					case HAL_TIMER_PWM_OUT_MODE1:
						Timer->Instance->CCMR1 |= (0b110 << 4);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	699a      	ldr	r2, [r3, #24]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8001962:	619a      	str	r2, [r3, #24]
						break;
 8001964:	e008      	b.n	8001978 <HAL_TIMER_PWM_init+0x94>
					case HAL_TIMER_PWM_OUT_MODE2:
						Timer->Instance->CCMR1 |= (0b111 << 4);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	699a      	ldr	r2, [r3, #24]
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f042 0270 	orr.w	r2, r2, #112	; 0x70
 8001974:	619a      	str	r2, [r3, #24]
						break;
 8001976:	bf00      	nop
				}
				Timer->Instance->CCR1 = ((Timer->CCR_val[CNT] * Timer->ARR_val)/100);
 8001978:	7bfb      	ldrb	r3, [r7, #15]
 800197a:	687a      	ldr	r2, [r7, #4]
 800197c:	3302      	adds	r3, #2
 800197e:	009b      	lsls	r3, r3, #2
 8001980:	4413      	add	r3, r2
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	687a      	ldr	r2, [r7, #4]
 8001986:	6892      	ldr	r2, [r2, #8]
 8001988:	fb02 f203 	mul.w	r2, r2, r3
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4962      	ldr	r1, [pc, #392]	; (8001b1c <HAL_TIMER_PWM_init+0x238>)
 8001992:	fba1 1202 	umull	r1, r2, r1, r2
 8001996:	0952      	lsrs	r2, r2, #5
 8001998:	635a      	str	r2, [r3, #52]	; 0x34
				Timer->Instance->CCER |= (1 << HAL_TIMER_CC1E_POS);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	6a1a      	ldr	r2, [r3, #32]
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f042 0201 	orr.w	r2, r2, #1
 80019a8:	621a      	str	r2, [r3, #32]
				break;
 80019aa:	e0a1      	b.n	8001af0 <HAL_TIMER_PWM_init+0x20c>
			case HAL_TIMER_CMP_OUT_CHN_2:
				switch (Timer->CMP_Modes[CNT]) {
 80019ac:	7bfb      	ldrb	r3, [r7, #15]
 80019ae:	687a      	ldr	r2, [r7, #4]
 80019b0:	4413      	add	r3, r2
 80019b2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019b6:	2b0b      	cmp	r3, #11
 80019b8:	d002      	beq.n	80019c0 <HAL_TIMER_PWM_init+0xdc>
 80019ba:	2b0c      	cmp	r3, #12
 80019bc:	d009      	beq.n	80019d2 <HAL_TIMER_PWM_init+0xee>
 80019be:	e011      	b.n	80019e4 <HAL_TIMER_PWM_init+0x100>
					case HAL_TIMER_PWM_OUT_MODE1:
						Timer->Instance->CCMR1 |= (0b110 << 12);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	699a      	ldr	r2, [r3, #24]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 80019ce:	619a      	str	r2, [r3, #24]
						break;
 80019d0:	e008      	b.n	80019e4 <HAL_TIMER_PWM_init+0x100>
					case HAL_TIMER_PWM_OUT_MODE2:
						Timer->Instance->CCMR1 |= (0b111 << 12);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	699a      	ldr	r2, [r3, #24]
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f442 42e0 	orr.w	r2, r2, #28672	; 0x7000
 80019e0:	619a      	str	r2, [r3, #24]
						break;
 80019e2:	bf00      	nop
				}
				Timer->Instance->CCR2 = ((Timer->CCR_val[CNT] * Timer->ARR_val)/100);
 80019e4:	7bfb      	ldrb	r3, [r7, #15]
 80019e6:	687a      	ldr	r2, [r7, #4]
 80019e8:	3302      	adds	r3, #2
 80019ea:	009b      	lsls	r3, r3, #2
 80019ec:	4413      	add	r3, r2
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	687a      	ldr	r2, [r7, #4]
 80019f2:	6892      	ldr	r2, [r2, #8]
 80019f4:	fb02 f203 	mul.w	r2, r2, r3
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4947      	ldr	r1, [pc, #284]	; (8001b1c <HAL_TIMER_PWM_init+0x238>)
 80019fe:	fba1 1202 	umull	r1, r2, r1, r2
 8001a02:	0952      	lsrs	r2, r2, #5
 8001a04:	639a      	str	r2, [r3, #56]	; 0x38
				Timer->Instance->CCER |= (1 << HAL_TIMER_CC2E_POS);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	6a1a      	ldr	r2, [r3, #32]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f042 0210 	orr.w	r2, r2, #16
 8001a14:	621a      	str	r2, [r3, #32]
				break;
 8001a16:	e06b      	b.n	8001af0 <HAL_TIMER_PWM_init+0x20c>
			case HAL_TIMER_CMP_OUT_CHN_3:
				switch (Timer->CMP_Modes[CNT]) {
 8001a18:	7bfb      	ldrb	r3, [r7, #15]
 8001a1a:	687a      	ldr	r2, [r7, #4]
 8001a1c:	4413      	add	r3, r2
 8001a1e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a22:	2b0b      	cmp	r3, #11
 8001a24:	d002      	beq.n	8001a2c <HAL_TIMER_PWM_init+0x148>
 8001a26:	2b0c      	cmp	r3, #12
 8001a28:	d009      	beq.n	8001a3e <HAL_TIMER_PWM_init+0x15a>
 8001a2a:	e011      	b.n	8001a50 <HAL_TIMER_PWM_init+0x16c>
					case HAL_TIMER_PWM_OUT_MODE1:
						Timer->Instance->CCMR2 |= (0b110 << 4);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	69da      	ldr	r2, [r3, #28]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8001a3a:	61da      	str	r2, [r3, #28]
						break;
 8001a3c:	e008      	b.n	8001a50 <HAL_TIMER_PWM_init+0x16c>
					case HAL_TIMER_PWM_OUT_MODE2:
						Timer->Instance->CCMR2 |= (0b111 << 4);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	69da      	ldr	r2, [r3, #28]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f042 0270 	orr.w	r2, r2, #112	; 0x70
 8001a4c:	61da      	str	r2, [r3, #28]
						break;
 8001a4e:	bf00      	nop
				}
				Timer->Instance->CCR3 = ((Timer->CCR_val[CNT] * Timer->ARR_val)/100);//duty Cycle
 8001a50:	7bfb      	ldrb	r3, [r7, #15]
 8001a52:	687a      	ldr	r2, [r7, #4]
 8001a54:	3302      	adds	r3, #2
 8001a56:	009b      	lsls	r3, r3, #2
 8001a58:	4413      	add	r3, r2
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	687a      	ldr	r2, [r7, #4]
 8001a5e:	6892      	ldr	r2, [r2, #8]
 8001a60:	fb02 f203 	mul.w	r2, r2, r3
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	492c      	ldr	r1, [pc, #176]	; (8001b1c <HAL_TIMER_PWM_init+0x238>)
 8001a6a:	fba1 1202 	umull	r1, r2, r1, r2
 8001a6e:	0952      	lsrs	r2, r2, #5
 8001a70:	63da      	str	r2, [r3, #60]	; 0x3c
				Timer->Instance->CCER |= (1 << HAL_TIMER_CC3E_POS);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	6a1a      	ldr	r2, [r3, #32]
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001a80:	621a      	str	r2, [r3, #32]
				break;
 8001a82:	e035      	b.n	8001af0 <HAL_TIMER_PWM_init+0x20c>
			case HAL_TIMER_CMP_OUT_CHN_4:
				switch (Timer->CMP_Modes[CNT]) {
 8001a84:	7bfb      	ldrb	r3, [r7, #15]
 8001a86:	687a      	ldr	r2, [r7, #4]
 8001a88:	4413      	add	r3, r2
 8001a8a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a8e:	2b0b      	cmp	r3, #11
 8001a90:	d002      	beq.n	8001a98 <HAL_TIMER_PWM_init+0x1b4>
 8001a92:	2b0c      	cmp	r3, #12
 8001a94:	d009      	beq.n	8001aaa <HAL_TIMER_PWM_init+0x1c6>
 8001a96:	e011      	b.n	8001abc <HAL_TIMER_PWM_init+0x1d8>
					case HAL_TIMER_PWM_OUT_MODE1:
						Timer->Instance->CCMR2 |= (0b110 << 12);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	69da      	ldr	r2, [r3, #28]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 8001aa6:	61da      	str	r2, [r3, #28]
						break;
 8001aa8:	e008      	b.n	8001abc <HAL_TIMER_PWM_init+0x1d8>
					case HAL_TIMER_PWM_OUT_MODE2:
						Timer->Instance->CCMR2 |= (0b111 << 12);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	69da      	ldr	r2, [r3, #28]
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f442 42e0 	orr.w	r2, r2, #28672	; 0x7000
 8001ab8:	61da      	str	r2, [r3, #28]
						break;
 8001aba:	bf00      	nop
				}
				Timer->Instance->CCR4 = ((Timer->CCR_val[CNT] * Timer->ARR_val)/100);
 8001abc:	7bfb      	ldrb	r3, [r7, #15]
 8001abe:	687a      	ldr	r2, [r7, #4]
 8001ac0:	3302      	adds	r3, #2
 8001ac2:	009b      	lsls	r3, r3, #2
 8001ac4:	4413      	add	r3, r2
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	687a      	ldr	r2, [r7, #4]
 8001aca:	6892      	ldr	r2, [r2, #8]
 8001acc:	fb02 f203 	mul.w	r2, r2, r3
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4911      	ldr	r1, [pc, #68]	; (8001b1c <HAL_TIMER_PWM_init+0x238>)
 8001ad6:	fba1 1202 	umull	r1, r2, r1, r2
 8001ada:	0952      	lsrs	r2, r2, #5
 8001adc:	641a      	str	r2, [r3, #64]	; 0x40
				Timer->Instance->CCER |= (1 << HAL_TIMER_CC4E_POS);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	6a1a      	ldr	r2, [r3, #32]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001aec:	621a      	str	r2, [r3, #32]
				break;
 8001aee:	bf00      	nop
		for (CNT = 0; CNT <= Timer->NO_CMP_CHNS - 1; CNT++) {
 8001af0:	7bfb      	ldrb	r3, [r7, #15]
 8001af2:	3301      	adds	r3, #1
 8001af4:	73fb      	strb	r3, [r7, #15]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001afc:	7bfa      	ldrb	r2, [r7, #15]
 8001afe:	429a      	cmp	r2, r3
 8001b00:	f4ff af0b 	bcc.w	800191a <HAL_TIMER_PWM_init+0x36>
			}
		}

		Timer->Instance->CR1 |= HAL_TIMER_CNT_EN;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f042 0201 	orr.w	r2, r2, #1
 8001b12:	601a      	str	r2, [r3, #0]
	}
}
 8001b14:	bf00      	nop
 8001b16:	3710      	adds	r7, #16
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	51eb851f 	.word	0x51eb851f

08001b20 <HAL_TIMER_IPCAP_init>:

static void HAL_TIMER_IPCAP_init(TimerU_D_t *Timer)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b084      	sub	sp, #16
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
	if( Timer != NULL)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	f000 80e2 	beq.w	8001cf4 <HAL_TIMER_IPCAP_init+0x1d4>
	{
		uint8_t CNT=0;
 8001b30:	2300      	movs	r3, #0
 8001b32:	73fb      	strb	r3, [r7, #15]

		EN_CLOCK_OP(Timer,1);
 8001b34:	2101      	movs	r1, #1
 8001b36:	6878      	ldr	r0, [r7, #4]
 8001b38:	f7ff fc2e 	bl	8001398 <EN_CLOCK_OP>

		for (CNT = 0; CNT <= Timer->NO_CMP_CHNS - 1; CNT++) {
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	73fb      	strb	r3, [r7, #15]
 8001b40:	e0c9      	b.n	8001cd6 <HAL_TIMER_IPCAP_init+0x1b6>
			switch (Timer->CMP_CHN[CNT]) {
 8001b42:	7bfb      	ldrb	r3, [r7, #15]
 8001b44:	687a      	ldr	r2, [r7, #4]
 8001b46:	4413      	add	r3, r2
 8001b48:	7f1b      	ldrb	r3, [r3, #28]
 8001b4a:	2b03      	cmp	r3, #3
 8001b4c:	f200 80c0 	bhi.w	8001cd0 <HAL_TIMER_IPCAP_init+0x1b0>
 8001b50:	a201      	add	r2, pc, #4	; (adr r2, 8001b58 <HAL_TIMER_IPCAP_init+0x38>)
 8001b52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b56:	bf00      	nop
 8001b58:	08001b69 	.word	0x08001b69
 8001b5c:	08001bc3 	.word	0x08001bc3
 8001b60:	08001c1d 	.word	0x08001c1d
 8001b64:	08001c77 	.word	0x08001c77
				case HAL_TIMER_CMP_OUT_CHN_1:
					Timer->Instance->CCMR1 |= (0b01 << 0);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	699a      	ldr	r2, [r3, #24]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f042 0201 	orr.w	r2, r2, #1
 8001b76:	619a      	str	r2, [r3, #24]
					switch(Timer->CMP_Modes[CNT])
 8001b78:	7bfb      	ldrb	r3, [r7, #15]
 8001b7a:	687a      	ldr	r2, [r7, #4]
 8001b7c:	4413      	add	r3, r2
 8001b7e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b82:	2b0d      	cmp	r3, #13
 8001b84:	d002      	beq.n	8001b8c <HAL_TIMER_IPCAP_init+0x6c>
 8001b86:	2b0e      	cmp	r3, #14
 8001b88:	d009      	beq.n	8001b9e <HAL_TIMER_IPCAP_init+0x7e>
 8001b8a:	e011      	b.n	8001bb0 <HAL_TIMER_IPCAP_init+0x90>
					{
						case HAL_TIMER_RSEDG_CAPT:
							Timer->Instance->CCER &= (~(1 << HAL_TIMER_CCP1_POS));
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	6a1a      	ldr	r2, [r3, #32]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f022 0202 	bic.w	r2, r2, #2
 8001b9a:	621a      	str	r2, [r3, #32]
							break;
 8001b9c:	e008      	b.n	8001bb0 <HAL_TIMER_IPCAP_init+0x90>
						case HAL_TIMER_FEDG_CAPT:
							Timer->Instance->CCER |= (1 << HAL_TIMER_CCP1_POS);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	6a1a      	ldr	r2, [r3, #32]
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f042 0202 	orr.w	r2, r2, #2
 8001bac:	621a      	str	r2, [r3, #32]
							break;
 8001bae:	bf00      	nop
					}
					Timer->Instance->CCER |= (1 << HAL_TIMER_CC1E_POS);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	6a1a      	ldr	r2, [r3, #32]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f042 0201 	orr.w	r2, r2, #1
 8001bbe:	621a      	str	r2, [r3, #32]
					break;
 8001bc0:	e086      	b.n	8001cd0 <HAL_TIMER_IPCAP_init+0x1b0>
				case HAL_TIMER_CMP_OUT_CHN_2:
					Timer->Instance->CCMR1 |= (0b01 << 8);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	699a      	ldr	r2, [r3, #24]
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001bd0:	619a      	str	r2, [r3, #24]
					switch (Timer->CMP_Modes[CNT]) {
 8001bd2:	7bfb      	ldrb	r3, [r7, #15]
 8001bd4:	687a      	ldr	r2, [r7, #4]
 8001bd6:	4413      	add	r3, r2
 8001bd8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001bdc:	2b0d      	cmp	r3, #13
 8001bde:	d002      	beq.n	8001be6 <HAL_TIMER_IPCAP_init+0xc6>
 8001be0:	2b0e      	cmp	r3, #14
 8001be2:	d009      	beq.n	8001bf8 <HAL_TIMER_IPCAP_init+0xd8>
 8001be4:	e011      	b.n	8001c0a <HAL_TIMER_IPCAP_init+0xea>
						case HAL_TIMER_RSEDG_CAPT:
							Timer->Instance->CCER &= (~(1 << HAL_TIMER_CCP2_POS));
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	6a1a      	ldr	r2, [r3, #32]
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f022 0220 	bic.w	r2, r2, #32
 8001bf4:	621a      	str	r2, [r3, #32]
							break;
 8001bf6:	e008      	b.n	8001c0a <HAL_TIMER_IPCAP_init+0xea>
						case HAL_TIMER_FEDG_CAPT:
							Timer->Instance->CCER |= (1 << HAL_TIMER_CCP2_POS);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	6a1a      	ldr	r2, [r3, #32]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f042 0220 	orr.w	r2, r2, #32
 8001c06:	621a      	str	r2, [r3, #32]
							break;
 8001c08:	bf00      	nop
					}
					Timer->Instance->CCER |= (1 << HAL_TIMER_CC2E_POS);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	6a1a      	ldr	r2, [r3, #32]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f042 0210 	orr.w	r2, r2, #16
 8001c18:	621a      	str	r2, [r3, #32]
					break;
 8001c1a:	e059      	b.n	8001cd0 <HAL_TIMER_IPCAP_init+0x1b0>
				case HAL_TIMER_CMP_OUT_CHN_3:
					Timer->Instance->CCMR2 |= (0b01 << 0);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	69da      	ldr	r2, [r3, #28]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f042 0201 	orr.w	r2, r2, #1
 8001c2a:	61da      	str	r2, [r3, #28]
				switch (Timer->CMP_Modes[CNT]) {
 8001c2c:	7bfb      	ldrb	r3, [r7, #15]
 8001c2e:	687a      	ldr	r2, [r7, #4]
 8001c30:	4413      	add	r3, r2
 8001c32:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c36:	2b0d      	cmp	r3, #13
 8001c38:	d002      	beq.n	8001c40 <HAL_TIMER_IPCAP_init+0x120>
 8001c3a:	2b0e      	cmp	r3, #14
 8001c3c:	d009      	beq.n	8001c52 <HAL_TIMER_IPCAP_init+0x132>
 8001c3e:	e011      	b.n	8001c64 <HAL_TIMER_IPCAP_init+0x144>
						case HAL_TIMER_RSEDG_CAPT:
							Timer->Instance->CCER &= (~(1 << HAL_TIMER_CCP3_POS));
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	6a1a      	ldr	r2, [r3, #32]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001c4e:	621a      	str	r2, [r3, #32]
							break;
 8001c50:	e008      	b.n	8001c64 <HAL_TIMER_IPCAP_init+0x144>
						case HAL_TIMER_FEDG_CAPT:
							Timer->Instance->CCER |= (1 << HAL_TIMER_CCP3_POS);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	6a1a      	ldr	r2, [r3, #32]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c60:	621a      	str	r2, [r3, #32]
							break;
 8001c62:	bf00      	nop
					}
				Timer->Instance->CCER |= (1 << HAL_TIMER_CC3E_POS);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	6a1a      	ldr	r2, [r3, #32]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001c72:	621a      	str	r2, [r3, #32]
					break;
 8001c74:	e02c      	b.n	8001cd0 <HAL_TIMER_IPCAP_init+0x1b0>
				case HAL_TIMER_CMP_OUT_CHN_4:
					Timer->Instance->CCMR2 |= (0b01 << 8);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	69da      	ldr	r2, [r3, #28]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001c84:	61da      	str	r2, [r3, #28]
					switch (Timer->CMP_Modes[CNT]) {
 8001c86:	7bfb      	ldrb	r3, [r7, #15]
 8001c88:	687a      	ldr	r2, [r7, #4]
 8001c8a:	4413      	add	r3, r2
 8001c8c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c90:	2b0d      	cmp	r3, #13
 8001c92:	d002      	beq.n	8001c9a <HAL_TIMER_IPCAP_init+0x17a>
 8001c94:	2b0e      	cmp	r3, #14
 8001c96:	d009      	beq.n	8001cac <HAL_TIMER_IPCAP_init+0x18c>
 8001c98:	e011      	b.n	8001cbe <HAL_TIMER_IPCAP_init+0x19e>
						case HAL_TIMER_RSEDG_CAPT:
							Timer->Instance->CCER &= (~(1 << HAL_TIMER_CCP4_POS));
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	6a1a      	ldr	r2, [r3, #32]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001ca8:	621a      	str	r2, [r3, #32]
							break;
 8001caa:	e008      	b.n	8001cbe <HAL_TIMER_IPCAP_init+0x19e>
						case HAL_TIMER_FEDG_CAPT:
							Timer->Instance->CCER |= (1 << HAL_TIMER_CCP4_POS);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	6a1a      	ldr	r2, [r3, #32]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001cba:	621a      	str	r2, [r3, #32]
							break;
 8001cbc:	bf00      	nop
				}
					Timer->Instance->CCER |= (1 << HAL_TIMER_CC4E_POS);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	6a1a      	ldr	r2, [r3, #32]
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001ccc:	621a      	str	r2, [r3, #32]
				break;
 8001cce:	bf00      	nop
		for (CNT = 0; CNT <= Timer->NO_CMP_CHNS - 1; CNT++) {
 8001cd0:	7bfb      	ldrb	r3, [r7, #15]
 8001cd2:	3301      	adds	r3, #1
 8001cd4:	73fb      	strb	r3, [r7, #15]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001cdc:	7bfa      	ldrb	r2, [r7, #15]
 8001cde:	429a      	cmp	r2, r3
 8001ce0:	f4ff af2f 	bcc.w	8001b42 <HAL_TIMER_IPCAP_init+0x22>
			}
		}
		Timer->Instance->CR1 |= HAL_TIMER_CNT_EN;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	681a      	ldr	r2, [r3, #0]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f042 0201 	orr.w	r2, r2, #1
 8001cf2:	601a      	str	r2, [r3, #0]
	}
}
 8001cf4:	bf00      	nop
 8001cf6:	3710      	adds	r7, #16
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}

08001cfc <__NVIC_EnableIRQ>:
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b083      	sub	sp, #12
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	4603      	mov	r3, r0
 8001d04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	db0b      	blt.n	8001d26 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d0e:	79fb      	ldrb	r3, [r7, #7]
 8001d10:	f003 021f 	and.w	r2, r3, #31
 8001d14:	4906      	ldr	r1, [pc, #24]	; (8001d30 <__NVIC_EnableIRQ+0x34>)
 8001d16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d1a:	095b      	lsrs	r3, r3, #5
 8001d1c:	2001      	movs	r0, #1
 8001d1e:	fa00 f202 	lsl.w	r2, r0, r2
 8001d22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001d26:	bf00      	nop
 8001d28:	370c      	adds	r7, #12
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bc80      	pop	{r7}
 8001d2e:	4770      	bx	lr
 8001d30:	e000e100 	.word	0xe000e100

08001d34 <Baud_Rate_Gen>:
#if HAL_USART_RX_INT3_EN == EN
void (*RX_Callback_USART_3) (void) =NULL;
#endif

static uint16_t Baud_Rate_Gen(uint32_t PERIPH_CLK,uint32_t BAUD_rate)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b083      	sub	sp, #12
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
 8001d3c:	6039      	str	r1, [r7, #0]
	return ((PERIPH_CLK + (BAUD_rate / 2)) / BAUD_rate);
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	085a      	lsrs	r2, r3, #1
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	441a      	add	r2, r3
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d4c:	b29b      	uxth	r3, r3
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	370c      	adds	r7, #12
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bc80      	pop	{r7}
 8001d56:	4770      	bx	lr

08001d58 <PLL_CLK_CALC_S>:

static uint32_t PLL_CLK_CALC_S(uint32_t CLK)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b083      	sub	sp, #12
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
	switch((RCC->CFGR & ((0x0000000F) << 18))>>18)
 8001d60:	4b48      	ldr	r3, [pc, #288]	; (8001e84 <PLL_CLK_CALC_S+0x12c>)
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	0c9b      	lsrs	r3, r3, #18
 8001d66:	f003 030f 	and.w	r3, r3, #15
 8001d6a:	2b0f      	cmp	r3, #15
 8001d6c:	f200 8084 	bhi.w	8001e78 <PLL_CLK_CALC_S+0x120>
 8001d70:	a201      	add	r2, pc, #4	; (adr r2, 8001d78 <PLL_CLK_CALC_S+0x20>)
 8001d72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d76:	bf00      	nop
 8001d78:	08001db9 	.word	0x08001db9
 8001d7c:	08001dc1 	.word	0x08001dc1
 8001d80:	08001dcd 	.word	0x08001dcd
 8001d84:	08001dd5 	.word	0x08001dd5
 8001d88:	08001de1 	.word	0x08001de1
 8001d8c:	08001def 	.word	0x08001def
 8001d90:	08001dfb 	.word	0x08001dfb
 8001d94:	08001e03 	.word	0x08001e03
 8001d98:	08001e0f 	.word	0x08001e0f
 8001d9c:	08001e1d 	.word	0x08001e1d
 8001da0:	08001e2d 	.word	0x08001e2d
 8001da4:	08001e3b 	.word	0x08001e3b
 8001da8:	08001e4b 	.word	0x08001e4b
 8001dac:	08001e59 	.word	0x08001e59
 8001db0:	08001e65 	.word	0x08001e65
 8001db4:	08001e6d 	.word	0x08001e6d
	{
		case 0x00000000U:
			CLK*=2;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	005b      	lsls	r3, r3, #1
 8001dbc:	607b      	str	r3, [r7, #4]
			break;
 8001dbe:	e05b      	b.n	8001e78 <PLL_CLK_CALC_S+0x120>
		case 0x00000001U:
			CLK*=3;
 8001dc0:	687a      	ldr	r2, [r7, #4]
 8001dc2:	4613      	mov	r3, r2
 8001dc4:	005b      	lsls	r3, r3, #1
 8001dc6:	4413      	add	r3, r2
 8001dc8:	607b      	str	r3, [r7, #4]
			break;
 8001dca:	e055      	b.n	8001e78 <PLL_CLK_CALC_S+0x120>
		case 0x00000002U:
			CLK*=4;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	009b      	lsls	r3, r3, #2
 8001dd0:	607b      	str	r3, [r7, #4]
			break;
 8001dd2:	e051      	b.n	8001e78 <PLL_CLK_CALC_S+0x120>
		case 0x00000003U:
			CLK*=5;
 8001dd4:	687a      	ldr	r2, [r7, #4]
 8001dd6:	4613      	mov	r3, r2
 8001dd8:	009b      	lsls	r3, r3, #2
 8001dda:	4413      	add	r3, r2
 8001ddc:	607b      	str	r3, [r7, #4]
			break;
 8001dde:	e04b      	b.n	8001e78 <PLL_CLK_CALC_S+0x120>
		case 0x00000004U:
			CLK*=6;
 8001de0:	687a      	ldr	r2, [r7, #4]
 8001de2:	4613      	mov	r3, r2
 8001de4:	005b      	lsls	r3, r3, #1
 8001de6:	4413      	add	r3, r2
 8001de8:	005b      	lsls	r3, r3, #1
 8001dea:	607b      	str	r3, [r7, #4]
			break;
 8001dec:	e044      	b.n	8001e78 <PLL_CLK_CALC_S+0x120>
		case 0x00000005U:
			CLK*=7;
 8001dee:	687a      	ldr	r2, [r7, #4]
 8001df0:	4613      	mov	r3, r2
 8001df2:	00db      	lsls	r3, r3, #3
 8001df4:	1a9b      	subs	r3, r3, r2
 8001df6:	607b      	str	r3, [r7, #4]
			break;
 8001df8:	e03e      	b.n	8001e78 <PLL_CLK_CALC_S+0x120>
		case 0x00000006U:
			CLK*=8;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	00db      	lsls	r3, r3, #3
 8001dfe:	607b      	str	r3, [r7, #4]
			break;
 8001e00:	e03a      	b.n	8001e78 <PLL_CLK_CALC_S+0x120>
		case 0x00000007U:
			CLK*=9;
 8001e02:	687a      	ldr	r2, [r7, #4]
 8001e04:	4613      	mov	r3, r2
 8001e06:	00db      	lsls	r3, r3, #3
 8001e08:	4413      	add	r3, r2
 8001e0a:	607b      	str	r3, [r7, #4]
			break;
 8001e0c:	e034      	b.n	8001e78 <PLL_CLK_CALC_S+0x120>
		case 0x00000008U:
			CLK*=10;
 8001e0e:	687a      	ldr	r2, [r7, #4]
 8001e10:	4613      	mov	r3, r2
 8001e12:	009b      	lsls	r3, r3, #2
 8001e14:	4413      	add	r3, r2
 8001e16:	005b      	lsls	r3, r3, #1
 8001e18:	607b      	str	r3, [r7, #4]
			break;
 8001e1a:	e02d      	b.n	8001e78 <PLL_CLK_CALC_S+0x120>
		case 0x00000009U:
			CLK*=11;
 8001e1c:	687a      	ldr	r2, [r7, #4]
 8001e1e:	4613      	mov	r3, r2
 8001e20:	009b      	lsls	r3, r3, #2
 8001e22:	4413      	add	r3, r2
 8001e24:	005b      	lsls	r3, r3, #1
 8001e26:	4413      	add	r3, r2
 8001e28:	607b      	str	r3, [r7, #4]
			break;
 8001e2a:	e025      	b.n	8001e78 <PLL_CLK_CALC_S+0x120>
		case 0x0000000AU:
			CLK*=12;
 8001e2c:	687a      	ldr	r2, [r7, #4]
 8001e2e:	4613      	mov	r3, r2
 8001e30:	005b      	lsls	r3, r3, #1
 8001e32:	4413      	add	r3, r2
 8001e34:	009b      	lsls	r3, r3, #2
 8001e36:	607b      	str	r3, [r7, #4]
			break;
 8001e38:	e01e      	b.n	8001e78 <PLL_CLK_CALC_S+0x120>
		case 0x0000000BU:
			CLK*=13;
 8001e3a:	687a      	ldr	r2, [r7, #4]
 8001e3c:	4613      	mov	r3, r2
 8001e3e:	005b      	lsls	r3, r3, #1
 8001e40:	4413      	add	r3, r2
 8001e42:	009b      	lsls	r3, r3, #2
 8001e44:	4413      	add	r3, r2
 8001e46:	607b      	str	r3, [r7, #4]
			break;
 8001e48:	e016      	b.n	8001e78 <PLL_CLK_CALC_S+0x120>
		case 0x0000000CU:
			CLK*=14;
 8001e4a:	687a      	ldr	r2, [r7, #4]
 8001e4c:	4613      	mov	r3, r2
 8001e4e:	00db      	lsls	r3, r3, #3
 8001e50:	1a9b      	subs	r3, r3, r2
 8001e52:	005b      	lsls	r3, r3, #1
 8001e54:	607b      	str	r3, [r7, #4]
			break;
 8001e56:	e00f      	b.n	8001e78 <PLL_CLK_CALC_S+0x120>
		case 0x0000000DU:
			CLK*=15;
 8001e58:	687a      	ldr	r2, [r7, #4]
 8001e5a:	4613      	mov	r3, r2
 8001e5c:	011b      	lsls	r3, r3, #4
 8001e5e:	1a9b      	subs	r3, r3, r2
 8001e60:	607b      	str	r3, [r7, #4]
			break;
 8001e62:	e009      	b.n	8001e78 <PLL_CLK_CALC_S+0x120>
		case 0x0000000EU:
			CLK*=16;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	011b      	lsls	r3, r3, #4
 8001e68:	607b      	str	r3, [r7, #4]
			break;
 8001e6a:	e005      	b.n	8001e78 <PLL_CLK_CALC_S+0x120>
		case 0x0000000FU:
			CLK*=17;
 8001e6c:	687a      	ldr	r2, [r7, #4]
 8001e6e:	4613      	mov	r3, r2
 8001e70:	011b      	lsls	r3, r3, #4
 8001e72:	4413      	add	r3, r2
 8001e74:	607b      	str	r3, [r7, #4]
			break;
 8001e76:	bf00      	nop
	}
	return CLK;
 8001e78:	687b      	ldr	r3, [r7, #4]
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	370c      	adds	r7, #12
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bc80      	pop	{r7}
 8001e82:	4770      	bx	lr
 8001e84:	40021000 	.word	0x40021000

08001e88 <PLL_CLK_CALC>:

uint32_t PLL_CLK_CALC()
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b082      	sub	sp, #8
 8001e8c:	af00      	add	r7, sp, #0
	uint32_t CLK=8000000UL;
 8001e8e:	4b18      	ldr	r3, [pc, #96]	; (8001ef0 <PLL_CLK_CALC+0x68>)
 8001e90:	607b      	str	r3, [r7, #4]
	switch((RCC->CFGR & ((0x00000001) << PLLSRC_POS))>>PLLSRC_POS)
 8001e92:	4b18      	ldr	r3, [pc, #96]	; (8001ef4 <PLL_CLK_CALC+0x6c>)
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	0c1b      	lsrs	r3, r3, #16
 8001e98:	f003 0301 	and.w	r3, r3, #1
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d002      	beq.n	8001ea6 <PLL_CLK_CALC+0x1e>
 8001ea0:	2b01      	cmp	r3, #1
 8001ea2:	d008      	beq.n	8001eb6 <PLL_CLK_CALC+0x2e>
 8001ea4:	e01f      	b.n	8001ee6 <PLL_CLK_CALC+0x5e>
	{
		case 0:
			CLK/=2;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	085b      	lsrs	r3, r3, #1
 8001eaa:	607b      	str	r3, [r7, #4]
			CLK=PLL_CLK_CALC_S(CLK);
 8001eac:	6878      	ldr	r0, [r7, #4]
 8001eae:	f7ff ff53 	bl	8001d58 <PLL_CLK_CALC_S>
 8001eb2:	6078      	str	r0, [r7, #4]
			break;
 8001eb4:	e017      	b.n	8001ee6 <PLL_CLK_CALC+0x5e>
		case 1:
			switch((RCC->CFGR & ((0x00000001) << PLLXTPRE_POS))>>PLLXTPRE_POS)
 8001eb6:	4b0f      	ldr	r3, [pc, #60]	; (8001ef4 <PLL_CLK_CALC+0x6c>)
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	0c5b      	lsrs	r3, r3, #17
 8001ebc:	f003 0301 	and.w	r3, r3, #1
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d002      	beq.n	8001eca <PLL_CLK_CALC+0x42>
 8001ec4:	2b01      	cmp	r3, #1
 8001ec6:	d005      	beq.n	8001ed4 <PLL_CLK_CALC+0x4c>
				case 1:
					CLK/=2;
					CLK=PLL_CLK_CALC_S(CLK);
					break;
			}
			break;
 8001ec8:	e00c      	b.n	8001ee4 <PLL_CLK_CALC+0x5c>
					CLK=PLL_CLK_CALC_S(CLK);
 8001eca:	6878      	ldr	r0, [r7, #4]
 8001ecc:	f7ff ff44 	bl	8001d58 <PLL_CLK_CALC_S>
 8001ed0:	6078      	str	r0, [r7, #4]
					break;
 8001ed2:	e007      	b.n	8001ee4 <PLL_CLK_CALC+0x5c>
					CLK/=2;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	085b      	lsrs	r3, r3, #1
 8001ed8:	607b      	str	r3, [r7, #4]
					CLK=PLL_CLK_CALC_S(CLK);
 8001eda:	6878      	ldr	r0, [r7, #4]
 8001edc:	f7ff ff3c 	bl	8001d58 <PLL_CLK_CALC_S>
 8001ee0:	6078      	str	r0, [r7, #4]
					break;
 8001ee2:	bf00      	nop
			break;
 8001ee4:	bf00      	nop
	}
	return CLK;
 8001ee6:	687b      	ldr	r3, [r7, #4]
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	3708      	adds	r7, #8
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}
 8001ef0:	007a1200 	.word	0x007a1200
 8001ef4:	40021000 	.word	0x40021000

08001ef8 <CLK_CALC>:



uint32_t CLK_CALC(uint32_t CLK,uint8_t SH)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b085      	sub	sp, #20
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
 8001f00:	460b      	mov	r3, r1
 8001f02:	70fb      	strb	r3, [r7, #3]
	uint32_t CLK_RET = CLK;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	60fb      	str	r3, [r7, #12]
	switch ((RCC->CFGR & ((0x0000000F) << 4))>>4) {
 8001f08:	4b3f      	ldr	r3, [pc, #252]	; (8002008 <CLK_CALC+0x110>)
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	091b      	lsrs	r3, r3, #4
 8001f0e:	f003 030f 	and.w	r3, r3, #15
 8001f12:	2b0f      	cmp	r3, #15
 8001f14:	d842      	bhi.n	8001f9c <CLK_CALC+0xa4>
 8001f16:	a201      	add	r2, pc, #4	; (adr r2, 8001f1c <CLK_CALC+0x24>)
 8001f18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f1c:	08001f9d 	.word	0x08001f9d
 8001f20:	08001f9d 	.word	0x08001f9d
 8001f24:	08001f9d 	.word	0x08001f9d
 8001f28:	08001f9d 	.word	0x08001f9d
 8001f2c:	08001f9d 	.word	0x08001f9d
 8001f30:	08001f9d 	.word	0x08001f9d
 8001f34:	08001f9d 	.word	0x08001f9d
 8001f38:	08001f9d 	.word	0x08001f9d
 8001f3c:	08001f5d 	.word	0x08001f5d
 8001f40:	08001f65 	.word	0x08001f65
 8001f44:	08001f6d 	.word	0x08001f6d
 8001f48:	08001f75 	.word	0x08001f75
 8001f4c:	08001f7d 	.word	0x08001f7d
 8001f50:	08001f85 	.word	0x08001f85
 8001f54:	08001f8d 	.word	0x08001f8d
 8001f58:	08001f95 	.word	0x08001f95
		case 0b0110:
		case 0b0111:
			CLK_RET /= 1;
			break;
		case 0b1000:
			CLK_RET /= 2;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	085b      	lsrs	r3, r3, #1
 8001f60:	60fb      	str	r3, [r7, #12]
			break;
 8001f62:	e01b      	b.n	8001f9c <CLK_CALC+0xa4>
		case 0b1001:
			CLK_RET /= 4;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	089b      	lsrs	r3, r3, #2
 8001f68:	60fb      	str	r3, [r7, #12]
			break;
 8001f6a:	e017      	b.n	8001f9c <CLK_CALC+0xa4>
		case 0b1010:
			CLK_RET /= 8;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	08db      	lsrs	r3, r3, #3
 8001f70:	60fb      	str	r3, [r7, #12]
			break;
 8001f72:	e013      	b.n	8001f9c <CLK_CALC+0xa4>
		case 0b1011:
			CLK_RET /= 16;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	091b      	lsrs	r3, r3, #4
 8001f78:	60fb      	str	r3, [r7, #12]
			break;
 8001f7a:	e00f      	b.n	8001f9c <CLK_CALC+0xa4>
		case 0b1100:
			CLK_RET /= 64;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	099b      	lsrs	r3, r3, #6
 8001f80:	60fb      	str	r3, [r7, #12]
			break;
 8001f82:	e00b      	b.n	8001f9c <CLK_CALC+0xa4>
		case 0b1101:
			CLK_RET /= 128;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	09db      	lsrs	r3, r3, #7
 8001f88:	60fb      	str	r3, [r7, #12]
			break;
 8001f8a:	e007      	b.n	8001f9c <CLK_CALC+0xa4>
		case 0b1110:
			CLK_RET /= 256;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	0a1b      	lsrs	r3, r3, #8
 8001f90:	60fb      	str	r3, [r7, #12]
			break;
 8001f92:	e003      	b.n	8001f9c <CLK_CALC+0xa4>
		case 0b1111:
			CLK_RET /= 512;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	0a5b      	lsrs	r3, r3, #9
 8001f98:	60fb      	str	r3, [r7, #12]
			break;
 8001f9a:	bf00      	nop
	}
	switch ((RCC->CFGR & (0x00000007 << SH))>>SH) {
 8001f9c:	4b1a      	ldr	r3, [pc, #104]	; (8002008 <CLK_CALC+0x110>)
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	78fa      	ldrb	r2, [r7, #3]
 8001fa2:	2107      	movs	r1, #7
 8001fa4:	fa01 f202 	lsl.w	r2, r1, r2
 8001fa8:	401a      	ands	r2, r3
 8001faa:	78fb      	ldrb	r3, [r7, #3]
 8001fac:	fa22 f303 	lsr.w	r3, r2, r3
 8001fb0:	2b07      	cmp	r3, #7
 8001fb2:	d823      	bhi.n	8001ffc <CLK_CALC+0x104>
 8001fb4:	a201      	add	r2, pc, #4	; (adr r2, 8001fbc <CLK_CALC+0xc4>)
 8001fb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fba:	bf00      	nop
 8001fbc:	08001ffd 	.word	0x08001ffd
 8001fc0:	08001ffd 	.word	0x08001ffd
 8001fc4:	08001ffd 	.word	0x08001ffd
 8001fc8:	08001ffd 	.word	0x08001ffd
 8001fcc:	08001fdd 	.word	0x08001fdd
 8001fd0:	08001fe5 	.word	0x08001fe5
 8001fd4:	08001fed 	.word	0x08001fed
 8001fd8:	08001ff5 	.word	0x08001ff5
		case 0b010:
		case 0b011:
			CLK_RET /=1;
			break;
		case 0b100:
			CLK_RET /= 2;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	085b      	lsrs	r3, r3, #1
 8001fe0:	60fb      	str	r3, [r7, #12]
			break;
 8001fe2:	e00b      	b.n	8001ffc <CLK_CALC+0x104>
		case 0b101:
			CLK_RET /= 4;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	089b      	lsrs	r3, r3, #2
 8001fe8:	60fb      	str	r3, [r7, #12]
			break;
 8001fea:	e007      	b.n	8001ffc <CLK_CALC+0x104>
		case 0b110:
			CLK_RET /= 8;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	08db      	lsrs	r3, r3, #3
 8001ff0:	60fb      	str	r3, [r7, #12]
			break;
 8001ff2:	e003      	b.n	8001ffc <CLK_CALC+0x104>
		case 0b111:
			CLK_RET /= 16;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	091b      	lsrs	r3, r3, #4
 8001ff8:	60fb      	str	r3, [r7, #12]
			break;
 8001ffa:	bf00      	nop
	}
	return CLK_RET;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	3714      	adds	r7, #20
 8002002:	46bd      	mov	sp, r7
 8002004:	bc80      	pop	{r7}
 8002006:	4770      	bx	lr
 8002008:	40021000 	.word	0x40021000

0800200c <HAL_UART_INT_init>:

static void HAL_UART_INT_init(UART_t *HAL_Uart)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b082      	sub	sp, #8
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8002014:	b672      	cpsid	i
}
 8002016:	bf00      	nop
				if (HAL_Uart->Instance == USART2)
					RX_Callback_USART_2=HAL_Uart->RX_Callback;
				NVIC_EnableIRQ(USART2_IRQn);
			#endif
			#if HAL_USART_RX_INT3_EN == EN
				if (HAL_Uart->Instance == USART3)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a0b      	ldr	r2, [pc, #44]	; (800204c <HAL_UART_INT_init+0x40>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d103      	bne.n	800202a <HAL_UART_INT_init+0x1e>
					RX_Callback_USART_3=HAL_Uart->RX_Callback;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	699b      	ldr	r3, [r3, #24]
 8002026:	4a0a      	ldr	r2, [pc, #40]	; (8002050 <HAL_UART_INT_init+0x44>)
 8002028:	6013      	str	r3, [r2, #0]
				NVIC_EnableIRQ(USART3_IRQn);
 800202a:	2027      	movs	r0, #39	; 0x27
 800202c:	f7ff fe66 	bl	8001cfc <__NVIC_EnableIRQ>
			#endif
			HAL_Uart->Instance->CR1 |= HAL_USART_RXNE_EN;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	68da      	ldr	r2, [r3, #12]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f042 0220 	orr.w	r2, r2, #32
 800203e:	60da      	str	r2, [r3, #12]
  __ASM volatile ("cpsie i" : : : "memory");
 8002040:	b662      	cpsie	i
}
 8002042:	bf00      	nop
			__enable_irq();
#endif
}
 8002044:	bf00      	nop
 8002046:	3708      	adds	r7, #8
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}
 800204c:	40004800 	.word	0x40004800
 8002050:	200000c4 	.word	0x200000c4

08002054 <HAL_UART_Init>:

void HAL_UART_Init(UART_t *HAL_Uart)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b094      	sub	sp, #80	; 0x50
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
	if(HAL_Uart!=NULL)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2b00      	cmp	r3, #0
 8002060:	f000 817c 	beq.w	800235c <HAL_UART_Init+0x308>
	{
		USART_TypeDef *HAL_USART_CONFIG=HAL_Uart->Instance;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	64bb      	str	r3, [r7, #72]	; 0x48
		GPIO_TypeDef  *GPIO_PORT=NULL;
 800206a:	2300      	movs	r3, #0
 800206c:	647b      	str	r3, [r7, #68]	; 0x44
		uint32_t USART_PERIPH_CLK=0;
 800206e:	2300      	movs	r3, #0
 8002070:	64fb      	str	r3, [r7, #76]	; 0x4c
		GPIO_t TX;
		GPIO_t RX;

		Handle=HAL_USART_CONFIG;
 8002072:	4a95      	ldr	r2, [pc, #596]	; (80022c8 <HAL_UART_Init+0x274>)
 8002074:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002076:	6013      	str	r3, [r2, #0]
		TX.PIN=(HAL_Uart->Instance==USART1)?GPIO_PIN_9:(HAL_Uart->Instance==USART2)?GPIO_PIN_2:GPIO_PIN_10;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a93      	ldr	r2, [pc, #588]	; (80022cc <HAL_UART_Init+0x278>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d008      	beq.n	8002094 <HAL_UART_Init+0x40>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4a92      	ldr	r2, [pc, #584]	; (80022d0 <HAL_UART_Init+0x27c>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d101      	bne.n	8002090 <HAL_UART_Init+0x3c>
 800208c:	2302      	movs	r3, #2
 800208e:	e002      	b.n	8002096 <HAL_UART_Init+0x42>
 8002090:	230a      	movs	r3, #10
 8002092:	e000      	b.n	8002096 <HAL_UART_Init+0x42>
 8002094:	2309      	movs	r3, #9
 8002096:	62fb      	str	r3, [r7, #44]	; 0x2c
		RX.PIN=(HAL_Uart->Instance==USART1)?GPIO_PIN_10:(HAL_Uart->Instance==USART2)?GPIO_PIN_3:GPIO_PIN_11;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a8b      	ldr	r2, [pc, #556]	; (80022cc <HAL_UART_Init+0x278>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d008      	beq.n	80020b4 <HAL_UART_Init+0x60>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4a8a      	ldr	r2, [pc, #552]	; (80022d0 <HAL_UART_Init+0x27c>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d101      	bne.n	80020b0 <HAL_UART_Init+0x5c>
 80020ac:	2303      	movs	r3, #3
 80020ae:	e002      	b.n	80020b6 <HAL_UART_Init+0x62>
 80020b0:	230b      	movs	r3, #11
 80020b2:	e000      	b.n	80020b6 <HAL_UART_Init+0x62>
 80020b4:	230a      	movs	r3, #10
 80020b6:	613b      	str	r3, [r7, #16]

		TX.SPEED=HAL_GPIO_SPEED_FREQ_HIGH;
 80020b8:	2303      	movs	r3, #3
 80020ba:	62bb      	str	r3, [r7, #40]	; 0x28
		TX.Mode=HAL_GPIO_OUT_ALT_PP;
 80020bc:	2303      	movs	r3, #3
 80020be:	627b      	str	r3, [r7, #36]	; 0x24
		RX.Mode=HAL_GPIO_IN;
 80020c0:	2305      	movs	r3, #5
 80020c2:	60bb      	str	r3, [r7, #8]
		RX.PULL=HAL_GPIO_NOPULL;
 80020c4:	2300      	movs	r3, #0
 80020c6:	617b      	str	r3, [r7, #20]

		GPIO_PORT=((HAL_USART_CONFIG)==USART1)?GPIOA:((HAL_USART_CONFIG)==USART2)?GPIOA:GPIOB;
 80020c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80020ca:	4a80      	ldr	r2, [pc, #512]	; (80022cc <HAL_UART_Init+0x278>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d007      	beq.n	80020e0 <HAL_UART_Init+0x8c>
 80020d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80020d2:	4a7f      	ldr	r2, [pc, #508]	; (80022d0 <HAL_UART_Init+0x27c>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d101      	bne.n	80020dc <HAL_UART_Init+0x88>
 80020d8:	4b7e      	ldr	r3, [pc, #504]	; (80022d4 <HAL_UART_Init+0x280>)
 80020da:	e002      	b.n	80020e2 <HAL_UART_Init+0x8e>
 80020dc:	4b7e      	ldr	r3, [pc, #504]	; (80022d8 <HAL_UART_Init+0x284>)
 80020de:	e000      	b.n	80020e2 <HAL_UART_Init+0x8e>
 80020e0:	4b7c      	ldr	r3, [pc, #496]	; (80022d4 <HAL_UART_Init+0x280>)
 80020e2:	647b      	str	r3, [r7, #68]	; 0x44

		HAL_USART_CONFIG=HAL_Uart->Instance;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	64bb      	str	r3, [r7, #72]	; 0x48

		/*Enable USART RCC CLOCK*/
		if(HAL_USART_CONFIG == USART1)
 80020ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80020ec:	4a77      	ldr	r2, [pc, #476]	; (80022cc <HAL_UART_Init+0x278>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d106      	bne.n	8002100 <HAL_UART_Init+0xac>
			HAL_RCC_USART1_EN();
 80020f2:	4b7a      	ldr	r3, [pc, #488]	; (80022dc <HAL_UART_Init+0x288>)
 80020f4:	699b      	ldr	r3, [r3, #24]
 80020f6:	4a79      	ldr	r2, [pc, #484]	; (80022dc <HAL_UART_Init+0x288>)
 80020f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020fc:	6193      	str	r3, [r2, #24]
 80020fe:	e014      	b.n	800212a <HAL_UART_Init+0xd6>
		else if(HAL_USART_CONFIG == USART2)
 8002100:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002102:	4a73      	ldr	r2, [pc, #460]	; (80022d0 <HAL_UART_Init+0x27c>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d106      	bne.n	8002116 <HAL_UART_Init+0xc2>
			HAL_RCC_USART2_EN();
 8002108:	4b74      	ldr	r3, [pc, #464]	; (80022dc <HAL_UART_Init+0x288>)
 800210a:	69db      	ldr	r3, [r3, #28]
 800210c:	4a73      	ldr	r2, [pc, #460]	; (80022dc <HAL_UART_Init+0x288>)
 800210e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002112:	61d3      	str	r3, [r2, #28]
 8002114:	e009      	b.n	800212a <HAL_UART_Init+0xd6>
		else if(HAL_USART_CONFIG == USART3)
 8002116:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002118:	4a71      	ldr	r2, [pc, #452]	; (80022e0 <HAL_UART_Init+0x28c>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d105      	bne.n	800212a <HAL_UART_Init+0xd6>
			HAL_RCC_USART3_EN();
 800211e:	4b6f      	ldr	r3, [pc, #444]	; (80022dc <HAL_UART_Init+0x288>)
 8002120:	69db      	ldr	r3, [r3, #28]
 8002122:	4a6e      	ldr	r2, [pc, #440]	; (80022dc <HAL_UART_Init+0x288>)
 8002124:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002128:	61d3      	str	r3, [r2, #28]

		/*Init GPIO Pins TX,RX */
		switch(HAL_Uart->Mode)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	695b      	ldr	r3, [r3, #20]
 800212e:	2b02      	cmp	r3, #2
 8002130:	d013      	beq.n	800215a <HAL_UART_Init+0x106>
 8002132:	2b02      	cmp	r3, #2
 8002134:	d83d      	bhi.n	80021b2 <HAL_UART_Init+0x15e>
 8002136:	2b00      	cmp	r3, #0
 8002138:	d002      	beq.n	8002140 <HAL_UART_Init+0xec>
 800213a:	2b01      	cmp	r3, #1
 800213c:	d01d      	beq.n	800217a <HAL_UART_Init+0x126>
 800213e:	e038      	b.n	80021b2 <HAL_UART_Init+0x15e>
		{
			case HAL_USART_TRANSMIT_MODE:
				HAL_USART_CONFIG->CR1|=HAL_USART_TRANSMIT_EN;
 8002140:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002142:	68db      	ldr	r3, [r3, #12]
 8002144:	f043 0208 	orr.w	r2, r3, #8
 8002148:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800214a:	60da      	str	r2, [r3, #12]
				HAL_Init_PIN(GPIO_PORT,&TX);
 800214c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002150:	4619      	mov	r1, r3
 8002152:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8002154:	f7fe ff2e 	bl	8000fb4 <HAL_Init_PIN>
				break;
 8002158:	e02b      	b.n	80021b2 <HAL_UART_Init+0x15e>
			case HAL_USART_REC_MODE:
				HAL_USART_CONFIG->CR1|=HAL_USART_RECIEVE_EN;
 800215a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800215c:	68db      	ldr	r3, [r3, #12]
 800215e:	f043 0204 	orr.w	r2, r3, #4
 8002162:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002164:	60da      	str	r2, [r3, #12]
				HAL_Init_PIN(GPIO_PORT,&RX);
 8002166:	f107 0308 	add.w	r3, r7, #8
 800216a:	4619      	mov	r1, r3
 800216c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800216e:	f7fe ff21 	bl	8000fb4 <HAL_Init_PIN>
				HAL_UART_INT_init(HAL_Uart);/*Recieve Interrupts */
 8002172:	6878      	ldr	r0, [r7, #4]
 8002174:	f7ff ff4a 	bl	800200c <HAL_UART_INT_init>
				break;
 8002178:	e01b      	b.n	80021b2 <HAL_UART_Init+0x15e>
			case HAL_USART_TRANSMIT_REC_MODE:
				HAL_USART_CONFIG->CR1|=HAL_USART_TRANSMIT_EN;
 800217a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800217c:	68db      	ldr	r3, [r3, #12]
 800217e:	f043 0208 	orr.w	r2, r3, #8
 8002182:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002184:	60da      	str	r2, [r3, #12]
				HAL_USART_CONFIG->CR1|=HAL_USART_RECIEVE_EN;
 8002186:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002188:	68db      	ldr	r3, [r3, #12]
 800218a:	f043 0204 	orr.w	r2, r3, #4
 800218e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002190:	60da      	str	r2, [r3, #12]
				HAL_Init_PIN(GPIO_PORT,&RX);
 8002192:	f107 0308 	add.w	r3, r7, #8
 8002196:	4619      	mov	r1, r3
 8002198:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800219a:	f7fe ff0b 	bl	8000fb4 <HAL_Init_PIN>
				HAL_Init_PIN(GPIO_PORT,&TX);
 800219e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021a2:	4619      	mov	r1, r3
 80021a4:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80021a6:	f7fe ff05 	bl	8000fb4 <HAL_Init_PIN>
				HAL_UART_INT_init(HAL_Uart);/*Recieve Interrupts */
 80021aa:	6878      	ldr	r0, [r7, #4]
 80021ac:	f7ff ff2e 	bl	800200c <HAL_UART_INT_init>
				break;
 80021b0:	bf00      	nop
		}

		switch(HAL_Uart->StopBits)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	68db      	ldr	r3, [r3, #12]
 80021b6:	2b03      	cmp	r3, #3
 80021b8:	d838      	bhi.n	800222c <HAL_UART_Init+0x1d8>
 80021ba:	a201      	add	r2, pc, #4	; (adr r2, 80021c0 <HAL_UART_Init+0x16c>)
 80021bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021c0:	080021d1 	.word	0x080021d1
 80021c4:	080021df 	.word	0x080021df
 80021c8:	080021f9 	.word	0x080021f9
 80021cc:	08002213 	.word	0x08002213
		{
			case HAL_USART_NO_STOP_BITS_1:
				HAL_USART_CONFIG->CR2 &= (~(0x00000003<<HAL_USART_STOP));
 80021d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80021d2:	691b      	ldr	r3, [r3, #16]
 80021d4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80021d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80021da:	611a      	str	r2, [r3, #16]
				break;
 80021dc:	e026      	b.n	800222c <HAL_UART_Init+0x1d8>
			case HAL_USART_NO_STOP_BITS_0_5:
				HAL_USART_CONFIG->CR2 &= (~(0x00000003<<HAL_USART_STOP));
 80021de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80021e0:	691b      	ldr	r3, [r3, #16]
 80021e2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80021e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80021e8:	611a      	str	r2, [r3, #16]
				HAL_USART_CONFIG->CR2 |= HAL_USART_STOP_0_5;
 80021ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80021ec:	691b      	ldr	r3, [r3, #16]
 80021ee:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80021f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80021f4:	611a      	str	r2, [r3, #16]
				break;
 80021f6:	e019      	b.n	800222c <HAL_UART_Init+0x1d8>
			case HAL_USART_NO_STOP_BITS_1_5:
				HAL_USART_CONFIG->CR2 &= (~(0x00000003<<HAL_USART_STOP));
 80021f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80021fa:	691b      	ldr	r3, [r3, #16]
 80021fc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002200:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002202:	611a      	str	r2, [r3, #16]
				HAL_USART_CONFIG->CR2 |= HAL_USART_STOP_1_5;
 8002204:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002206:	691b      	ldr	r3, [r3, #16]
 8002208:	f443 5240 	orr.w	r2, r3, #12288	; 0x3000
 800220c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800220e:	611a      	str	r2, [r3, #16]
				break;
 8002210:	e00c      	b.n	800222c <HAL_UART_Init+0x1d8>
			case HAL_USART_NO_STOP_BITS_2:
				HAL_USART_CONFIG->CR2 &= (~(0x00000003<<HAL_USART_STOP));
 8002212:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002214:	691b      	ldr	r3, [r3, #16]
 8002216:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800221a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800221c:	611a      	str	r2, [r3, #16]
				HAL_USART_CONFIG->CR2 |= HAL_USART_STOP_2;
 800221e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002220:	691b      	ldr	r3, [r3, #16]
 8002222:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002226:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002228:	611a      	str	r2, [r3, #16]
				break;
 800222a:	bf00      	nop
		}

		switch(HAL_Uart->WordLength)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	689b      	ldr	r3, [r3, #8]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d002      	beq.n	800223a <HAL_UART_Init+0x1e6>
 8002234:	2b01      	cmp	r3, #1
 8002236:	d007      	beq.n	8002248 <HAL_UART_Init+0x1f4>
 8002238:	e013      	b.n	8002262 <HAL_UART_Init+0x20e>
		{
			case HAL_USART_WORD_LENGTH_8:
				HAL_USART_CONFIG->CR2 &= HAL_USART_WRDL8_MKS;
 800223a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800223c:	691b      	ldr	r3, [r3, #16]
 800223e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002242:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002244:	611a      	str	r2, [r3, #16]
				break;
 8002246:	e00c      	b.n	8002262 <HAL_UART_Init+0x20e>
			case HAL_USART_WORD_LENGTH_9:
				HAL_USART_CONFIG->CR2 &= (~(0x00000001 << HAL_USART_M));
 8002248:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800224a:	691b      	ldr	r3, [r3, #16]
 800224c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002250:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002252:	611a      	str	r2, [r3, #16]
				HAL_USART_CONFIG->CR2 |= HAL_USART_WRDL9_MSK;
 8002254:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002256:	691b      	ldr	r3, [r3, #16]
 8002258:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800225c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800225e:	611a      	str	r2, [r3, #16]
				break;
 8002260:	bf00      	nop
		}

		switch(HAL_Uart->Parity)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	691b      	ldr	r3, [r3, #16]
 8002266:	2b02      	cmp	r3, #2
 8002268:	d006      	beq.n	8002278 <HAL_UART_Init+0x224>
 800226a:	2b02      	cmp	r3, #2
 800226c:	d825      	bhi.n	80022ba <HAL_UART_Init+0x266>
 800226e:	2b00      	cmp	r3, #0
 8002270:	d016      	beq.n	80022a0 <HAL_UART_Init+0x24c>
 8002272:	2b01      	cmp	r3, #1
 8002274:	d007      	beq.n	8002286 <HAL_UART_Init+0x232>
 8002276:	e020      	b.n	80022ba <HAL_UART_Init+0x266>
		{
			case HAL_USART_NO_PAIRTY:
				HAL_USART_CONFIG->CR1 &= HAL_USART_PARITY_DIS;
 8002278:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800227a:	68db      	ldr	r3, [r3, #12]
 800227c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002280:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002282:	60da      	str	r2, [r3, #12]
				break;
 8002284:	e019      	b.n	80022ba <HAL_UART_Init+0x266>
			case HAL_USART_ODD_PARITY:
				HAL_USART_CONFIG->CR1 |= HAL_USART_PARITY_EN;
 8002286:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002288:	68db      	ldr	r3, [r3, #12]
 800228a:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800228e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002290:	60da      	str	r2, [r3, #12]
				HAL_USART_CONFIG->CR1 |= HAL_USART_PARITY_ODD;
 8002292:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002294:	68db      	ldr	r3, [r3, #12]
 8002296:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800229a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800229c:	60da      	str	r2, [r3, #12]
				break;
 800229e:	e00c      	b.n	80022ba <HAL_UART_Init+0x266>
			case HAL_USART_EVEN_PARITY:
				HAL_USART_CONFIG->CR1 |= HAL_USART_PARITY_EN;
 80022a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80022a2:	68db      	ldr	r3, [r3, #12]
 80022a4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80022a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80022aa:	60da      	str	r2, [r3, #12]
				HAL_USART_CONFIG->CR1 &= HAL_USART_PARITY_EVEN;
 80022ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80022ae:	68db      	ldr	r3, [r3, #12]
 80022b0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80022b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80022b6:	60da      	str	r2, [r3, #12]
				break;
 80022b8:	bf00      	nop
		}
		/*Set Baud Rate of the USART Module should first calculate peripheral frequency which will be implemented later on*/
		uint8_t SH_M=(HAL_Uart->Instance==USART1)?11:8;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4a03      	ldr	r2, [pc, #12]	; (80022cc <HAL_UART_Init+0x278>)
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d10f      	bne.n	80022e4 <HAL_UART_Init+0x290>
 80022c4:	230b      	movs	r3, #11
 80022c6:	e00e      	b.n	80022e6 <HAL_UART_Init+0x292>
 80022c8:	200000c0 	.word	0x200000c0
 80022cc:	40013800 	.word	0x40013800
 80022d0:	40004400 	.word	0x40004400
 80022d4:	40010800 	.word	0x40010800
 80022d8:	40010c00 	.word	0x40010c00
 80022dc:	40021000 	.word	0x40021000
 80022e0:	40004800 	.word	0x40004800
 80022e4:	2308      	movs	r3, #8
 80022e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
		switch((RCC->CFGR & (0x00000003<<2))>>2)
 80022ea:	4b1e      	ldr	r3, [pc, #120]	; (8002364 <HAL_UART_Init+0x310>)
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	089b      	lsrs	r3, r3, #2
 80022f0:	f003 0303 	and.w	r3, r3, #3
 80022f4:	2b02      	cmp	r3, #2
 80022f6:	d016      	beq.n	8002326 <HAL_UART_Init+0x2d2>
 80022f8:	2b02      	cmp	r3, #2
 80022fa:	d81f      	bhi.n	800233c <HAL_UART_Init+0x2e8>
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d002      	beq.n	8002306 <HAL_UART_Init+0x2b2>
 8002300:	2b01      	cmp	r3, #1
 8002302:	d008      	beq.n	8002316 <HAL_UART_Init+0x2c2>
 8002304:	e01a      	b.n	800233c <HAL_UART_Init+0x2e8>
		{
			case 0x00000000UL:/*----HSI----*/
				USART_PERIPH_CLK=CLK_CALC(8000000UL,SH_M);
 8002306:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800230a:	4619      	mov	r1, r3
 800230c:	4816      	ldr	r0, [pc, #88]	; (8002368 <HAL_UART_Init+0x314>)
 800230e:	f7ff fdf3 	bl	8001ef8 <CLK_CALC>
 8002312:	64f8      	str	r0, [r7, #76]	; 0x4c
				break;
 8002314:	e012      	b.n	800233c <HAL_UART_Init+0x2e8>
			case 0x00000001UL:/*---HSR----*/
				USART_PERIPH_CLK=CLK_CALC(8000000UL,SH_M);
 8002316:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800231a:	4619      	mov	r1, r3
 800231c:	4812      	ldr	r0, [pc, #72]	; (8002368 <HAL_UART_Init+0x314>)
 800231e:	f7ff fdeb 	bl	8001ef8 <CLK_CALC>
 8002322:	64f8      	str	r0, [r7, #76]	; 0x4c
				break;
 8002324:	e00a      	b.n	800233c <HAL_UART_Init+0x2e8>
			case 0x00000002UL:/*---PLL----*/
				USART_PERIPH_CLK=PLL_CLK_CALC();
 8002326:	f7ff fdaf 	bl	8001e88 <PLL_CLK_CALC>
 800232a:	64f8      	str	r0, [r7, #76]	; 0x4c
				USART_PERIPH_CLK=CLK_CALC(USART_PERIPH_CLK,SH_M);
 800232c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8002330:	4619      	mov	r1, r3
 8002332:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8002334:	f7ff fde0 	bl	8001ef8 <CLK_CALC>
 8002338:	64f8      	str	r0, [r7, #76]	; 0x4c
				break;
 800233a:	bf00      	nop
		}
		HAL_USART_CONFIG->BRR=Baud_Rate_Gen(USART_PERIPH_CLK,HAL_Uart->BaudRate);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	4619      	mov	r1, r3
 8002342:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8002344:	f7ff fcf6 	bl	8001d34 <Baud_Rate_Gen>
 8002348:	4603      	mov	r3, r0
 800234a:	461a      	mov	r2, r3
 800234c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800234e:	609a      	str	r2, [r3, #8]
		HAL_USART_CONFIG->CR1|=HAL_USART_UEEN_MSK;
 8002350:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002352:	68db      	ldr	r3, [r3, #12]
 8002354:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002358:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800235a:	60da      	str	r2, [r3, #12]
	}
}
 800235c:	bf00      	nop
 800235e:	3750      	adds	r7, #80	; 0x50
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}
 8002364:	40021000 	.word	0x40021000
 8002368:	007a1200 	.word	0x007a1200

0800236c <HAL_UART_Byte>:

void HAL_UART_Byte(USART_TypeDef *Handle,uint32_t data)
{
 800236c:	b480      	push	{r7}
 800236e:	b083      	sub	sp, #12
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
 8002374:	6039      	str	r1, [r7, #0]
	if(Handle!=NULL)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d00b      	beq.n	8002394 <HAL_UART_Byte+0x28>
	{
		while(!(READ_BIT(Handle->SR,HAL_USART_TXE)));
 800237c:	bf00      	nop
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	09db      	lsrs	r3, r3, #7
 8002384:	f003 0301 	and.w	r3, r3, #1
 8002388:	2b00      	cmp	r3, #0
 800238a:	d0f8      	beq.n	800237e <HAL_UART_Byte+0x12>
		Handle->DR = data&0xFF;
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	b2da      	uxtb	r2, r3
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	605a      	str	r2, [r3, #4]
	}
}
 8002394:	bf00      	nop
 8002396:	370c      	adds	r7, #12
 8002398:	46bd      	mov	sp, r7
 800239a:	bc80      	pop	{r7}
 800239c:	4770      	bx	lr

0800239e <HAL_UART_Buffer>:

void HAL_UART_Buffer(USART_TypeDef *Handle,int8_t * Buffer,uint32_t Size)
{
 800239e:	b580      	push	{r7, lr}
 80023a0:	b086      	sub	sp, #24
 80023a2:	af00      	add	r7, sp, #0
 80023a4:	60f8      	str	r0, [r7, #12]
 80023a6:	60b9      	str	r1, [r7, #8]
 80023a8:	607a      	str	r2, [r7, #4]
	if (Handle != NULL && Buffer!=NULL) {
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d01c      	beq.n	80023ea <HAL_UART_Buffer+0x4c>
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d019      	beq.n	80023ea <HAL_UART_Buffer+0x4c>
		uint32_t Byte_Tx=0;
 80023b6:	2300      	movs	r3, #0
 80023b8:	617b      	str	r3, [r7, #20]
		while(Byte_Tx<=Size-1)
 80023ba:	e00b      	b.n	80023d4 <HAL_UART_Buffer+0x36>
		{
			HAL_UART_Byte(Handle,*(Buffer+Byte_Tx));
 80023bc:	68ba      	ldr	r2, [r7, #8]
 80023be:	697b      	ldr	r3, [r7, #20]
 80023c0:	4413      	add	r3, r2
 80023c2:	f993 3000 	ldrsb.w	r3, [r3]
 80023c6:	4619      	mov	r1, r3
 80023c8:	68f8      	ldr	r0, [r7, #12]
 80023ca:	f7ff ffcf 	bl	800236c <HAL_UART_Byte>
			Byte_Tx++;
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	3301      	adds	r3, #1
 80023d2:	617b      	str	r3, [r7, #20]
		while(Byte_Tx<=Size-1)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	3b01      	subs	r3, #1
 80023d8:	697a      	ldr	r2, [r7, #20]
 80023da:	429a      	cmp	r2, r3
 80023dc:	d9ee      	bls.n	80023bc <HAL_UART_Buffer+0x1e>
		}
		Handle->SR &= HAL_USART_TXE_CLEAR;//Clear TXE flag
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	601a      	str	r2, [r3, #0]
	}
}
 80023ea:	bf00      	nop
 80023ec:	3718      	adds	r7, #24
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}
	...

080023f4 <USART3_IRQHandler>:
}
#endif

#if HAL_USART_RX_INT3_EN == EN
void USART3_IRQHandler(void)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	af00      	add	r7, sp, #0
	if(USART3->SR & HAL_USART_RXNE_EN)
 80023f8:	4b08      	ldr	r3, [pc, #32]	; (800241c <USART3_IRQHandler+0x28>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f003 0320 	and.w	r3, r3, #32
 8002400:	2b00      	cmp	r3, #0
 8002402:	d008      	beq.n	8002416 <USART3_IRQHandler+0x22>
		if(USART3->SR & HAL_USART_RXNE_EN)
 8002404:	4b05      	ldr	r3, [pc, #20]	; (800241c <USART3_IRQHandler+0x28>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f003 0320 	and.w	r3, r3, #32
 800240c:	2b00      	cmp	r3, #0
 800240e:	d002      	beq.n	8002416 <USART3_IRQHandler+0x22>
			RX_Callback_USART_3();
 8002410:	4b03      	ldr	r3, [pc, #12]	; (8002420 <USART3_IRQHandler+0x2c>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4798      	blx	r3
}
 8002416:	bf00      	nop
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	40004800 	.word	0x40004800
 8002420:	200000c4 	.word	0x200000c4

08002424 <__io_putchar>:
#include "core/CortexM3_Core_Systick.h"

extern USART_TypeDef * Handle;

int __io_putchar(int ch)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b082      	sub	sp, #8
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
	HAL_UART_Byte(Handle,ch);
 800242c:	4b05      	ldr	r3, [pc, #20]	; (8002444 <__io_putchar+0x20>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	687a      	ldr	r2, [r7, #4]
 8002432:	4611      	mov	r1, r2
 8002434:	4618      	mov	r0, r3
 8002436:	f7ff ff99 	bl	800236c <HAL_UART_Byte>
	return ch;
 800243a:	687b      	ldr	r3, [r7, #4]
}
 800243c:	4618      	mov	r0, r3
 800243e:	3708      	adds	r7, #8
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}
 8002444:	200000c0 	.word	0x200000c0

08002448 <main>:
		HAL_GPIO_SPEED_FREQ_MEDIUM, };
GPIO_t GPIO_OUT2 = { .Mode = HAL_GPIO_OUT_PP, .PIN = GPIO_PIN_6, .SPEED =
		HAL_GPIO_SPEED_FREQ_MEDIUM, };

int main(void)
{
 8002448:	b5b0      	push	{r4, r5, r7, lr}
 800244a:	b0c8      	sub	sp, #288	; 0x120
 800244c:	af00      	add	r7, sp, #0
	//SystemInit();/*Trying Something */
	SYSTICK_INIT(SYSTICK_INC,1000000);
 800244e:	494a      	ldr	r1, [pc, #296]	; (8002578 <main+0x130>)
 8002450:	484a      	ldr	r0, [pc, #296]	; (800257c <main+0x134>)
 8002452:	f7fd fe8d 	bl	8000170 <SYSTICK_INIT>
	ADC_init_t Adc={
 8002456:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800245a:	22b4      	movs	r2, #180	; 0xb4
 800245c:	2100      	movs	r1, #0
 800245e:	4618      	mov	r0, r3
 8002460:	f000 f9ee 	bl	8002840 <memset>
 8002464:	2301      	movs	r3, #1
 8002466:	66bb      	str	r3, [r7, #104]	; 0x68
 8002468:	2301      	movs	r3, #1
 800246a:	673b      	str	r3, [r7, #112]	; 0x70
 800246c:	4b44      	ldr	r3, [pc, #272]	; (8002580 <main+0x138>)
 800246e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8002472:	2302      	movs	r3, #2
 8002474:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002478:	2301      	movs	r3, #1
 800247a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			.Sample_Time={TS_7_5},
			.Init.Alignment=HAL_ADC_ALLIGNMENT_LEFT,
			.Init.Watchdog_EN=HAL_WATCHDOG_DISABLE,
	};
	/*Configure USART */
	UART_t USART={
 800247e:	4b41      	ldr	r3, [pc, #260]	; (8002584 <main+0x13c>)
 8002480:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 8002484:	461d      	mov	r5, r3
 8002486:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002488:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800248a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800248e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			.Parity=HAL_USART_NO_PAIRTY,
			.StopBits=HAL_USART_NO_STOP_BITS_1,
			.WordLength=HAL_USART_WORD_LENGTH_8,
			.RX_Callback=USART_handler,
	};
	TimerU_D_t TIMERX_1={
 8002492:	f107 031c 	add.w	r3, r7, #28
 8002496:	4618      	mov	r0, r3
 8002498:	2330      	movs	r3, #48	; 0x30
 800249a:	461a      	mov	r2, r3
 800249c:	2100      	movs	r1, #0
 800249e:	f000 f9cf 	bl	8002840 <memset>
 80024a2:	f107 031c 	add.w	r3, r7, #28
 80024a6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80024aa:	601a      	str	r2, [r3, #0]
 80024ac:	f107 031c 	add.w	r3, r7, #28
 80024b0:	2205      	movs	r2, #5
 80024b2:	605a      	str	r2, [r3, #4]
 80024b4:	f107 031c 	add.w	r3, r7, #28
 80024b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80024bc:	609a      	str	r2, [r3, #8]
 80024be:	f107 031c 	add.w	r3, r7, #28
 80024c2:	f64f 7201 	movw	r2, #65281	; 0xff01
 80024c6:	60da      	str	r2, [r3, #12]
 80024c8:	f107 031c 	add.w	r3, r7, #28
 80024cc:	2203      	movs	r2, #3
 80024ce:	61da      	str	r2, [r3, #28]
 80024d0:	f107 031c 	add.w	r3, r7, #28
 80024d4:	f640 1209 	movw	r2, #2313	; 0x909
 80024d8:	621a      	str	r2, [r3, #32]
 80024da:	f107 031c 	add.w	r3, r7, #28
 80024de:	2201      	movs	r2, #1
 80024e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80024e4:	f107 031c 	add.w	r3, r7, #28
 80024e8:	2228      	movs	r2, #40	; 0x28
 80024ea:	629a      	str	r2, [r3, #40]	; 0x28
				.CMP_CHN={HAL_TIMER_CMP_OUT_CHN_4},
				.NO_CMP_CHNS=1,
				.Prescaler=40,
				.SH_EN=HAL_TIMER_SHR_EN,
	};
	GPIO_t GPIO_INT={
 80024ec:	463b      	mov	r3, r7
 80024ee:	461a      	mov	r2, r3
 80024f0:	2300      	movs	r3, #0
 80024f2:	6013      	str	r3, [r2, #0]
 80024f4:	6053      	str	r3, [r2, #4]
 80024f6:	6093      	str	r3, [r2, #8]
 80024f8:	60d3      	str	r3, [r2, #12]
 80024fa:	6113      	str	r3, [r2, #16]
 80024fc:	6153      	str	r3, [r2, #20]
 80024fe:	6193      	str	r3, [r2, #24]
 8002500:	463b      	mov	r3, r7
 8002502:	2205      	movs	r2, #5
 8002504:	601a      	str	r2, [r3, #0]
 8002506:	463b      	mov	r3, r7
 8002508:	2201      	movs	r2, #1
 800250a:	741a      	strb	r2, [r3, #16]
 800250c:	463b      	mov	r3, r7
 800250e:	4a1e      	ldr	r2, [pc, #120]	; (8002588 <main+0x140>)
 8002510:	615a      	str	r2, [r3, #20]
			.EXTI_LINE=EXTI_LINE_0,
			.EXT_N=HAL_GPIO_INT_FLAG_EN,
			.Mode=HAL_GPIO_IN,
			.PULL=HAL_GPIO_NOPULL,
	};
	HAL_Init_PIN(GPIOA,&GPIO_OUT2);
 8002512:	491e      	ldr	r1, [pc, #120]	; (800258c <main+0x144>)
 8002514:	481e      	ldr	r0, [pc, #120]	; (8002590 <main+0x148>)
 8002516:	f7fe fd4d 	bl	8000fb4 <HAL_Init_PIN>
	HAL_Init_PIN(GPIOA,&GPIO_OUT);
 800251a:	491e      	ldr	r1, [pc, #120]	; (8002594 <main+0x14c>)
 800251c:	481c      	ldr	r0, [pc, #112]	; (8002590 <main+0x148>)
 800251e:	f7fe fd49 	bl	8000fb4 <HAL_Init_PIN>
	HAL_Init_PIN(GPIOA,&GPIO_INT);
 8002522:	463b      	mov	r3, r7
 8002524:	4619      	mov	r1, r3
 8002526:	481a      	ldr	r0, [pc, #104]	; (8002590 <main+0x148>)
 8002528:	f7fe fd44 	bl	8000fb4 <HAL_Init_PIN>
	HAL_UART_Init(&USART);
 800252c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002530:	4618      	mov	r0, r3
 8002532:	f7ff fd8f 	bl	8002054 <HAL_UART_Init>
	HAL_TIMER_init(&TIMERX_1);
 8002536:	f107 031c 	add.w	r3, r7, #28
 800253a:	4618      	mov	r0, r3
 800253c:	f7fe fec6 	bl	80012cc <HAL_TIMER_init>
	int8_t *Buffer="Ready To TX:";
 8002540:	4b15      	ldr	r3, [pc, #84]	; (8002598 <main+0x150>)
 8002542:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	HAL_UART_Buffer(USART.Instance,Buffer,12);
 8002546:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002548:	220c      	movs	r2, #12
 800254a:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 800254e:	4618      	mov	r0, r3
 8002550:	f7ff ff25 	bl	800239e <HAL_UART_Buffer>
	HAL_ADC_Init(&Adc);
 8002554:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002558:	4618      	mov	r0, r3
 800255a:	f7fd fe71 	bl	8000240 <HAL_ADC_Init>
	while(1)
	{
		HAL_ADC_READ(&Adc,ADC_Val);
 800255e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002562:	490e      	ldr	r1, [pc, #56]	; (800259c <main+0x154>)
 8002564:	4618      	mov	r0, r3
 8002566:	f7fe fc6b 	bl	8000e40 <HAL_ADC_READ>
		printf("Timer_Val=%i\n\r",ADC_Val[0]);
 800256a:	4b0c      	ldr	r3, [pc, #48]	; (800259c <main+0x154>)
 800256c:	881b      	ldrh	r3, [r3, #0]
 800256e:	4619      	mov	r1, r3
 8002570:	480b      	ldr	r0, [pc, #44]	; (80025a0 <main+0x158>)
 8002572:	f000 f96d 	bl	8002850 <iprintf>
		HAL_ADC_READ(&Adc,ADC_Val);
 8002576:	e7f2      	b.n	800255e <main+0x116>
 8002578:	000f4240 	.word	0x000f4240
 800257c:	080025a5 	.word	0x080025a5
 8002580:	40012400 	.word	0x40012400
 8002584:	08003748 	.word	0x08003748
 8002588:	0800263d 	.word	0x0800263d
 800258c:	2000001c 	.word	0x2000001c
 8002590:	40010800 	.word	0x40010800
 8002594:	20000000 	.word	0x20000000
 8002598:	08003728 	.word	0x08003728
 800259c:	200000f0 	.word	0x200000f0
 80025a0:	08003738 	.word	0x08003738

080025a4 <SYSTICK_INC>:
	}
}


void SYSTICK_INC(void)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	af00      	add	r7, sp, #0
	Delay_Ms++;
 80025a8:	4b0c      	ldr	r3, [pc, #48]	; (80025dc <SYSTICK_INC+0x38>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	3301      	adds	r3, #1
 80025ae:	4a0b      	ldr	r2, [pc, #44]	; (80025dc <SYSTICK_INC+0x38>)
 80025b0:	6013      	str	r3, [r2, #0]
	Delay_LED = Delay_Ms;
 80025b2:	4b0a      	ldr	r3, [pc, #40]	; (80025dc <SYSTICK_INC+0x38>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a0a      	ldr	r2, [pc, #40]	; (80025e0 <SYSTICK_INC+0x3c>)
 80025b8:	6013      	str	r3, [r2, #0]
	if (Delay_LED - Delay_LED_O >= 2) {
 80025ba:	4b09      	ldr	r3, [pc, #36]	; (80025e0 <SYSTICK_INC+0x3c>)
 80025bc:	681a      	ldr	r2, [r3, #0]
 80025be:	4b09      	ldr	r3, [pc, #36]	; (80025e4 <SYSTICK_INC+0x40>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	1ad3      	subs	r3, r2, r3
 80025c4:	2b01      	cmp	r3, #1
 80025c6:	d907      	bls.n	80025d8 <SYSTICK_INC+0x34>
		HAL_Toggle_PIN(GPIOA, &GPIO_OUT2);
 80025c8:	4907      	ldr	r1, [pc, #28]	; (80025e8 <SYSTICK_INC+0x44>)
 80025ca:	4808      	ldr	r0, [pc, #32]	; (80025ec <SYSTICK_INC+0x48>)
 80025cc:	f7fe fe4e 	bl	800126c <HAL_Toggle_PIN>
		Delay_LED_O = Delay_LED;
 80025d0:	4b03      	ldr	r3, [pc, #12]	; (80025e0 <SYSTICK_INC+0x3c>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a03      	ldr	r2, [pc, #12]	; (80025e4 <SYSTICK_INC+0x40>)
 80025d6:	6013      	str	r3, [r2, #0]
	}
}
 80025d8:	bf00      	nop
 80025da:	bd80      	pop	{r7, pc}
 80025dc:	200000c8 	.word	0x200000c8
 80025e0:	200000cc 	.word	0x200000cc
 80025e4:	200000d0 	.word	0x200000d0
 80025e8:	2000001c 	.word	0x2000001c
 80025ec:	40010800 	.word	0x40010800

080025f0 <USART_handler>:

void USART_handler(void)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	af00      	add	r7, sp, #0
	Key_Pressed = USART3->DR;
 80025f4:	4b0d      	ldr	r3, [pc, #52]	; (800262c <USART_handler+0x3c>)
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	b25a      	sxtb	r2, r3
 80025fa:	4b0d      	ldr	r3, [pc, #52]	; (8002630 <USART_handler+0x40>)
 80025fc:	701a      	strb	r2, [r3, #0]
	if (Key_Pressed == 'a')
 80025fe:	4b0c      	ldr	r3, [pc, #48]	; (8002630 <USART_handler+0x40>)
 8002600:	f993 3000 	ldrsb.w	r3, [r3]
 8002604:	2b61      	cmp	r3, #97	; 0x61
 8002606:	d105      	bne.n	8002614 <USART_handler+0x24>
		HAL_Write_PIN(GPIOA, &GPIO_OUT, GPIO_SET);
 8002608:	2200      	movs	r2, #0
 800260a:	490a      	ldr	r1, [pc, #40]	; (8002634 <USART_handler+0x44>)
 800260c:	480a      	ldr	r0, [pc, #40]	; (8002638 <USART_handler+0x48>)
 800260e:	f7fe fdfd 	bl	800120c <HAL_Write_PIN>
	else if (Key_Pressed == 'b')
		HAL_Write_PIN(GPIOA, &GPIO_OUT, GPIO_RESET);
}
 8002612:	e009      	b.n	8002628 <USART_handler+0x38>
	else if (Key_Pressed == 'b')
 8002614:	4b06      	ldr	r3, [pc, #24]	; (8002630 <USART_handler+0x40>)
 8002616:	f993 3000 	ldrsb.w	r3, [r3]
 800261a:	2b62      	cmp	r3, #98	; 0x62
 800261c:	d104      	bne.n	8002628 <USART_handler+0x38>
		HAL_Write_PIN(GPIOA, &GPIO_OUT, GPIO_RESET);
 800261e:	2201      	movs	r2, #1
 8002620:	4904      	ldr	r1, [pc, #16]	; (8002634 <USART_handler+0x44>)
 8002622:	4805      	ldr	r0, [pc, #20]	; (8002638 <USART_handler+0x48>)
 8002624:	f7fe fdf2 	bl	800120c <HAL_Write_PIN>
}
 8002628:	bf00      	nop
 800262a:	bd80      	pop	{r7, pc}
 800262c:	40004800 	.word	0x40004800
 8002630:	200000d4 	.word	0x200000d4
 8002634:	20000000 	.word	0x20000000
 8002638:	40010800 	.word	0x40010800

0800263c <PIN_Pressed>:

void PIN_Pressed(void){
 800263c:	b480      	push	{r7}
 800263e:	af00      	add	r7, sp, #0
	Counter++;
 8002640:	4b04      	ldr	r3, [pc, #16]	; (8002654 <PIN_Pressed+0x18>)
 8002642:	881b      	ldrh	r3, [r3, #0]
 8002644:	3301      	adds	r3, #1
 8002646:	b29a      	uxth	r2, r3
 8002648:	4b02      	ldr	r3, [pc, #8]	; (8002654 <PIN_Pressed+0x18>)
 800264a:	801a      	strh	r2, [r3, #0]
}
 800264c:	bf00      	nop
 800264e:	46bd      	mov	sp, r7
 8002650:	bc80      	pop	{r7}
 8002652:	4770      	bx	lr
 8002654:	200000ea 	.word	0x200000ea

08002658 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b086      	sub	sp, #24
 800265c:	af00      	add	r7, sp, #0
 800265e:	60f8      	str	r0, [r7, #12]
 8002660:	60b9      	str	r1, [r7, #8]
 8002662:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002664:	2300      	movs	r3, #0
 8002666:	617b      	str	r3, [r7, #20]
 8002668:	e00a      	b.n	8002680 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800266a:	f3af 8000 	nop.w
 800266e:	4601      	mov	r1, r0
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	1c5a      	adds	r2, r3, #1
 8002674:	60ba      	str	r2, [r7, #8]
 8002676:	b2ca      	uxtb	r2, r1
 8002678:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	3301      	adds	r3, #1
 800267e:	617b      	str	r3, [r7, #20]
 8002680:	697a      	ldr	r2, [r7, #20]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	429a      	cmp	r2, r3
 8002686:	dbf0      	blt.n	800266a <_read+0x12>
	}

return len;
 8002688:	687b      	ldr	r3, [r7, #4]
}
 800268a:	4618      	mov	r0, r3
 800268c:	3718      	adds	r7, #24
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}

08002692 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002692:	b580      	push	{r7, lr}
 8002694:	b086      	sub	sp, #24
 8002696:	af00      	add	r7, sp, #0
 8002698:	60f8      	str	r0, [r7, #12]
 800269a:	60b9      	str	r1, [r7, #8]
 800269c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800269e:	2300      	movs	r3, #0
 80026a0:	617b      	str	r3, [r7, #20]
 80026a2:	e009      	b.n	80026b8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	1c5a      	adds	r2, r3, #1
 80026a8:	60ba      	str	r2, [r7, #8]
 80026aa:	781b      	ldrb	r3, [r3, #0]
 80026ac:	4618      	mov	r0, r3
 80026ae:	f7ff feb9 	bl	8002424 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	3301      	adds	r3, #1
 80026b6:	617b      	str	r3, [r7, #20]
 80026b8:	697a      	ldr	r2, [r7, #20]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	429a      	cmp	r2, r3
 80026be:	dbf1      	blt.n	80026a4 <_write+0x12>
	}
	return len;
 80026c0:	687b      	ldr	r3, [r7, #4]
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	3718      	adds	r7, #24
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}

080026ca <_close>:

int _close(int file)
{
 80026ca:	b480      	push	{r7}
 80026cc:	b083      	sub	sp, #12
 80026ce:	af00      	add	r7, sp, #0
 80026d0:	6078      	str	r0, [r7, #4]
	return -1;
 80026d2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	370c      	adds	r7, #12
 80026da:	46bd      	mov	sp, r7
 80026dc:	bc80      	pop	{r7}
 80026de:	4770      	bx	lr

080026e0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b083      	sub	sp, #12
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
 80026e8:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80026f0:	605a      	str	r2, [r3, #4]
	return 0;
 80026f2:	2300      	movs	r3, #0
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	370c      	adds	r7, #12
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bc80      	pop	{r7}
 80026fc:	4770      	bx	lr

080026fe <_isatty>:

int _isatty(int file)
{
 80026fe:	b480      	push	{r7}
 8002700:	b083      	sub	sp, #12
 8002702:	af00      	add	r7, sp, #0
 8002704:	6078      	str	r0, [r7, #4]
	return 1;
 8002706:	2301      	movs	r3, #1
}
 8002708:	4618      	mov	r0, r3
 800270a:	370c      	adds	r7, #12
 800270c:	46bd      	mov	sp, r7
 800270e:	bc80      	pop	{r7}
 8002710:	4770      	bx	lr

08002712 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002712:	b480      	push	{r7}
 8002714:	b085      	sub	sp, #20
 8002716:	af00      	add	r7, sp, #0
 8002718:	60f8      	str	r0, [r7, #12]
 800271a:	60b9      	str	r1, [r7, #8]
 800271c:	607a      	str	r2, [r7, #4]
	return 0;
 800271e:	2300      	movs	r3, #0
}
 8002720:	4618      	mov	r0, r3
 8002722:	3714      	adds	r7, #20
 8002724:	46bd      	mov	sp, r7
 8002726:	bc80      	pop	{r7}
 8002728:	4770      	bx	lr
	...

0800272c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b086      	sub	sp, #24
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002734:	4a14      	ldr	r2, [pc, #80]	; (8002788 <_sbrk+0x5c>)
 8002736:	4b15      	ldr	r3, [pc, #84]	; (800278c <_sbrk+0x60>)
 8002738:	1ad3      	subs	r3, r2, r3
 800273a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002740:	4b13      	ldr	r3, [pc, #76]	; (8002790 <_sbrk+0x64>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d102      	bne.n	800274e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002748:	4b11      	ldr	r3, [pc, #68]	; (8002790 <_sbrk+0x64>)
 800274a:	4a12      	ldr	r2, [pc, #72]	; (8002794 <_sbrk+0x68>)
 800274c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800274e:	4b10      	ldr	r3, [pc, #64]	; (8002790 <_sbrk+0x64>)
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	4413      	add	r3, r2
 8002756:	693a      	ldr	r2, [r7, #16]
 8002758:	429a      	cmp	r2, r3
 800275a:	d207      	bcs.n	800276c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800275c:	f000 f846 	bl	80027ec <__errno>
 8002760:	4603      	mov	r3, r0
 8002762:	220c      	movs	r2, #12
 8002764:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002766:	f04f 33ff 	mov.w	r3, #4294967295
 800276a:	e009      	b.n	8002780 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800276c:	4b08      	ldr	r3, [pc, #32]	; (8002790 <_sbrk+0x64>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002772:	4b07      	ldr	r3, [pc, #28]	; (8002790 <_sbrk+0x64>)
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	4413      	add	r3, r2
 800277a:	4a05      	ldr	r2, [pc, #20]	; (8002790 <_sbrk+0x64>)
 800277c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800277e:	68fb      	ldr	r3, [r7, #12]
}
 8002780:	4618      	mov	r0, r3
 8002782:	3718      	adds	r7, #24
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}
 8002788:	20005000 	.word	0x20005000
 800278c:	00000400 	.word	0x00000400
 8002790:	200000d8 	.word	0x200000d8
 8002794:	20000108 	.word	0x20000108

08002798 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002798:	480d      	ldr	r0, [pc, #52]	; (80027d0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800279a:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 800279c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80027a0:	480c      	ldr	r0, [pc, #48]	; (80027d4 <LoopForever+0x6>)
  ldr r1, =_edata
 80027a2:	490d      	ldr	r1, [pc, #52]	; (80027d8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80027a4:	4a0d      	ldr	r2, [pc, #52]	; (80027dc <LoopForever+0xe>)
  movs r3, #0
 80027a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80027a8:	e002      	b.n	80027b0 <LoopCopyDataInit>

080027aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80027aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80027ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80027ae:	3304      	adds	r3, #4

080027b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80027b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80027b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80027b4:	d3f9      	bcc.n	80027aa <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80027b6:	4a0a      	ldr	r2, [pc, #40]	; (80027e0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80027b8:	4c0a      	ldr	r4, [pc, #40]	; (80027e4 <LoopForever+0x16>)
  movs r3, #0
 80027ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80027bc:	e001      	b.n	80027c2 <LoopFillZerobss>

080027be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80027be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80027c0:	3204      	adds	r2, #4

080027c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80027c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80027c4:	d3fb      	bcc.n	80027be <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80027c6:	f000 f817 	bl	80027f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80027ca:	f7ff fe3d 	bl	8002448 <main>

080027ce <LoopForever>:

LoopForever:
    b LoopForever
 80027ce:	e7fe      	b.n	80027ce <LoopForever>
  ldr   r0, =_estack
 80027d0:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80027d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80027d8:	2000009c 	.word	0x2000009c
  ldr r2, =_sidata
 80027dc:	08003804 	.word	0x08003804
  ldr r2, =_sbss
 80027e0:	2000009c 	.word	0x2000009c
  ldr r4, =_ebss
 80027e4:	20000104 	.word	0x20000104

080027e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80027e8:	e7fe      	b.n	80027e8 <ADC1_2_IRQHandler>
	...

080027ec <__errno>:
 80027ec:	4b01      	ldr	r3, [pc, #4]	; (80027f4 <__errno+0x8>)
 80027ee:	6818      	ldr	r0, [r3, #0]
 80027f0:	4770      	bx	lr
 80027f2:	bf00      	nop
 80027f4:	20000038 	.word	0x20000038

080027f8 <__libc_init_array>:
 80027f8:	b570      	push	{r4, r5, r6, lr}
 80027fa:	2600      	movs	r6, #0
 80027fc:	4d0c      	ldr	r5, [pc, #48]	; (8002830 <__libc_init_array+0x38>)
 80027fe:	4c0d      	ldr	r4, [pc, #52]	; (8002834 <__libc_init_array+0x3c>)
 8002800:	1b64      	subs	r4, r4, r5
 8002802:	10a4      	asrs	r4, r4, #2
 8002804:	42a6      	cmp	r6, r4
 8002806:	d109      	bne.n	800281c <__libc_init_array+0x24>
 8002808:	f000 ff82 	bl	8003710 <_init>
 800280c:	2600      	movs	r6, #0
 800280e:	4d0a      	ldr	r5, [pc, #40]	; (8002838 <__libc_init_array+0x40>)
 8002810:	4c0a      	ldr	r4, [pc, #40]	; (800283c <__libc_init_array+0x44>)
 8002812:	1b64      	subs	r4, r4, r5
 8002814:	10a4      	asrs	r4, r4, #2
 8002816:	42a6      	cmp	r6, r4
 8002818:	d105      	bne.n	8002826 <__libc_init_array+0x2e>
 800281a:	bd70      	pop	{r4, r5, r6, pc}
 800281c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002820:	4798      	blx	r3
 8002822:	3601      	adds	r6, #1
 8002824:	e7ee      	b.n	8002804 <__libc_init_array+0xc>
 8002826:	f855 3b04 	ldr.w	r3, [r5], #4
 800282a:	4798      	blx	r3
 800282c:	3601      	adds	r6, #1
 800282e:	e7f2      	b.n	8002816 <__libc_init_array+0x1e>
 8002830:	080037fc 	.word	0x080037fc
 8002834:	080037fc 	.word	0x080037fc
 8002838:	080037fc 	.word	0x080037fc
 800283c:	08003800 	.word	0x08003800

08002840 <memset>:
 8002840:	4603      	mov	r3, r0
 8002842:	4402      	add	r2, r0
 8002844:	4293      	cmp	r3, r2
 8002846:	d100      	bne.n	800284a <memset+0xa>
 8002848:	4770      	bx	lr
 800284a:	f803 1b01 	strb.w	r1, [r3], #1
 800284e:	e7f9      	b.n	8002844 <memset+0x4>

08002850 <iprintf>:
 8002850:	b40f      	push	{r0, r1, r2, r3}
 8002852:	4b0a      	ldr	r3, [pc, #40]	; (800287c <iprintf+0x2c>)
 8002854:	b513      	push	{r0, r1, r4, lr}
 8002856:	681c      	ldr	r4, [r3, #0]
 8002858:	b124      	cbz	r4, 8002864 <iprintf+0x14>
 800285a:	69a3      	ldr	r3, [r4, #24]
 800285c:	b913      	cbnz	r3, 8002864 <iprintf+0x14>
 800285e:	4620      	mov	r0, r4
 8002860:	f000 f866 	bl	8002930 <__sinit>
 8002864:	ab05      	add	r3, sp, #20
 8002866:	4620      	mov	r0, r4
 8002868:	9a04      	ldr	r2, [sp, #16]
 800286a:	68a1      	ldr	r1, [r4, #8]
 800286c:	9301      	str	r3, [sp, #4]
 800286e:	f000 f981 	bl	8002b74 <_vfiprintf_r>
 8002872:	b002      	add	sp, #8
 8002874:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002878:	b004      	add	sp, #16
 800287a:	4770      	bx	lr
 800287c:	20000038 	.word	0x20000038

08002880 <std>:
 8002880:	2300      	movs	r3, #0
 8002882:	b510      	push	{r4, lr}
 8002884:	4604      	mov	r4, r0
 8002886:	e9c0 3300 	strd	r3, r3, [r0]
 800288a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800288e:	6083      	str	r3, [r0, #8]
 8002890:	8181      	strh	r1, [r0, #12]
 8002892:	6643      	str	r3, [r0, #100]	; 0x64
 8002894:	81c2      	strh	r2, [r0, #14]
 8002896:	6183      	str	r3, [r0, #24]
 8002898:	4619      	mov	r1, r3
 800289a:	2208      	movs	r2, #8
 800289c:	305c      	adds	r0, #92	; 0x5c
 800289e:	f7ff ffcf 	bl	8002840 <memset>
 80028a2:	4b05      	ldr	r3, [pc, #20]	; (80028b8 <std+0x38>)
 80028a4:	6224      	str	r4, [r4, #32]
 80028a6:	6263      	str	r3, [r4, #36]	; 0x24
 80028a8:	4b04      	ldr	r3, [pc, #16]	; (80028bc <std+0x3c>)
 80028aa:	62a3      	str	r3, [r4, #40]	; 0x28
 80028ac:	4b04      	ldr	r3, [pc, #16]	; (80028c0 <std+0x40>)
 80028ae:	62e3      	str	r3, [r4, #44]	; 0x2c
 80028b0:	4b04      	ldr	r3, [pc, #16]	; (80028c4 <std+0x44>)
 80028b2:	6323      	str	r3, [r4, #48]	; 0x30
 80028b4:	bd10      	pop	{r4, pc}
 80028b6:	bf00      	nop
 80028b8:	08003121 	.word	0x08003121
 80028bc:	08003143 	.word	0x08003143
 80028c0:	0800317b 	.word	0x0800317b
 80028c4:	0800319f 	.word	0x0800319f

080028c8 <_cleanup_r>:
 80028c8:	4901      	ldr	r1, [pc, #4]	; (80028d0 <_cleanup_r+0x8>)
 80028ca:	f000 b8af 	b.w	8002a2c <_fwalk_reent>
 80028ce:	bf00      	nop
 80028d0:	08003479 	.word	0x08003479

080028d4 <__sfmoreglue>:
 80028d4:	b570      	push	{r4, r5, r6, lr}
 80028d6:	2568      	movs	r5, #104	; 0x68
 80028d8:	1e4a      	subs	r2, r1, #1
 80028da:	4355      	muls	r5, r2
 80028dc:	460e      	mov	r6, r1
 80028de:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80028e2:	f000 f8c5 	bl	8002a70 <_malloc_r>
 80028e6:	4604      	mov	r4, r0
 80028e8:	b140      	cbz	r0, 80028fc <__sfmoreglue+0x28>
 80028ea:	2100      	movs	r1, #0
 80028ec:	e9c0 1600 	strd	r1, r6, [r0]
 80028f0:	300c      	adds	r0, #12
 80028f2:	60a0      	str	r0, [r4, #8]
 80028f4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80028f8:	f7ff ffa2 	bl	8002840 <memset>
 80028fc:	4620      	mov	r0, r4
 80028fe:	bd70      	pop	{r4, r5, r6, pc}

08002900 <__sfp_lock_acquire>:
 8002900:	4801      	ldr	r0, [pc, #4]	; (8002908 <__sfp_lock_acquire+0x8>)
 8002902:	f000 b8b3 	b.w	8002a6c <__retarget_lock_acquire_recursive>
 8002906:	bf00      	nop
 8002908:	200000fc 	.word	0x200000fc

0800290c <__sfp_lock_release>:
 800290c:	4801      	ldr	r0, [pc, #4]	; (8002914 <__sfp_lock_release+0x8>)
 800290e:	f000 b8ae 	b.w	8002a6e <__retarget_lock_release_recursive>
 8002912:	bf00      	nop
 8002914:	200000fc 	.word	0x200000fc

08002918 <__sinit_lock_acquire>:
 8002918:	4801      	ldr	r0, [pc, #4]	; (8002920 <__sinit_lock_acquire+0x8>)
 800291a:	f000 b8a7 	b.w	8002a6c <__retarget_lock_acquire_recursive>
 800291e:	bf00      	nop
 8002920:	200000f7 	.word	0x200000f7

08002924 <__sinit_lock_release>:
 8002924:	4801      	ldr	r0, [pc, #4]	; (800292c <__sinit_lock_release+0x8>)
 8002926:	f000 b8a2 	b.w	8002a6e <__retarget_lock_release_recursive>
 800292a:	bf00      	nop
 800292c:	200000f7 	.word	0x200000f7

08002930 <__sinit>:
 8002930:	b510      	push	{r4, lr}
 8002932:	4604      	mov	r4, r0
 8002934:	f7ff fff0 	bl	8002918 <__sinit_lock_acquire>
 8002938:	69a3      	ldr	r3, [r4, #24]
 800293a:	b11b      	cbz	r3, 8002944 <__sinit+0x14>
 800293c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002940:	f7ff bff0 	b.w	8002924 <__sinit_lock_release>
 8002944:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8002948:	6523      	str	r3, [r4, #80]	; 0x50
 800294a:	4b13      	ldr	r3, [pc, #76]	; (8002998 <__sinit+0x68>)
 800294c:	4a13      	ldr	r2, [pc, #76]	; (800299c <__sinit+0x6c>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	62a2      	str	r2, [r4, #40]	; 0x28
 8002952:	42a3      	cmp	r3, r4
 8002954:	bf08      	it	eq
 8002956:	2301      	moveq	r3, #1
 8002958:	4620      	mov	r0, r4
 800295a:	bf08      	it	eq
 800295c:	61a3      	streq	r3, [r4, #24]
 800295e:	f000 f81f 	bl	80029a0 <__sfp>
 8002962:	6060      	str	r0, [r4, #4]
 8002964:	4620      	mov	r0, r4
 8002966:	f000 f81b 	bl	80029a0 <__sfp>
 800296a:	60a0      	str	r0, [r4, #8]
 800296c:	4620      	mov	r0, r4
 800296e:	f000 f817 	bl	80029a0 <__sfp>
 8002972:	2200      	movs	r2, #0
 8002974:	2104      	movs	r1, #4
 8002976:	60e0      	str	r0, [r4, #12]
 8002978:	6860      	ldr	r0, [r4, #4]
 800297a:	f7ff ff81 	bl	8002880 <std>
 800297e:	2201      	movs	r2, #1
 8002980:	2109      	movs	r1, #9
 8002982:	68a0      	ldr	r0, [r4, #8]
 8002984:	f7ff ff7c 	bl	8002880 <std>
 8002988:	2202      	movs	r2, #2
 800298a:	2112      	movs	r1, #18
 800298c:	68e0      	ldr	r0, [r4, #12]
 800298e:	f7ff ff77 	bl	8002880 <std>
 8002992:	2301      	movs	r3, #1
 8002994:	61a3      	str	r3, [r4, #24]
 8002996:	e7d1      	b.n	800293c <__sinit+0xc>
 8002998:	08003764 	.word	0x08003764
 800299c:	080028c9 	.word	0x080028c9

080029a0 <__sfp>:
 80029a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029a2:	4607      	mov	r7, r0
 80029a4:	f7ff ffac 	bl	8002900 <__sfp_lock_acquire>
 80029a8:	4b1e      	ldr	r3, [pc, #120]	; (8002a24 <__sfp+0x84>)
 80029aa:	681e      	ldr	r6, [r3, #0]
 80029ac:	69b3      	ldr	r3, [r6, #24]
 80029ae:	b913      	cbnz	r3, 80029b6 <__sfp+0x16>
 80029b0:	4630      	mov	r0, r6
 80029b2:	f7ff ffbd 	bl	8002930 <__sinit>
 80029b6:	3648      	adds	r6, #72	; 0x48
 80029b8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80029bc:	3b01      	subs	r3, #1
 80029be:	d503      	bpl.n	80029c8 <__sfp+0x28>
 80029c0:	6833      	ldr	r3, [r6, #0]
 80029c2:	b30b      	cbz	r3, 8002a08 <__sfp+0x68>
 80029c4:	6836      	ldr	r6, [r6, #0]
 80029c6:	e7f7      	b.n	80029b8 <__sfp+0x18>
 80029c8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80029cc:	b9d5      	cbnz	r5, 8002a04 <__sfp+0x64>
 80029ce:	4b16      	ldr	r3, [pc, #88]	; (8002a28 <__sfp+0x88>)
 80029d0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80029d4:	60e3      	str	r3, [r4, #12]
 80029d6:	6665      	str	r5, [r4, #100]	; 0x64
 80029d8:	f000 f847 	bl	8002a6a <__retarget_lock_init_recursive>
 80029dc:	f7ff ff96 	bl	800290c <__sfp_lock_release>
 80029e0:	2208      	movs	r2, #8
 80029e2:	4629      	mov	r1, r5
 80029e4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80029e8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80029ec:	6025      	str	r5, [r4, #0]
 80029ee:	61a5      	str	r5, [r4, #24]
 80029f0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80029f4:	f7ff ff24 	bl	8002840 <memset>
 80029f8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80029fc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002a00:	4620      	mov	r0, r4
 8002a02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002a04:	3468      	adds	r4, #104	; 0x68
 8002a06:	e7d9      	b.n	80029bc <__sfp+0x1c>
 8002a08:	2104      	movs	r1, #4
 8002a0a:	4638      	mov	r0, r7
 8002a0c:	f7ff ff62 	bl	80028d4 <__sfmoreglue>
 8002a10:	4604      	mov	r4, r0
 8002a12:	6030      	str	r0, [r6, #0]
 8002a14:	2800      	cmp	r0, #0
 8002a16:	d1d5      	bne.n	80029c4 <__sfp+0x24>
 8002a18:	f7ff ff78 	bl	800290c <__sfp_lock_release>
 8002a1c:	230c      	movs	r3, #12
 8002a1e:	603b      	str	r3, [r7, #0]
 8002a20:	e7ee      	b.n	8002a00 <__sfp+0x60>
 8002a22:	bf00      	nop
 8002a24:	08003764 	.word	0x08003764
 8002a28:	ffff0001 	.word	0xffff0001

08002a2c <_fwalk_reent>:
 8002a2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002a30:	4606      	mov	r6, r0
 8002a32:	4688      	mov	r8, r1
 8002a34:	2700      	movs	r7, #0
 8002a36:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002a3a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002a3e:	f1b9 0901 	subs.w	r9, r9, #1
 8002a42:	d505      	bpl.n	8002a50 <_fwalk_reent+0x24>
 8002a44:	6824      	ldr	r4, [r4, #0]
 8002a46:	2c00      	cmp	r4, #0
 8002a48:	d1f7      	bne.n	8002a3a <_fwalk_reent+0xe>
 8002a4a:	4638      	mov	r0, r7
 8002a4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002a50:	89ab      	ldrh	r3, [r5, #12]
 8002a52:	2b01      	cmp	r3, #1
 8002a54:	d907      	bls.n	8002a66 <_fwalk_reent+0x3a>
 8002a56:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002a5a:	3301      	adds	r3, #1
 8002a5c:	d003      	beq.n	8002a66 <_fwalk_reent+0x3a>
 8002a5e:	4629      	mov	r1, r5
 8002a60:	4630      	mov	r0, r6
 8002a62:	47c0      	blx	r8
 8002a64:	4307      	orrs	r7, r0
 8002a66:	3568      	adds	r5, #104	; 0x68
 8002a68:	e7e9      	b.n	8002a3e <_fwalk_reent+0x12>

08002a6a <__retarget_lock_init_recursive>:
 8002a6a:	4770      	bx	lr

08002a6c <__retarget_lock_acquire_recursive>:
 8002a6c:	4770      	bx	lr

08002a6e <__retarget_lock_release_recursive>:
 8002a6e:	4770      	bx	lr

08002a70 <_malloc_r>:
 8002a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a72:	1ccd      	adds	r5, r1, #3
 8002a74:	f025 0503 	bic.w	r5, r5, #3
 8002a78:	3508      	adds	r5, #8
 8002a7a:	2d0c      	cmp	r5, #12
 8002a7c:	bf38      	it	cc
 8002a7e:	250c      	movcc	r5, #12
 8002a80:	2d00      	cmp	r5, #0
 8002a82:	4606      	mov	r6, r0
 8002a84:	db01      	blt.n	8002a8a <_malloc_r+0x1a>
 8002a86:	42a9      	cmp	r1, r5
 8002a88:	d903      	bls.n	8002a92 <_malloc_r+0x22>
 8002a8a:	230c      	movs	r3, #12
 8002a8c:	6033      	str	r3, [r6, #0]
 8002a8e:	2000      	movs	r0, #0
 8002a90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002a92:	f000 fdb1 	bl	80035f8 <__malloc_lock>
 8002a96:	4921      	ldr	r1, [pc, #132]	; (8002b1c <_malloc_r+0xac>)
 8002a98:	680a      	ldr	r2, [r1, #0]
 8002a9a:	4614      	mov	r4, r2
 8002a9c:	b99c      	cbnz	r4, 8002ac6 <_malloc_r+0x56>
 8002a9e:	4f20      	ldr	r7, [pc, #128]	; (8002b20 <_malloc_r+0xb0>)
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	b923      	cbnz	r3, 8002aae <_malloc_r+0x3e>
 8002aa4:	4621      	mov	r1, r4
 8002aa6:	4630      	mov	r0, r6
 8002aa8:	f000 fb2a 	bl	8003100 <_sbrk_r>
 8002aac:	6038      	str	r0, [r7, #0]
 8002aae:	4629      	mov	r1, r5
 8002ab0:	4630      	mov	r0, r6
 8002ab2:	f000 fb25 	bl	8003100 <_sbrk_r>
 8002ab6:	1c43      	adds	r3, r0, #1
 8002ab8:	d123      	bne.n	8002b02 <_malloc_r+0x92>
 8002aba:	230c      	movs	r3, #12
 8002abc:	4630      	mov	r0, r6
 8002abe:	6033      	str	r3, [r6, #0]
 8002ac0:	f000 fda0 	bl	8003604 <__malloc_unlock>
 8002ac4:	e7e3      	b.n	8002a8e <_malloc_r+0x1e>
 8002ac6:	6823      	ldr	r3, [r4, #0]
 8002ac8:	1b5b      	subs	r3, r3, r5
 8002aca:	d417      	bmi.n	8002afc <_malloc_r+0x8c>
 8002acc:	2b0b      	cmp	r3, #11
 8002ace:	d903      	bls.n	8002ad8 <_malloc_r+0x68>
 8002ad0:	6023      	str	r3, [r4, #0]
 8002ad2:	441c      	add	r4, r3
 8002ad4:	6025      	str	r5, [r4, #0]
 8002ad6:	e004      	b.n	8002ae2 <_malloc_r+0x72>
 8002ad8:	6863      	ldr	r3, [r4, #4]
 8002ada:	42a2      	cmp	r2, r4
 8002adc:	bf0c      	ite	eq
 8002ade:	600b      	streq	r3, [r1, #0]
 8002ae0:	6053      	strne	r3, [r2, #4]
 8002ae2:	4630      	mov	r0, r6
 8002ae4:	f000 fd8e 	bl	8003604 <__malloc_unlock>
 8002ae8:	f104 000b 	add.w	r0, r4, #11
 8002aec:	1d23      	adds	r3, r4, #4
 8002aee:	f020 0007 	bic.w	r0, r0, #7
 8002af2:	1ac2      	subs	r2, r0, r3
 8002af4:	d0cc      	beq.n	8002a90 <_malloc_r+0x20>
 8002af6:	1a1b      	subs	r3, r3, r0
 8002af8:	50a3      	str	r3, [r4, r2]
 8002afa:	e7c9      	b.n	8002a90 <_malloc_r+0x20>
 8002afc:	4622      	mov	r2, r4
 8002afe:	6864      	ldr	r4, [r4, #4]
 8002b00:	e7cc      	b.n	8002a9c <_malloc_r+0x2c>
 8002b02:	1cc4      	adds	r4, r0, #3
 8002b04:	f024 0403 	bic.w	r4, r4, #3
 8002b08:	42a0      	cmp	r0, r4
 8002b0a:	d0e3      	beq.n	8002ad4 <_malloc_r+0x64>
 8002b0c:	1a21      	subs	r1, r4, r0
 8002b0e:	4630      	mov	r0, r6
 8002b10:	f000 faf6 	bl	8003100 <_sbrk_r>
 8002b14:	3001      	adds	r0, #1
 8002b16:	d1dd      	bne.n	8002ad4 <_malloc_r+0x64>
 8002b18:	e7cf      	b.n	8002aba <_malloc_r+0x4a>
 8002b1a:	bf00      	nop
 8002b1c:	200000dc 	.word	0x200000dc
 8002b20:	200000e0 	.word	0x200000e0

08002b24 <__sfputc_r>:
 8002b24:	6893      	ldr	r3, [r2, #8]
 8002b26:	b410      	push	{r4}
 8002b28:	3b01      	subs	r3, #1
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	6093      	str	r3, [r2, #8]
 8002b2e:	da07      	bge.n	8002b40 <__sfputc_r+0x1c>
 8002b30:	6994      	ldr	r4, [r2, #24]
 8002b32:	42a3      	cmp	r3, r4
 8002b34:	db01      	blt.n	8002b3a <__sfputc_r+0x16>
 8002b36:	290a      	cmp	r1, #10
 8002b38:	d102      	bne.n	8002b40 <__sfputc_r+0x1c>
 8002b3a:	bc10      	pop	{r4}
 8002b3c:	f000 bb34 	b.w	80031a8 <__swbuf_r>
 8002b40:	6813      	ldr	r3, [r2, #0]
 8002b42:	1c58      	adds	r0, r3, #1
 8002b44:	6010      	str	r0, [r2, #0]
 8002b46:	7019      	strb	r1, [r3, #0]
 8002b48:	4608      	mov	r0, r1
 8002b4a:	bc10      	pop	{r4}
 8002b4c:	4770      	bx	lr

08002b4e <__sfputs_r>:
 8002b4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b50:	4606      	mov	r6, r0
 8002b52:	460f      	mov	r7, r1
 8002b54:	4614      	mov	r4, r2
 8002b56:	18d5      	adds	r5, r2, r3
 8002b58:	42ac      	cmp	r4, r5
 8002b5a:	d101      	bne.n	8002b60 <__sfputs_r+0x12>
 8002b5c:	2000      	movs	r0, #0
 8002b5e:	e007      	b.n	8002b70 <__sfputs_r+0x22>
 8002b60:	463a      	mov	r2, r7
 8002b62:	4630      	mov	r0, r6
 8002b64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002b68:	f7ff ffdc 	bl	8002b24 <__sfputc_r>
 8002b6c:	1c43      	adds	r3, r0, #1
 8002b6e:	d1f3      	bne.n	8002b58 <__sfputs_r+0xa>
 8002b70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002b74 <_vfiprintf_r>:
 8002b74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b78:	460d      	mov	r5, r1
 8002b7a:	4614      	mov	r4, r2
 8002b7c:	4698      	mov	r8, r3
 8002b7e:	4606      	mov	r6, r0
 8002b80:	b09d      	sub	sp, #116	; 0x74
 8002b82:	b118      	cbz	r0, 8002b8c <_vfiprintf_r+0x18>
 8002b84:	6983      	ldr	r3, [r0, #24]
 8002b86:	b90b      	cbnz	r3, 8002b8c <_vfiprintf_r+0x18>
 8002b88:	f7ff fed2 	bl	8002930 <__sinit>
 8002b8c:	4b89      	ldr	r3, [pc, #548]	; (8002db4 <_vfiprintf_r+0x240>)
 8002b8e:	429d      	cmp	r5, r3
 8002b90:	d11b      	bne.n	8002bca <_vfiprintf_r+0x56>
 8002b92:	6875      	ldr	r5, [r6, #4]
 8002b94:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002b96:	07d9      	lsls	r1, r3, #31
 8002b98:	d405      	bmi.n	8002ba6 <_vfiprintf_r+0x32>
 8002b9a:	89ab      	ldrh	r3, [r5, #12]
 8002b9c:	059a      	lsls	r2, r3, #22
 8002b9e:	d402      	bmi.n	8002ba6 <_vfiprintf_r+0x32>
 8002ba0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002ba2:	f7ff ff63 	bl	8002a6c <__retarget_lock_acquire_recursive>
 8002ba6:	89ab      	ldrh	r3, [r5, #12]
 8002ba8:	071b      	lsls	r3, r3, #28
 8002baa:	d501      	bpl.n	8002bb0 <_vfiprintf_r+0x3c>
 8002bac:	692b      	ldr	r3, [r5, #16]
 8002bae:	b9eb      	cbnz	r3, 8002bec <_vfiprintf_r+0x78>
 8002bb0:	4629      	mov	r1, r5
 8002bb2:	4630      	mov	r0, r6
 8002bb4:	f000 fb5c 	bl	8003270 <__swsetup_r>
 8002bb8:	b1c0      	cbz	r0, 8002bec <_vfiprintf_r+0x78>
 8002bba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002bbc:	07dc      	lsls	r4, r3, #31
 8002bbe:	d50e      	bpl.n	8002bde <_vfiprintf_r+0x6a>
 8002bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8002bc4:	b01d      	add	sp, #116	; 0x74
 8002bc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002bca:	4b7b      	ldr	r3, [pc, #492]	; (8002db8 <_vfiprintf_r+0x244>)
 8002bcc:	429d      	cmp	r5, r3
 8002bce:	d101      	bne.n	8002bd4 <_vfiprintf_r+0x60>
 8002bd0:	68b5      	ldr	r5, [r6, #8]
 8002bd2:	e7df      	b.n	8002b94 <_vfiprintf_r+0x20>
 8002bd4:	4b79      	ldr	r3, [pc, #484]	; (8002dbc <_vfiprintf_r+0x248>)
 8002bd6:	429d      	cmp	r5, r3
 8002bd8:	bf08      	it	eq
 8002bda:	68f5      	ldreq	r5, [r6, #12]
 8002bdc:	e7da      	b.n	8002b94 <_vfiprintf_r+0x20>
 8002bde:	89ab      	ldrh	r3, [r5, #12]
 8002be0:	0598      	lsls	r0, r3, #22
 8002be2:	d4ed      	bmi.n	8002bc0 <_vfiprintf_r+0x4c>
 8002be4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002be6:	f7ff ff42 	bl	8002a6e <__retarget_lock_release_recursive>
 8002bea:	e7e9      	b.n	8002bc0 <_vfiprintf_r+0x4c>
 8002bec:	2300      	movs	r3, #0
 8002bee:	9309      	str	r3, [sp, #36]	; 0x24
 8002bf0:	2320      	movs	r3, #32
 8002bf2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002bf6:	2330      	movs	r3, #48	; 0x30
 8002bf8:	f04f 0901 	mov.w	r9, #1
 8002bfc:	f8cd 800c 	str.w	r8, [sp, #12]
 8002c00:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8002dc0 <_vfiprintf_r+0x24c>
 8002c04:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002c08:	4623      	mov	r3, r4
 8002c0a:	469a      	mov	sl, r3
 8002c0c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002c10:	b10a      	cbz	r2, 8002c16 <_vfiprintf_r+0xa2>
 8002c12:	2a25      	cmp	r2, #37	; 0x25
 8002c14:	d1f9      	bne.n	8002c0a <_vfiprintf_r+0x96>
 8002c16:	ebba 0b04 	subs.w	fp, sl, r4
 8002c1a:	d00b      	beq.n	8002c34 <_vfiprintf_r+0xc0>
 8002c1c:	465b      	mov	r3, fp
 8002c1e:	4622      	mov	r2, r4
 8002c20:	4629      	mov	r1, r5
 8002c22:	4630      	mov	r0, r6
 8002c24:	f7ff ff93 	bl	8002b4e <__sfputs_r>
 8002c28:	3001      	adds	r0, #1
 8002c2a:	f000 80aa 	beq.w	8002d82 <_vfiprintf_r+0x20e>
 8002c2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002c30:	445a      	add	r2, fp
 8002c32:	9209      	str	r2, [sp, #36]	; 0x24
 8002c34:	f89a 3000 	ldrb.w	r3, [sl]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	f000 80a2 	beq.w	8002d82 <_vfiprintf_r+0x20e>
 8002c3e:	2300      	movs	r3, #0
 8002c40:	f04f 32ff 	mov.w	r2, #4294967295
 8002c44:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002c48:	f10a 0a01 	add.w	sl, sl, #1
 8002c4c:	9304      	str	r3, [sp, #16]
 8002c4e:	9307      	str	r3, [sp, #28]
 8002c50:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002c54:	931a      	str	r3, [sp, #104]	; 0x68
 8002c56:	4654      	mov	r4, sl
 8002c58:	2205      	movs	r2, #5
 8002c5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002c5e:	4858      	ldr	r0, [pc, #352]	; (8002dc0 <_vfiprintf_r+0x24c>)
 8002c60:	f000 fcbc 	bl	80035dc <memchr>
 8002c64:	9a04      	ldr	r2, [sp, #16]
 8002c66:	b9d8      	cbnz	r0, 8002ca0 <_vfiprintf_r+0x12c>
 8002c68:	06d1      	lsls	r1, r2, #27
 8002c6a:	bf44      	itt	mi
 8002c6c:	2320      	movmi	r3, #32
 8002c6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002c72:	0713      	lsls	r3, r2, #28
 8002c74:	bf44      	itt	mi
 8002c76:	232b      	movmi	r3, #43	; 0x2b
 8002c78:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002c7c:	f89a 3000 	ldrb.w	r3, [sl]
 8002c80:	2b2a      	cmp	r3, #42	; 0x2a
 8002c82:	d015      	beq.n	8002cb0 <_vfiprintf_r+0x13c>
 8002c84:	4654      	mov	r4, sl
 8002c86:	2000      	movs	r0, #0
 8002c88:	f04f 0c0a 	mov.w	ip, #10
 8002c8c:	9a07      	ldr	r2, [sp, #28]
 8002c8e:	4621      	mov	r1, r4
 8002c90:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002c94:	3b30      	subs	r3, #48	; 0x30
 8002c96:	2b09      	cmp	r3, #9
 8002c98:	d94e      	bls.n	8002d38 <_vfiprintf_r+0x1c4>
 8002c9a:	b1b0      	cbz	r0, 8002cca <_vfiprintf_r+0x156>
 8002c9c:	9207      	str	r2, [sp, #28]
 8002c9e:	e014      	b.n	8002cca <_vfiprintf_r+0x156>
 8002ca0:	eba0 0308 	sub.w	r3, r0, r8
 8002ca4:	fa09 f303 	lsl.w	r3, r9, r3
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	46a2      	mov	sl, r4
 8002cac:	9304      	str	r3, [sp, #16]
 8002cae:	e7d2      	b.n	8002c56 <_vfiprintf_r+0xe2>
 8002cb0:	9b03      	ldr	r3, [sp, #12]
 8002cb2:	1d19      	adds	r1, r3, #4
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	9103      	str	r1, [sp, #12]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	bfbb      	ittet	lt
 8002cbc:	425b      	neglt	r3, r3
 8002cbe:	f042 0202 	orrlt.w	r2, r2, #2
 8002cc2:	9307      	strge	r3, [sp, #28]
 8002cc4:	9307      	strlt	r3, [sp, #28]
 8002cc6:	bfb8      	it	lt
 8002cc8:	9204      	strlt	r2, [sp, #16]
 8002cca:	7823      	ldrb	r3, [r4, #0]
 8002ccc:	2b2e      	cmp	r3, #46	; 0x2e
 8002cce:	d10c      	bne.n	8002cea <_vfiprintf_r+0x176>
 8002cd0:	7863      	ldrb	r3, [r4, #1]
 8002cd2:	2b2a      	cmp	r3, #42	; 0x2a
 8002cd4:	d135      	bne.n	8002d42 <_vfiprintf_r+0x1ce>
 8002cd6:	9b03      	ldr	r3, [sp, #12]
 8002cd8:	3402      	adds	r4, #2
 8002cda:	1d1a      	adds	r2, r3, #4
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	9203      	str	r2, [sp, #12]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	bfb8      	it	lt
 8002ce4:	f04f 33ff 	movlt.w	r3, #4294967295
 8002ce8:	9305      	str	r3, [sp, #20]
 8002cea:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8002dd0 <_vfiprintf_r+0x25c>
 8002cee:	2203      	movs	r2, #3
 8002cf0:	4650      	mov	r0, sl
 8002cf2:	7821      	ldrb	r1, [r4, #0]
 8002cf4:	f000 fc72 	bl	80035dc <memchr>
 8002cf8:	b140      	cbz	r0, 8002d0c <_vfiprintf_r+0x198>
 8002cfa:	2340      	movs	r3, #64	; 0x40
 8002cfc:	eba0 000a 	sub.w	r0, r0, sl
 8002d00:	fa03 f000 	lsl.w	r0, r3, r0
 8002d04:	9b04      	ldr	r3, [sp, #16]
 8002d06:	3401      	adds	r4, #1
 8002d08:	4303      	orrs	r3, r0
 8002d0a:	9304      	str	r3, [sp, #16]
 8002d0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002d10:	2206      	movs	r2, #6
 8002d12:	482c      	ldr	r0, [pc, #176]	; (8002dc4 <_vfiprintf_r+0x250>)
 8002d14:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002d18:	f000 fc60 	bl	80035dc <memchr>
 8002d1c:	2800      	cmp	r0, #0
 8002d1e:	d03f      	beq.n	8002da0 <_vfiprintf_r+0x22c>
 8002d20:	4b29      	ldr	r3, [pc, #164]	; (8002dc8 <_vfiprintf_r+0x254>)
 8002d22:	bb1b      	cbnz	r3, 8002d6c <_vfiprintf_r+0x1f8>
 8002d24:	9b03      	ldr	r3, [sp, #12]
 8002d26:	3307      	adds	r3, #7
 8002d28:	f023 0307 	bic.w	r3, r3, #7
 8002d2c:	3308      	adds	r3, #8
 8002d2e:	9303      	str	r3, [sp, #12]
 8002d30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002d32:	443b      	add	r3, r7
 8002d34:	9309      	str	r3, [sp, #36]	; 0x24
 8002d36:	e767      	b.n	8002c08 <_vfiprintf_r+0x94>
 8002d38:	460c      	mov	r4, r1
 8002d3a:	2001      	movs	r0, #1
 8002d3c:	fb0c 3202 	mla	r2, ip, r2, r3
 8002d40:	e7a5      	b.n	8002c8e <_vfiprintf_r+0x11a>
 8002d42:	2300      	movs	r3, #0
 8002d44:	f04f 0c0a 	mov.w	ip, #10
 8002d48:	4619      	mov	r1, r3
 8002d4a:	3401      	adds	r4, #1
 8002d4c:	9305      	str	r3, [sp, #20]
 8002d4e:	4620      	mov	r0, r4
 8002d50:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002d54:	3a30      	subs	r2, #48	; 0x30
 8002d56:	2a09      	cmp	r2, #9
 8002d58:	d903      	bls.n	8002d62 <_vfiprintf_r+0x1ee>
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d0c5      	beq.n	8002cea <_vfiprintf_r+0x176>
 8002d5e:	9105      	str	r1, [sp, #20]
 8002d60:	e7c3      	b.n	8002cea <_vfiprintf_r+0x176>
 8002d62:	4604      	mov	r4, r0
 8002d64:	2301      	movs	r3, #1
 8002d66:	fb0c 2101 	mla	r1, ip, r1, r2
 8002d6a:	e7f0      	b.n	8002d4e <_vfiprintf_r+0x1da>
 8002d6c:	ab03      	add	r3, sp, #12
 8002d6e:	9300      	str	r3, [sp, #0]
 8002d70:	462a      	mov	r2, r5
 8002d72:	4630      	mov	r0, r6
 8002d74:	4b15      	ldr	r3, [pc, #84]	; (8002dcc <_vfiprintf_r+0x258>)
 8002d76:	a904      	add	r1, sp, #16
 8002d78:	f3af 8000 	nop.w
 8002d7c:	4607      	mov	r7, r0
 8002d7e:	1c78      	adds	r0, r7, #1
 8002d80:	d1d6      	bne.n	8002d30 <_vfiprintf_r+0x1bc>
 8002d82:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002d84:	07d9      	lsls	r1, r3, #31
 8002d86:	d405      	bmi.n	8002d94 <_vfiprintf_r+0x220>
 8002d88:	89ab      	ldrh	r3, [r5, #12]
 8002d8a:	059a      	lsls	r2, r3, #22
 8002d8c:	d402      	bmi.n	8002d94 <_vfiprintf_r+0x220>
 8002d8e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002d90:	f7ff fe6d 	bl	8002a6e <__retarget_lock_release_recursive>
 8002d94:	89ab      	ldrh	r3, [r5, #12]
 8002d96:	065b      	lsls	r3, r3, #25
 8002d98:	f53f af12 	bmi.w	8002bc0 <_vfiprintf_r+0x4c>
 8002d9c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002d9e:	e711      	b.n	8002bc4 <_vfiprintf_r+0x50>
 8002da0:	ab03      	add	r3, sp, #12
 8002da2:	9300      	str	r3, [sp, #0]
 8002da4:	462a      	mov	r2, r5
 8002da6:	4630      	mov	r0, r6
 8002da8:	4b08      	ldr	r3, [pc, #32]	; (8002dcc <_vfiprintf_r+0x258>)
 8002daa:	a904      	add	r1, sp, #16
 8002dac:	f000 f882 	bl	8002eb4 <_printf_i>
 8002db0:	e7e4      	b.n	8002d7c <_vfiprintf_r+0x208>
 8002db2:	bf00      	nop
 8002db4:	08003788 	.word	0x08003788
 8002db8:	080037a8 	.word	0x080037a8
 8002dbc:	08003768 	.word	0x08003768
 8002dc0:	080037c8 	.word	0x080037c8
 8002dc4:	080037d2 	.word	0x080037d2
 8002dc8:	00000000 	.word	0x00000000
 8002dcc:	08002b4f 	.word	0x08002b4f
 8002dd0:	080037ce 	.word	0x080037ce

08002dd4 <_printf_common>:
 8002dd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002dd8:	4616      	mov	r6, r2
 8002dda:	4699      	mov	r9, r3
 8002ddc:	688a      	ldr	r2, [r1, #8]
 8002dde:	690b      	ldr	r3, [r1, #16]
 8002de0:	4607      	mov	r7, r0
 8002de2:	4293      	cmp	r3, r2
 8002de4:	bfb8      	it	lt
 8002de6:	4613      	movlt	r3, r2
 8002de8:	6033      	str	r3, [r6, #0]
 8002dea:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002dee:	460c      	mov	r4, r1
 8002df0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002df4:	b10a      	cbz	r2, 8002dfa <_printf_common+0x26>
 8002df6:	3301      	adds	r3, #1
 8002df8:	6033      	str	r3, [r6, #0]
 8002dfa:	6823      	ldr	r3, [r4, #0]
 8002dfc:	0699      	lsls	r1, r3, #26
 8002dfe:	bf42      	ittt	mi
 8002e00:	6833      	ldrmi	r3, [r6, #0]
 8002e02:	3302      	addmi	r3, #2
 8002e04:	6033      	strmi	r3, [r6, #0]
 8002e06:	6825      	ldr	r5, [r4, #0]
 8002e08:	f015 0506 	ands.w	r5, r5, #6
 8002e0c:	d106      	bne.n	8002e1c <_printf_common+0x48>
 8002e0e:	f104 0a19 	add.w	sl, r4, #25
 8002e12:	68e3      	ldr	r3, [r4, #12]
 8002e14:	6832      	ldr	r2, [r6, #0]
 8002e16:	1a9b      	subs	r3, r3, r2
 8002e18:	42ab      	cmp	r3, r5
 8002e1a:	dc28      	bgt.n	8002e6e <_printf_common+0x9a>
 8002e1c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002e20:	1e13      	subs	r3, r2, #0
 8002e22:	6822      	ldr	r2, [r4, #0]
 8002e24:	bf18      	it	ne
 8002e26:	2301      	movne	r3, #1
 8002e28:	0692      	lsls	r2, r2, #26
 8002e2a:	d42d      	bmi.n	8002e88 <_printf_common+0xb4>
 8002e2c:	4649      	mov	r1, r9
 8002e2e:	4638      	mov	r0, r7
 8002e30:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002e34:	47c0      	blx	r8
 8002e36:	3001      	adds	r0, #1
 8002e38:	d020      	beq.n	8002e7c <_printf_common+0xa8>
 8002e3a:	6823      	ldr	r3, [r4, #0]
 8002e3c:	68e5      	ldr	r5, [r4, #12]
 8002e3e:	f003 0306 	and.w	r3, r3, #6
 8002e42:	2b04      	cmp	r3, #4
 8002e44:	bf18      	it	ne
 8002e46:	2500      	movne	r5, #0
 8002e48:	6832      	ldr	r2, [r6, #0]
 8002e4a:	f04f 0600 	mov.w	r6, #0
 8002e4e:	68a3      	ldr	r3, [r4, #8]
 8002e50:	bf08      	it	eq
 8002e52:	1aad      	subeq	r5, r5, r2
 8002e54:	6922      	ldr	r2, [r4, #16]
 8002e56:	bf08      	it	eq
 8002e58:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	bfc4      	itt	gt
 8002e60:	1a9b      	subgt	r3, r3, r2
 8002e62:	18ed      	addgt	r5, r5, r3
 8002e64:	341a      	adds	r4, #26
 8002e66:	42b5      	cmp	r5, r6
 8002e68:	d11a      	bne.n	8002ea0 <_printf_common+0xcc>
 8002e6a:	2000      	movs	r0, #0
 8002e6c:	e008      	b.n	8002e80 <_printf_common+0xac>
 8002e6e:	2301      	movs	r3, #1
 8002e70:	4652      	mov	r2, sl
 8002e72:	4649      	mov	r1, r9
 8002e74:	4638      	mov	r0, r7
 8002e76:	47c0      	blx	r8
 8002e78:	3001      	adds	r0, #1
 8002e7a:	d103      	bne.n	8002e84 <_printf_common+0xb0>
 8002e7c:	f04f 30ff 	mov.w	r0, #4294967295
 8002e80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002e84:	3501      	adds	r5, #1
 8002e86:	e7c4      	b.n	8002e12 <_printf_common+0x3e>
 8002e88:	2030      	movs	r0, #48	; 0x30
 8002e8a:	18e1      	adds	r1, r4, r3
 8002e8c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002e90:	1c5a      	adds	r2, r3, #1
 8002e92:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002e96:	4422      	add	r2, r4
 8002e98:	3302      	adds	r3, #2
 8002e9a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002e9e:	e7c5      	b.n	8002e2c <_printf_common+0x58>
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	4622      	mov	r2, r4
 8002ea4:	4649      	mov	r1, r9
 8002ea6:	4638      	mov	r0, r7
 8002ea8:	47c0      	blx	r8
 8002eaa:	3001      	adds	r0, #1
 8002eac:	d0e6      	beq.n	8002e7c <_printf_common+0xa8>
 8002eae:	3601      	adds	r6, #1
 8002eb0:	e7d9      	b.n	8002e66 <_printf_common+0x92>
	...

08002eb4 <_printf_i>:
 8002eb4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002eb8:	460c      	mov	r4, r1
 8002eba:	7e27      	ldrb	r7, [r4, #24]
 8002ebc:	4691      	mov	r9, r2
 8002ebe:	2f78      	cmp	r7, #120	; 0x78
 8002ec0:	4680      	mov	r8, r0
 8002ec2:	469a      	mov	sl, r3
 8002ec4:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002ec6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002eca:	d807      	bhi.n	8002edc <_printf_i+0x28>
 8002ecc:	2f62      	cmp	r7, #98	; 0x62
 8002ece:	d80a      	bhi.n	8002ee6 <_printf_i+0x32>
 8002ed0:	2f00      	cmp	r7, #0
 8002ed2:	f000 80d9 	beq.w	8003088 <_printf_i+0x1d4>
 8002ed6:	2f58      	cmp	r7, #88	; 0x58
 8002ed8:	f000 80a4 	beq.w	8003024 <_printf_i+0x170>
 8002edc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002ee0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002ee4:	e03a      	b.n	8002f5c <_printf_i+0xa8>
 8002ee6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002eea:	2b15      	cmp	r3, #21
 8002eec:	d8f6      	bhi.n	8002edc <_printf_i+0x28>
 8002eee:	a001      	add	r0, pc, #4	; (adr r0, 8002ef4 <_printf_i+0x40>)
 8002ef0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8002ef4:	08002f4d 	.word	0x08002f4d
 8002ef8:	08002f61 	.word	0x08002f61
 8002efc:	08002edd 	.word	0x08002edd
 8002f00:	08002edd 	.word	0x08002edd
 8002f04:	08002edd 	.word	0x08002edd
 8002f08:	08002edd 	.word	0x08002edd
 8002f0c:	08002f61 	.word	0x08002f61
 8002f10:	08002edd 	.word	0x08002edd
 8002f14:	08002edd 	.word	0x08002edd
 8002f18:	08002edd 	.word	0x08002edd
 8002f1c:	08002edd 	.word	0x08002edd
 8002f20:	0800306f 	.word	0x0800306f
 8002f24:	08002f91 	.word	0x08002f91
 8002f28:	08003051 	.word	0x08003051
 8002f2c:	08002edd 	.word	0x08002edd
 8002f30:	08002edd 	.word	0x08002edd
 8002f34:	08003091 	.word	0x08003091
 8002f38:	08002edd 	.word	0x08002edd
 8002f3c:	08002f91 	.word	0x08002f91
 8002f40:	08002edd 	.word	0x08002edd
 8002f44:	08002edd 	.word	0x08002edd
 8002f48:	08003059 	.word	0x08003059
 8002f4c:	680b      	ldr	r3, [r1, #0]
 8002f4e:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002f52:	1d1a      	adds	r2, r3, #4
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	600a      	str	r2, [r1, #0]
 8002f58:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	e0a4      	b.n	80030aa <_printf_i+0x1f6>
 8002f60:	6825      	ldr	r5, [r4, #0]
 8002f62:	6808      	ldr	r0, [r1, #0]
 8002f64:	062e      	lsls	r6, r5, #24
 8002f66:	f100 0304 	add.w	r3, r0, #4
 8002f6a:	d50a      	bpl.n	8002f82 <_printf_i+0xce>
 8002f6c:	6805      	ldr	r5, [r0, #0]
 8002f6e:	600b      	str	r3, [r1, #0]
 8002f70:	2d00      	cmp	r5, #0
 8002f72:	da03      	bge.n	8002f7c <_printf_i+0xc8>
 8002f74:	232d      	movs	r3, #45	; 0x2d
 8002f76:	426d      	negs	r5, r5
 8002f78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002f7c:	230a      	movs	r3, #10
 8002f7e:	485e      	ldr	r0, [pc, #376]	; (80030f8 <_printf_i+0x244>)
 8002f80:	e019      	b.n	8002fb6 <_printf_i+0x102>
 8002f82:	f015 0f40 	tst.w	r5, #64	; 0x40
 8002f86:	6805      	ldr	r5, [r0, #0]
 8002f88:	600b      	str	r3, [r1, #0]
 8002f8a:	bf18      	it	ne
 8002f8c:	b22d      	sxthne	r5, r5
 8002f8e:	e7ef      	b.n	8002f70 <_printf_i+0xbc>
 8002f90:	680b      	ldr	r3, [r1, #0]
 8002f92:	6825      	ldr	r5, [r4, #0]
 8002f94:	1d18      	adds	r0, r3, #4
 8002f96:	6008      	str	r0, [r1, #0]
 8002f98:	0628      	lsls	r0, r5, #24
 8002f9a:	d501      	bpl.n	8002fa0 <_printf_i+0xec>
 8002f9c:	681d      	ldr	r5, [r3, #0]
 8002f9e:	e002      	b.n	8002fa6 <_printf_i+0xf2>
 8002fa0:	0669      	lsls	r1, r5, #25
 8002fa2:	d5fb      	bpl.n	8002f9c <_printf_i+0xe8>
 8002fa4:	881d      	ldrh	r5, [r3, #0]
 8002fa6:	2f6f      	cmp	r7, #111	; 0x6f
 8002fa8:	bf0c      	ite	eq
 8002faa:	2308      	moveq	r3, #8
 8002fac:	230a      	movne	r3, #10
 8002fae:	4852      	ldr	r0, [pc, #328]	; (80030f8 <_printf_i+0x244>)
 8002fb0:	2100      	movs	r1, #0
 8002fb2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002fb6:	6866      	ldr	r6, [r4, #4]
 8002fb8:	2e00      	cmp	r6, #0
 8002fba:	bfa8      	it	ge
 8002fbc:	6821      	ldrge	r1, [r4, #0]
 8002fbe:	60a6      	str	r6, [r4, #8]
 8002fc0:	bfa4      	itt	ge
 8002fc2:	f021 0104 	bicge.w	r1, r1, #4
 8002fc6:	6021      	strge	r1, [r4, #0]
 8002fc8:	b90d      	cbnz	r5, 8002fce <_printf_i+0x11a>
 8002fca:	2e00      	cmp	r6, #0
 8002fcc:	d04d      	beq.n	800306a <_printf_i+0x1b6>
 8002fce:	4616      	mov	r6, r2
 8002fd0:	fbb5 f1f3 	udiv	r1, r5, r3
 8002fd4:	fb03 5711 	mls	r7, r3, r1, r5
 8002fd8:	5dc7      	ldrb	r7, [r0, r7]
 8002fda:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002fde:	462f      	mov	r7, r5
 8002fe0:	42bb      	cmp	r3, r7
 8002fe2:	460d      	mov	r5, r1
 8002fe4:	d9f4      	bls.n	8002fd0 <_printf_i+0x11c>
 8002fe6:	2b08      	cmp	r3, #8
 8002fe8:	d10b      	bne.n	8003002 <_printf_i+0x14e>
 8002fea:	6823      	ldr	r3, [r4, #0]
 8002fec:	07df      	lsls	r7, r3, #31
 8002fee:	d508      	bpl.n	8003002 <_printf_i+0x14e>
 8002ff0:	6923      	ldr	r3, [r4, #16]
 8002ff2:	6861      	ldr	r1, [r4, #4]
 8002ff4:	4299      	cmp	r1, r3
 8002ff6:	bfde      	ittt	le
 8002ff8:	2330      	movle	r3, #48	; 0x30
 8002ffa:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002ffe:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003002:	1b92      	subs	r2, r2, r6
 8003004:	6122      	str	r2, [r4, #16]
 8003006:	464b      	mov	r3, r9
 8003008:	4621      	mov	r1, r4
 800300a:	4640      	mov	r0, r8
 800300c:	f8cd a000 	str.w	sl, [sp]
 8003010:	aa03      	add	r2, sp, #12
 8003012:	f7ff fedf 	bl	8002dd4 <_printf_common>
 8003016:	3001      	adds	r0, #1
 8003018:	d14c      	bne.n	80030b4 <_printf_i+0x200>
 800301a:	f04f 30ff 	mov.w	r0, #4294967295
 800301e:	b004      	add	sp, #16
 8003020:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003024:	4834      	ldr	r0, [pc, #208]	; (80030f8 <_printf_i+0x244>)
 8003026:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800302a:	680e      	ldr	r6, [r1, #0]
 800302c:	6823      	ldr	r3, [r4, #0]
 800302e:	f856 5b04 	ldr.w	r5, [r6], #4
 8003032:	061f      	lsls	r7, r3, #24
 8003034:	600e      	str	r6, [r1, #0]
 8003036:	d514      	bpl.n	8003062 <_printf_i+0x1ae>
 8003038:	07d9      	lsls	r1, r3, #31
 800303a:	bf44      	itt	mi
 800303c:	f043 0320 	orrmi.w	r3, r3, #32
 8003040:	6023      	strmi	r3, [r4, #0]
 8003042:	b91d      	cbnz	r5, 800304c <_printf_i+0x198>
 8003044:	6823      	ldr	r3, [r4, #0]
 8003046:	f023 0320 	bic.w	r3, r3, #32
 800304a:	6023      	str	r3, [r4, #0]
 800304c:	2310      	movs	r3, #16
 800304e:	e7af      	b.n	8002fb0 <_printf_i+0xfc>
 8003050:	6823      	ldr	r3, [r4, #0]
 8003052:	f043 0320 	orr.w	r3, r3, #32
 8003056:	6023      	str	r3, [r4, #0]
 8003058:	2378      	movs	r3, #120	; 0x78
 800305a:	4828      	ldr	r0, [pc, #160]	; (80030fc <_printf_i+0x248>)
 800305c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003060:	e7e3      	b.n	800302a <_printf_i+0x176>
 8003062:	065e      	lsls	r6, r3, #25
 8003064:	bf48      	it	mi
 8003066:	b2ad      	uxthmi	r5, r5
 8003068:	e7e6      	b.n	8003038 <_printf_i+0x184>
 800306a:	4616      	mov	r6, r2
 800306c:	e7bb      	b.n	8002fe6 <_printf_i+0x132>
 800306e:	680b      	ldr	r3, [r1, #0]
 8003070:	6826      	ldr	r6, [r4, #0]
 8003072:	1d1d      	adds	r5, r3, #4
 8003074:	6960      	ldr	r0, [r4, #20]
 8003076:	600d      	str	r5, [r1, #0]
 8003078:	0635      	lsls	r5, r6, #24
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	d501      	bpl.n	8003082 <_printf_i+0x1ce>
 800307e:	6018      	str	r0, [r3, #0]
 8003080:	e002      	b.n	8003088 <_printf_i+0x1d4>
 8003082:	0671      	lsls	r1, r6, #25
 8003084:	d5fb      	bpl.n	800307e <_printf_i+0x1ca>
 8003086:	8018      	strh	r0, [r3, #0]
 8003088:	2300      	movs	r3, #0
 800308a:	4616      	mov	r6, r2
 800308c:	6123      	str	r3, [r4, #16]
 800308e:	e7ba      	b.n	8003006 <_printf_i+0x152>
 8003090:	680b      	ldr	r3, [r1, #0]
 8003092:	1d1a      	adds	r2, r3, #4
 8003094:	600a      	str	r2, [r1, #0]
 8003096:	681e      	ldr	r6, [r3, #0]
 8003098:	2100      	movs	r1, #0
 800309a:	4630      	mov	r0, r6
 800309c:	6862      	ldr	r2, [r4, #4]
 800309e:	f000 fa9d 	bl	80035dc <memchr>
 80030a2:	b108      	cbz	r0, 80030a8 <_printf_i+0x1f4>
 80030a4:	1b80      	subs	r0, r0, r6
 80030a6:	6060      	str	r0, [r4, #4]
 80030a8:	6863      	ldr	r3, [r4, #4]
 80030aa:	6123      	str	r3, [r4, #16]
 80030ac:	2300      	movs	r3, #0
 80030ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80030b2:	e7a8      	b.n	8003006 <_printf_i+0x152>
 80030b4:	4632      	mov	r2, r6
 80030b6:	4649      	mov	r1, r9
 80030b8:	4640      	mov	r0, r8
 80030ba:	6923      	ldr	r3, [r4, #16]
 80030bc:	47d0      	blx	sl
 80030be:	3001      	adds	r0, #1
 80030c0:	d0ab      	beq.n	800301a <_printf_i+0x166>
 80030c2:	6823      	ldr	r3, [r4, #0]
 80030c4:	079b      	lsls	r3, r3, #30
 80030c6:	d413      	bmi.n	80030f0 <_printf_i+0x23c>
 80030c8:	68e0      	ldr	r0, [r4, #12]
 80030ca:	9b03      	ldr	r3, [sp, #12]
 80030cc:	4298      	cmp	r0, r3
 80030ce:	bfb8      	it	lt
 80030d0:	4618      	movlt	r0, r3
 80030d2:	e7a4      	b.n	800301e <_printf_i+0x16a>
 80030d4:	2301      	movs	r3, #1
 80030d6:	4632      	mov	r2, r6
 80030d8:	4649      	mov	r1, r9
 80030da:	4640      	mov	r0, r8
 80030dc:	47d0      	blx	sl
 80030de:	3001      	adds	r0, #1
 80030e0:	d09b      	beq.n	800301a <_printf_i+0x166>
 80030e2:	3501      	adds	r5, #1
 80030e4:	68e3      	ldr	r3, [r4, #12]
 80030e6:	9903      	ldr	r1, [sp, #12]
 80030e8:	1a5b      	subs	r3, r3, r1
 80030ea:	42ab      	cmp	r3, r5
 80030ec:	dcf2      	bgt.n	80030d4 <_printf_i+0x220>
 80030ee:	e7eb      	b.n	80030c8 <_printf_i+0x214>
 80030f0:	2500      	movs	r5, #0
 80030f2:	f104 0619 	add.w	r6, r4, #25
 80030f6:	e7f5      	b.n	80030e4 <_printf_i+0x230>
 80030f8:	080037d9 	.word	0x080037d9
 80030fc:	080037ea 	.word	0x080037ea

08003100 <_sbrk_r>:
 8003100:	b538      	push	{r3, r4, r5, lr}
 8003102:	2300      	movs	r3, #0
 8003104:	4d05      	ldr	r5, [pc, #20]	; (800311c <_sbrk_r+0x1c>)
 8003106:	4604      	mov	r4, r0
 8003108:	4608      	mov	r0, r1
 800310a:	602b      	str	r3, [r5, #0]
 800310c:	f7ff fb0e 	bl	800272c <_sbrk>
 8003110:	1c43      	adds	r3, r0, #1
 8003112:	d102      	bne.n	800311a <_sbrk_r+0x1a>
 8003114:	682b      	ldr	r3, [r5, #0]
 8003116:	b103      	cbz	r3, 800311a <_sbrk_r+0x1a>
 8003118:	6023      	str	r3, [r4, #0]
 800311a:	bd38      	pop	{r3, r4, r5, pc}
 800311c:	20000100 	.word	0x20000100

08003120 <__sread>:
 8003120:	b510      	push	{r4, lr}
 8003122:	460c      	mov	r4, r1
 8003124:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003128:	f000 fabe 	bl	80036a8 <_read_r>
 800312c:	2800      	cmp	r0, #0
 800312e:	bfab      	itete	ge
 8003130:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003132:	89a3      	ldrhlt	r3, [r4, #12]
 8003134:	181b      	addge	r3, r3, r0
 8003136:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800313a:	bfac      	ite	ge
 800313c:	6563      	strge	r3, [r4, #84]	; 0x54
 800313e:	81a3      	strhlt	r3, [r4, #12]
 8003140:	bd10      	pop	{r4, pc}

08003142 <__swrite>:
 8003142:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003146:	461f      	mov	r7, r3
 8003148:	898b      	ldrh	r3, [r1, #12]
 800314a:	4605      	mov	r5, r0
 800314c:	05db      	lsls	r3, r3, #23
 800314e:	460c      	mov	r4, r1
 8003150:	4616      	mov	r6, r2
 8003152:	d505      	bpl.n	8003160 <__swrite+0x1e>
 8003154:	2302      	movs	r3, #2
 8003156:	2200      	movs	r2, #0
 8003158:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800315c:	f000 f9c8 	bl	80034f0 <_lseek_r>
 8003160:	89a3      	ldrh	r3, [r4, #12]
 8003162:	4632      	mov	r2, r6
 8003164:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003168:	81a3      	strh	r3, [r4, #12]
 800316a:	4628      	mov	r0, r5
 800316c:	463b      	mov	r3, r7
 800316e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003172:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003176:	f000 b869 	b.w	800324c <_write_r>

0800317a <__sseek>:
 800317a:	b510      	push	{r4, lr}
 800317c:	460c      	mov	r4, r1
 800317e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003182:	f000 f9b5 	bl	80034f0 <_lseek_r>
 8003186:	1c43      	adds	r3, r0, #1
 8003188:	89a3      	ldrh	r3, [r4, #12]
 800318a:	bf15      	itete	ne
 800318c:	6560      	strne	r0, [r4, #84]	; 0x54
 800318e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003192:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003196:	81a3      	strheq	r3, [r4, #12]
 8003198:	bf18      	it	ne
 800319a:	81a3      	strhne	r3, [r4, #12]
 800319c:	bd10      	pop	{r4, pc}

0800319e <__sclose>:
 800319e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80031a2:	f000 b8d3 	b.w	800334c <_close_r>
	...

080031a8 <__swbuf_r>:
 80031a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031aa:	460e      	mov	r6, r1
 80031ac:	4614      	mov	r4, r2
 80031ae:	4605      	mov	r5, r0
 80031b0:	b118      	cbz	r0, 80031ba <__swbuf_r+0x12>
 80031b2:	6983      	ldr	r3, [r0, #24]
 80031b4:	b90b      	cbnz	r3, 80031ba <__swbuf_r+0x12>
 80031b6:	f7ff fbbb 	bl	8002930 <__sinit>
 80031ba:	4b21      	ldr	r3, [pc, #132]	; (8003240 <__swbuf_r+0x98>)
 80031bc:	429c      	cmp	r4, r3
 80031be:	d12b      	bne.n	8003218 <__swbuf_r+0x70>
 80031c0:	686c      	ldr	r4, [r5, #4]
 80031c2:	69a3      	ldr	r3, [r4, #24]
 80031c4:	60a3      	str	r3, [r4, #8]
 80031c6:	89a3      	ldrh	r3, [r4, #12]
 80031c8:	071a      	lsls	r2, r3, #28
 80031ca:	d52f      	bpl.n	800322c <__swbuf_r+0x84>
 80031cc:	6923      	ldr	r3, [r4, #16]
 80031ce:	b36b      	cbz	r3, 800322c <__swbuf_r+0x84>
 80031d0:	6923      	ldr	r3, [r4, #16]
 80031d2:	6820      	ldr	r0, [r4, #0]
 80031d4:	b2f6      	uxtb	r6, r6
 80031d6:	1ac0      	subs	r0, r0, r3
 80031d8:	6963      	ldr	r3, [r4, #20]
 80031da:	4637      	mov	r7, r6
 80031dc:	4283      	cmp	r3, r0
 80031de:	dc04      	bgt.n	80031ea <__swbuf_r+0x42>
 80031e0:	4621      	mov	r1, r4
 80031e2:	4628      	mov	r0, r5
 80031e4:	f000 f948 	bl	8003478 <_fflush_r>
 80031e8:	bb30      	cbnz	r0, 8003238 <__swbuf_r+0x90>
 80031ea:	68a3      	ldr	r3, [r4, #8]
 80031ec:	3001      	adds	r0, #1
 80031ee:	3b01      	subs	r3, #1
 80031f0:	60a3      	str	r3, [r4, #8]
 80031f2:	6823      	ldr	r3, [r4, #0]
 80031f4:	1c5a      	adds	r2, r3, #1
 80031f6:	6022      	str	r2, [r4, #0]
 80031f8:	701e      	strb	r6, [r3, #0]
 80031fa:	6963      	ldr	r3, [r4, #20]
 80031fc:	4283      	cmp	r3, r0
 80031fe:	d004      	beq.n	800320a <__swbuf_r+0x62>
 8003200:	89a3      	ldrh	r3, [r4, #12]
 8003202:	07db      	lsls	r3, r3, #31
 8003204:	d506      	bpl.n	8003214 <__swbuf_r+0x6c>
 8003206:	2e0a      	cmp	r6, #10
 8003208:	d104      	bne.n	8003214 <__swbuf_r+0x6c>
 800320a:	4621      	mov	r1, r4
 800320c:	4628      	mov	r0, r5
 800320e:	f000 f933 	bl	8003478 <_fflush_r>
 8003212:	b988      	cbnz	r0, 8003238 <__swbuf_r+0x90>
 8003214:	4638      	mov	r0, r7
 8003216:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003218:	4b0a      	ldr	r3, [pc, #40]	; (8003244 <__swbuf_r+0x9c>)
 800321a:	429c      	cmp	r4, r3
 800321c:	d101      	bne.n	8003222 <__swbuf_r+0x7a>
 800321e:	68ac      	ldr	r4, [r5, #8]
 8003220:	e7cf      	b.n	80031c2 <__swbuf_r+0x1a>
 8003222:	4b09      	ldr	r3, [pc, #36]	; (8003248 <__swbuf_r+0xa0>)
 8003224:	429c      	cmp	r4, r3
 8003226:	bf08      	it	eq
 8003228:	68ec      	ldreq	r4, [r5, #12]
 800322a:	e7ca      	b.n	80031c2 <__swbuf_r+0x1a>
 800322c:	4621      	mov	r1, r4
 800322e:	4628      	mov	r0, r5
 8003230:	f000 f81e 	bl	8003270 <__swsetup_r>
 8003234:	2800      	cmp	r0, #0
 8003236:	d0cb      	beq.n	80031d0 <__swbuf_r+0x28>
 8003238:	f04f 37ff 	mov.w	r7, #4294967295
 800323c:	e7ea      	b.n	8003214 <__swbuf_r+0x6c>
 800323e:	bf00      	nop
 8003240:	08003788 	.word	0x08003788
 8003244:	080037a8 	.word	0x080037a8
 8003248:	08003768 	.word	0x08003768

0800324c <_write_r>:
 800324c:	b538      	push	{r3, r4, r5, lr}
 800324e:	4604      	mov	r4, r0
 8003250:	4608      	mov	r0, r1
 8003252:	4611      	mov	r1, r2
 8003254:	2200      	movs	r2, #0
 8003256:	4d05      	ldr	r5, [pc, #20]	; (800326c <_write_r+0x20>)
 8003258:	602a      	str	r2, [r5, #0]
 800325a:	461a      	mov	r2, r3
 800325c:	f7ff fa19 	bl	8002692 <_write>
 8003260:	1c43      	adds	r3, r0, #1
 8003262:	d102      	bne.n	800326a <_write_r+0x1e>
 8003264:	682b      	ldr	r3, [r5, #0]
 8003266:	b103      	cbz	r3, 800326a <_write_r+0x1e>
 8003268:	6023      	str	r3, [r4, #0]
 800326a:	bd38      	pop	{r3, r4, r5, pc}
 800326c:	20000100 	.word	0x20000100

08003270 <__swsetup_r>:
 8003270:	4b32      	ldr	r3, [pc, #200]	; (800333c <__swsetup_r+0xcc>)
 8003272:	b570      	push	{r4, r5, r6, lr}
 8003274:	681d      	ldr	r5, [r3, #0]
 8003276:	4606      	mov	r6, r0
 8003278:	460c      	mov	r4, r1
 800327a:	b125      	cbz	r5, 8003286 <__swsetup_r+0x16>
 800327c:	69ab      	ldr	r3, [r5, #24]
 800327e:	b913      	cbnz	r3, 8003286 <__swsetup_r+0x16>
 8003280:	4628      	mov	r0, r5
 8003282:	f7ff fb55 	bl	8002930 <__sinit>
 8003286:	4b2e      	ldr	r3, [pc, #184]	; (8003340 <__swsetup_r+0xd0>)
 8003288:	429c      	cmp	r4, r3
 800328a:	d10f      	bne.n	80032ac <__swsetup_r+0x3c>
 800328c:	686c      	ldr	r4, [r5, #4]
 800328e:	89a3      	ldrh	r3, [r4, #12]
 8003290:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003294:	0719      	lsls	r1, r3, #28
 8003296:	d42c      	bmi.n	80032f2 <__swsetup_r+0x82>
 8003298:	06dd      	lsls	r5, r3, #27
 800329a:	d411      	bmi.n	80032c0 <__swsetup_r+0x50>
 800329c:	2309      	movs	r3, #9
 800329e:	6033      	str	r3, [r6, #0]
 80032a0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80032a4:	f04f 30ff 	mov.w	r0, #4294967295
 80032a8:	81a3      	strh	r3, [r4, #12]
 80032aa:	e03e      	b.n	800332a <__swsetup_r+0xba>
 80032ac:	4b25      	ldr	r3, [pc, #148]	; (8003344 <__swsetup_r+0xd4>)
 80032ae:	429c      	cmp	r4, r3
 80032b0:	d101      	bne.n	80032b6 <__swsetup_r+0x46>
 80032b2:	68ac      	ldr	r4, [r5, #8]
 80032b4:	e7eb      	b.n	800328e <__swsetup_r+0x1e>
 80032b6:	4b24      	ldr	r3, [pc, #144]	; (8003348 <__swsetup_r+0xd8>)
 80032b8:	429c      	cmp	r4, r3
 80032ba:	bf08      	it	eq
 80032bc:	68ec      	ldreq	r4, [r5, #12]
 80032be:	e7e6      	b.n	800328e <__swsetup_r+0x1e>
 80032c0:	0758      	lsls	r0, r3, #29
 80032c2:	d512      	bpl.n	80032ea <__swsetup_r+0x7a>
 80032c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80032c6:	b141      	cbz	r1, 80032da <__swsetup_r+0x6a>
 80032c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80032cc:	4299      	cmp	r1, r3
 80032ce:	d002      	beq.n	80032d6 <__swsetup_r+0x66>
 80032d0:	4630      	mov	r0, r6
 80032d2:	f000 f99d 	bl	8003610 <_free_r>
 80032d6:	2300      	movs	r3, #0
 80032d8:	6363      	str	r3, [r4, #52]	; 0x34
 80032da:	89a3      	ldrh	r3, [r4, #12]
 80032dc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80032e0:	81a3      	strh	r3, [r4, #12]
 80032e2:	2300      	movs	r3, #0
 80032e4:	6063      	str	r3, [r4, #4]
 80032e6:	6923      	ldr	r3, [r4, #16]
 80032e8:	6023      	str	r3, [r4, #0]
 80032ea:	89a3      	ldrh	r3, [r4, #12]
 80032ec:	f043 0308 	orr.w	r3, r3, #8
 80032f0:	81a3      	strh	r3, [r4, #12]
 80032f2:	6923      	ldr	r3, [r4, #16]
 80032f4:	b94b      	cbnz	r3, 800330a <__swsetup_r+0x9a>
 80032f6:	89a3      	ldrh	r3, [r4, #12]
 80032f8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80032fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003300:	d003      	beq.n	800330a <__swsetup_r+0x9a>
 8003302:	4621      	mov	r1, r4
 8003304:	4630      	mov	r0, r6
 8003306:	f000 f929 	bl	800355c <__smakebuf_r>
 800330a:	89a0      	ldrh	r0, [r4, #12]
 800330c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003310:	f010 0301 	ands.w	r3, r0, #1
 8003314:	d00a      	beq.n	800332c <__swsetup_r+0xbc>
 8003316:	2300      	movs	r3, #0
 8003318:	60a3      	str	r3, [r4, #8]
 800331a:	6963      	ldr	r3, [r4, #20]
 800331c:	425b      	negs	r3, r3
 800331e:	61a3      	str	r3, [r4, #24]
 8003320:	6923      	ldr	r3, [r4, #16]
 8003322:	b943      	cbnz	r3, 8003336 <__swsetup_r+0xc6>
 8003324:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003328:	d1ba      	bne.n	80032a0 <__swsetup_r+0x30>
 800332a:	bd70      	pop	{r4, r5, r6, pc}
 800332c:	0781      	lsls	r1, r0, #30
 800332e:	bf58      	it	pl
 8003330:	6963      	ldrpl	r3, [r4, #20]
 8003332:	60a3      	str	r3, [r4, #8]
 8003334:	e7f4      	b.n	8003320 <__swsetup_r+0xb0>
 8003336:	2000      	movs	r0, #0
 8003338:	e7f7      	b.n	800332a <__swsetup_r+0xba>
 800333a:	bf00      	nop
 800333c:	20000038 	.word	0x20000038
 8003340:	08003788 	.word	0x08003788
 8003344:	080037a8 	.word	0x080037a8
 8003348:	08003768 	.word	0x08003768

0800334c <_close_r>:
 800334c:	b538      	push	{r3, r4, r5, lr}
 800334e:	2300      	movs	r3, #0
 8003350:	4d05      	ldr	r5, [pc, #20]	; (8003368 <_close_r+0x1c>)
 8003352:	4604      	mov	r4, r0
 8003354:	4608      	mov	r0, r1
 8003356:	602b      	str	r3, [r5, #0]
 8003358:	f7ff f9b7 	bl	80026ca <_close>
 800335c:	1c43      	adds	r3, r0, #1
 800335e:	d102      	bne.n	8003366 <_close_r+0x1a>
 8003360:	682b      	ldr	r3, [r5, #0]
 8003362:	b103      	cbz	r3, 8003366 <_close_r+0x1a>
 8003364:	6023      	str	r3, [r4, #0]
 8003366:	bd38      	pop	{r3, r4, r5, pc}
 8003368:	20000100 	.word	0x20000100

0800336c <__sflush_r>:
 800336c:	898a      	ldrh	r2, [r1, #12]
 800336e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003372:	4605      	mov	r5, r0
 8003374:	0710      	lsls	r0, r2, #28
 8003376:	460c      	mov	r4, r1
 8003378:	d458      	bmi.n	800342c <__sflush_r+0xc0>
 800337a:	684b      	ldr	r3, [r1, #4]
 800337c:	2b00      	cmp	r3, #0
 800337e:	dc05      	bgt.n	800338c <__sflush_r+0x20>
 8003380:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003382:	2b00      	cmp	r3, #0
 8003384:	dc02      	bgt.n	800338c <__sflush_r+0x20>
 8003386:	2000      	movs	r0, #0
 8003388:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800338c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800338e:	2e00      	cmp	r6, #0
 8003390:	d0f9      	beq.n	8003386 <__sflush_r+0x1a>
 8003392:	2300      	movs	r3, #0
 8003394:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003398:	682f      	ldr	r7, [r5, #0]
 800339a:	602b      	str	r3, [r5, #0]
 800339c:	d032      	beq.n	8003404 <__sflush_r+0x98>
 800339e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80033a0:	89a3      	ldrh	r3, [r4, #12]
 80033a2:	075a      	lsls	r2, r3, #29
 80033a4:	d505      	bpl.n	80033b2 <__sflush_r+0x46>
 80033a6:	6863      	ldr	r3, [r4, #4]
 80033a8:	1ac0      	subs	r0, r0, r3
 80033aa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80033ac:	b10b      	cbz	r3, 80033b2 <__sflush_r+0x46>
 80033ae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80033b0:	1ac0      	subs	r0, r0, r3
 80033b2:	2300      	movs	r3, #0
 80033b4:	4602      	mov	r2, r0
 80033b6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80033b8:	4628      	mov	r0, r5
 80033ba:	6a21      	ldr	r1, [r4, #32]
 80033bc:	47b0      	blx	r6
 80033be:	1c43      	adds	r3, r0, #1
 80033c0:	89a3      	ldrh	r3, [r4, #12]
 80033c2:	d106      	bne.n	80033d2 <__sflush_r+0x66>
 80033c4:	6829      	ldr	r1, [r5, #0]
 80033c6:	291d      	cmp	r1, #29
 80033c8:	d82c      	bhi.n	8003424 <__sflush_r+0xb8>
 80033ca:	4a2a      	ldr	r2, [pc, #168]	; (8003474 <__sflush_r+0x108>)
 80033cc:	40ca      	lsrs	r2, r1
 80033ce:	07d6      	lsls	r6, r2, #31
 80033d0:	d528      	bpl.n	8003424 <__sflush_r+0xb8>
 80033d2:	2200      	movs	r2, #0
 80033d4:	6062      	str	r2, [r4, #4]
 80033d6:	6922      	ldr	r2, [r4, #16]
 80033d8:	04d9      	lsls	r1, r3, #19
 80033da:	6022      	str	r2, [r4, #0]
 80033dc:	d504      	bpl.n	80033e8 <__sflush_r+0x7c>
 80033de:	1c42      	adds	r2, r0, #1
 80033e0:	d101      	bne.n	80033e6 <__sflush_r+0x7a>
 80033e2:	682b      	ldr	r3, [r5, #0]
 80033e4:	b903      	cbnz	r3, 80033e8 <__sflush_r+0x7c>
 80033e6:	6560      	str	r0, [r4, #84]	; 0x54
 80033e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80033ea:	602f      	str	r7, [r5, #0]
 80033ec:	2900      	cmp	r1, #0
 80033ee:	d0ca      	beq.n	8003386 <__sflush_r+0x1a>
 80033f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80033f4:	4299      	cmp	r1, r3
 80033f6:	d002      	beq.n	80033fe <__sflush_r+0x92>
 80033f8:	4628      	mov	r0, r5
 80033fa:	f000 f909 	bl	8003610 <_free_r>
 80033fe:	2000      	movs	r0, #0
 8003400:	6360      	str	r0, [r4, #52]	; 0x34
 8003402:	e7c1      	b.n	8003388 <__sflush_r+0x1c>
 8003404:	6a21      	ldr	r1, [r4, #32]
 8003406:	2301      	movs	r3, #1
 8003408:	4628      	mov	r0, r5
 800340a:	47b0      	blx	r6
 800340c:	1c41      	adds	r1, r0, #1
 800340e:	d1c7      	bne.n	80033a0 <__sflush_r+0x34>
 8003410:	682b      	ldr	r3, [r5, #0]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d0c4      	beq.n	80033a0 <__sflush_r+0x34>
 8003416:	2b1d      	cmp	r3, #29
 8003418:	d001      	beq.n	800341e <__sflush_r+0xb2>
 800341a:	2b16      	cmp	r3, #22
 800341c:	d101      	bne.n	8003422 <__sflush_r+0xb6>
 800341e:	602f      	str	r7, [r5, #0]
 8003420:	e7b1      	b.n	8003386 <__sflush_r+0x1a>
 8003422:	89a3      	ldrh	r3, [r4, #12]
 8003424:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003428:	81a3      	strh	r3, [r4, #12]
 800342a:	e7ad      	b.n	8003388 <__sflush_r+0x1c>
 800342c:	690f      	ldr	r7, [r1, #16]
 800342e:	2f00      	cmp	r7, #0
 8003430:	d0a9      	beq.n	8003386 <__sflush_r+0x1a>
 8003432:	0793      	lsls	r3, r2, #30
 8003434:	bf18      	it	ne
 8003436:	2300      	movne	r3, #0
 8003438:	680e      	ldr	r6, [r1, #0]
 800343a:	bf08      	it	eq
 800343c:	694b      	ldreq	r3, [r1, #20]
 800343e:	eba6 0807 	sub.w	r8, r6, r7
 8003442:	600f      	str	r7, [r1, #0]
 8003444:	608b      	str	r3, [r1, #8]
 8003446:	f1b8 0f00 	cmp.w	r8, #0
 800344a:	dd9c      	ble.n	8003386 <__sflush_r+0x1a>
 800344c:	4643      	mov	r3, r8
 800344e:	463a      	mov	r2, r7
 8003450:	4628      	mov	r0, r5
 8003452:	6a21      	ldr	r1, [r4, #32]
 8003454:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003456:	47b0      	blx	r6
 8003458:	2800      	cmp	r0, #0
 800345a:	dc06      	bgt.n	800346a <__sflush_r+0xfe>
 800345c:	89a3      	ldrh	r3, [r4, #12]
 800345e:	f04f 30ff 	mov.w	r0, #4294967295
 8003462:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003466:	81a3      	strh	r3, [r4, #12]
 8003468:	e78e      	b.n	8003388 <__sflush_r+0x1c>
 800346a:	4407      	add	r7, r0
 800346c:	eba8 0800 	sub.w	r8, r8, r0
 8003470:	e7e9      	b.n	8003446 <__sflush_r+0xda>
 8003472:	bf00      	nop
 8003474:	20400001 	.word	0x20400001

08003478 <_fflush_r>:
 8003478:	b538      	push	{r3, r4, r5, lr}
 800347a:	690b      	ldr	r3, [r1, #16]
 800347c:	4605      	mov	r5, r0
 800347e:	460c      	mov	r4, r1
 8003480:	b913      	cbnz	r3, 8003488 <_fflush_r+0x10>
 8003482:	2500      	movs	r5, #0
 8003484:	4628      	mov	r0, r5
 8003486:	bd38      	pop	{r3, r4, r5, pc}
 8003488:	b118      	cbz	r0, 8003492 <_fflush_r+0x1a>
 800348a:	6983      	ldr	r3, [r0, #24]
 800348c:	b90b      	cbnz	r3, 8003492 <_fflush_r+0x1a>
 800348e:	f7ff fa4f 	bl	8002930 <__sinit>
 8003492:	4b14      	ldr	r3, [pc, #80]	; (80034e4 <_fflush_r+0x6c>)
 8003494:	429c      	cmp	r4, r3
 8003496:	d11b      	bne.n	80034d0 <_fflush_r+0x58>
 8003498:	686c      	ldr	r4, [r5, #4]
 800349a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d0ef      	beq.n	8003482 <_fflush_r+0xa>
 80034a2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80034a4:	07d0      	lsls	r0, r2, #31
 80034a6:	d404      	bmi.n	80034b2 <_fflush_r+0x3a>
 80034a8:	0599      	lsls	r1, r3, #22
 80034aa:	d402      	bmi.n	80034b2 <_fflush_r+0x3a>
 80034ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80034ae:	f7ff fadd 	bl	8002a6c <__retarget_lock_acquire_recursive>
 80034b2:	4628      	mov	r0, r5
 80034b4:	4621      	mov	r1, r4
 80034b6:	f7ff ff59 	bl	800336c <__sflush_r>
 80034ba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80034bc:	4605      	mov	r5, r0
 80034be:	07da      	lsls	r2, r3, #31
 80034c0:	d4e0      	bmi.n	8003484 <_fflush_r+0xc>
 80034c2:	89a3      	ldrh	r3, [r4, #12]
 80034c4:	059b      	lsls	r3, r3, #22
 80034c6:	d4dd      	bmi.n	8003484 <_fflush_r+0xc>
 80034c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80034ca:	f7ff fad0 	bl	8002a6e <__retarget_lock_release_recursive>
 80034ce:	e7d9      	b.n	8003484 <_fflush_r+0xc>
 80034d0:	4b05      	ldr	r3, [pc, #20]	; (80034e8 <_fflush_r+0x70>)
 80034d2:	429c      	cmp	r4, r3
 80034d4:	d101      	bne.n	80034da <_fflush_r+0x62>
 80034d6:	68ac      	ldr	r4, [r5, #8]
 80034d8:	e7df      	b.n	800349a <_fflush_r+0x22>
 80034da:	4b04      	ldr	r3, [pc, #16]	; (80034ec <_fflush_r+0x74>)
 80034dc:	429c      	cmp	r4, r3
 80034de:	bf08      	it	eq
 80034e0:	68ec      	ldreq	r4, [r5, #12]
 80034e2:	e7da      	b.n	800349a <_fflush_r+0x22>
 80034e4:	08003788 	.word	0x08003788
 80034e8:	080037a8 	.word	0x080037a8
 80034ec:	08003768 	.word	0x08003768

080034f0 <_lseek_r>:
 80034f0:	b538      	push	{r3, r4, r5, lr}
 80034f2:	4604      	mov	r4, r0
 80034f4:	4608      	mov	r0, r1
 80034f6:	4611      	mov	r1, r2
 80034f8:	2200      	movs	r2, #0
 80034fa:	4d05      	ldr	r5, [pc, #20]	; (8003510 <_lseek_r+0x20>)
 80034fc:	602a      	str	r2, [r5, #0]
 80034fe:	461a      	mov	r2, r3
 8003500:	f7ff f907 	bl	8002712 <_lseek>
 8003504:	1c43      	adds	r3, r0, #1
 8003506:	d102      	bne.n	800350e <_lseek_r+0x1e>
 8003508:	682b      	ldr	r3, [r5, #0]
 800350a:	b103      	cbz	r3, 800350e <_lseek_r+0x1e>
 800350c:	6023      	str	r3, [r4, #0]
 800350e:	bd38      	pop	{r3, r4, r5, pc}
 8003510:	20000100 	.word	0x20000100

08003514 <__swhatbuf_r>:
 8003514:	b570      	push	{r4, r5, r6, lr}
 8003516:	460e      	mov	r6, r1
 8003518:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800351c:	4614      	mov	r4, r2
 800351e:	2900      	cmp	r1, #0
 8003520:	461d      	mov	r5, r3
 8003522:	b096      	sub	sp, #88	; 0x58
 8003524:	da07      	bge.n	8003536 <__swhatbuf_r+0x22>
 8003526:	2300      	movs	r3, #0
 8003528:	602b      	str	r3, [r5, #0]
 800352a:	89b3      	ldrh	r3, [r6, #12]
 800352c:	061a      	lsls	r2, r3, #24
 800352e:	d410      	bmi.n	8003552 <__swhatbuf_r+0x3e>
 8003530:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003534:	e00e      	b.n	8003554 <__swhatbuf_r+0x40>
 8003536:	466a      	mov	r2, sp
 8003538:	f000 f8c8 	bl	80036cc <_fstat_r>
 800353c:	2800      	cmp	r0, #0
 800353e:	dbf2      	blt.n	8003526 <__swhatbuf_r+0x12>
 8003540:	9a01      	ldr	r2, [sp, #4]
 8003542:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003546:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800354a:	425a      	negs	r2, r3
 800354c:	415a      	adcs	r2, r3
 800354e:	602a      	str	r2, [r5, #0]
 8003550:	e7ee      	b.n	8003530 <__swhatbuf_r+0x1c>
 8003552:	2340      	movs	r3, #64	; 0x40
 8003554:	2000      	movs	r0, #0
 8003556:	6023      	str	r3, [r4, #0]
 8003558:	b016      	add	sp, #88	; 0x58
 800355a:	bd70      	pop	{r4, r5, r6, pc}

0800355c <__smakebuf_r>:
 800355c:	898b      	ldrh	r3, [r1, #12]
 800355e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003560:	079d      	lsls	r5, r3, #30
 8003562:	4606      	mov	r6, r0
 8003564:	460c      	mov	r4, r1
 8003566:	d507      	bpl.n	8003578 <__smakebuf_r+0x1c>
 8003568:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800356c:	6023      	str	r3, [r4, #0]
 800356e:	6123      	str	r3, [r4, #16]
 8003570:	2301      	movs	r3, #1
 8003572:	6163      	str	r3, [r4, #20]
 8003574:	b002      	add	sp, #8
 8003576:	bd70      	pop	{r4, r5, r6, pc}
 8003578:	466a      	mov	r2, sp
 800357a:	ab01      	add	r3, sp, #4
 800357c:	f7ff ffca 	bl	8003514 <__swhatbuf_r>
 8003580:	9900      	ldr	r1, [sp, #0]
 8003582:	4605      	mov	r5, r0
 8003584:	4630      	mov	r0, r6
 8003586:	f7ff fa73 	bl	8002a70 <_malloc_r>
 800358a:	b948      	cbnz	r0, 80035a0 <__smakebuf_r+0x44>
 800358c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003590:	059a      	lsls	r2, r3, #22
 8003592:	d4ef      	bmi.n	8003574 <__smakebuf_r+0x18>
 8003594:	f023 0303 	bic.w	r3, r3, #3
 8003598:	f043 0302 	orr.w	r3, r3, #2
 800359c:	81a3      	strh	r3, [r4, #12]
 800359e:	e7e3      	b.n	8003568 <__smakebuf_r+0xc>
 80035a0:	4b0d      	ldr	r3, [pc, #52]	; (80035d8 <__smakebuf_r+0x7c>)
 80035a2:	62b3      	str	r3, [r6, #40]	; 0x28
 80035a4:	89a3      	ldrh	r3, [r4, #12]
 80035a6:	6020      	str	r0, [r4, #0]
 80035a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035ac:	81a3      	strh	r3, [r4, #12]
 80035ae:	9b00      	ldr	r3, [sp, #0]
 80035b0:	6120      	str	r0, [r4, #16]
 80035b2:	6163      	str	r3, [r4, #20]
 80035b4:	9b01      	ldr	r3, [sp, #4]
 80035b6:	b15b      	cbz	r3, 80035d0 <__smakebuf_r+0x74>
 80035b8:	4630      	mov	r0, r6
 80035ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80035be:	f000 f897 	bl	80036f0 <_isatty_r>
 80035c2:	b128      	cbz	r0, 80035d0 <__smakebuf_r+0x74>
 80035c4:	89a3      	ldrh	r3, [r4, #12]
 80035c6:	f023 0303 	bic.w	r3, r3, #3
 80035ca:	f043 0301 	orr.w	r3, r3, #1
 80035ce:	81a3      	strh	r3, [r4, #12]
 80035d0:	89a0      	ldrh	r0, [r4, #12]
 80035d2:	4305      	orrs	r5, r0
 80035d4:	81a5      	strh	r5, [r4, #12]
 80035d6:	e7cd      	b.n	8003574 <__smakebuf_r+0x18>
 80035d8:	080028c9 	.word	0x080028c9

080035dc <memchr>:
 80035dc:	4603      	mov	r3, r0
 80035de:	b510      	push	{r4, lr}
 80035e0:	b2c9      	uxtb	r1, r1
 80035e2:	4402      	add	r2, r0
 80035e4:	4293      	cmp	r3, r2
 80035e6:	4618      	mov	r0, r3
 80035e8:	d101      	bne.n	80035ee <memchr+0x12>
 80035ea:	2000      	movs	r0, #0
 80035ec:	e003      	b.n	80035f6 <memchr+0x1a>
 80035ee:	7804      	ldrb	r4, [r0, #0]
 80035f0:	3301      	adds	r3, #1
 80035f2:	428c      	cmp	r4, r1
 80035f4:	d1f6      	bne.n	80035e4 <memchr+0x8>
 80035f6:	bd10      	pop	{r4, pc}

080035f8 <__malloc_lock>:
 80035f8:	4801      	ldr	r0, [pc, #4]	; (8003600 <__malloc_lock+0x8>)
 80035fa:	f7ff ba37 	b.w	8002a6c <__retarget_lock_acquire_recursive>
 80035fe:	bf00      	nop
 8003600:	200000f8 	.word	0x200000f8

08003604 <__malloc_unlock>:
 8003604:	4801      	ldr	r0, [pc, #4]	; (800360c <__malloc_unlock+0x8>)
 8003606:	f7ff ba32 	b.w	8002a6e <__retarget_lock_release_recursive>
 800360a:	bf00      	nop
 800360c:	200000f8 	.word	0x200000f8

08003610 <_free_r>:
 8003610:	b538      	push	{r3, r4, r5, lr}
 8003612:	4605      	mov	r5, r0
 8003614:	2900      	cmp	r1, #0
 8003616:	d043      	beq.n	80036a0 <_free_r+0x90>
 8003618:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800361c:	1f0c      	subs	r4, r1, #4
 800361e:	2b00      	cmp	r3, #0
 8003620:	bfb8      	it	lt
 8003622:	18e4      	addlt	r4, r4, r3
 8003624:	f7ff ffe8 	bl	80035f8 <__malloc_lock>
 8003628:	4a1e      	ldr	r2, [pc, #120]	; (80036a4 <_free_r+0x94>)
 800362a:	6813      	ldr	r3, [r2, #0]
 800362c:	4610      	mov	r0, r2
 800362e:	b933      	cbnz	r3, 800363e <_free_r+0x2e>
 8003630:	6063      	str	r3, [r4, #4]
 8003632:	6014      	str	r4, [r2, #0]
 8003634:	4628      	mov	r0, r5
 8003636:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800363a:	f7ff bfe3 	b.w	8003604 <__malloc_unlock>
 800363e:	42a3      	cmp	r3, r4
 8003640:	d90a      	bls.n	8003658 <_free_r+0x48>
 8003642:	6821      	ldr	r1, [r4, #0]
 8003644:	1862      	adds	r2, r4, r1
 8003646:	4293      	cmp	r3, r2
 8003648:	bf01      	itttt	eq
 800364a:	681a      	ldreq	r2, [r3, #0]
 800364c:	685b      	ldreq	r3, [r3, #4]
 800364e:	1852      	addeq	r2, r2, r1
 8003650:	6022      	streq	r2, [r4, #0]
 8003652:	6063      	str	r3, [r4, #4]
 8003654:	6004      	str	r4, [r0, #0]
 8003656:	e7ed      	b.n	8003634 <_free_r+0x24>
 8003658:	461a      	mov	r2, r3
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	b10b      	cbz	r3, 8003662 <_free_r+0x52>
 800365e:	42a3      	cmp	r3, r4
 8003660:	d9fa      	bls.n	8003658 <_free_r+0x48>
 8003662:	6811      	ldr	r1, [r2, #0]
 8003664:	1850      	adds	r0, r2, r1
 8003666:	42a0      	cmp	r0, r4
 8003668:	d10b      	bne.n	8003682 <_free_r+0x72>
 800366a:	6820      	ldr	r0, [r4, #0]
 800366c:	4401      	add	r1, r0
 800366e:	1850      	adds	r0, r2, r1
 8003670:	4283      	cmp	r3, r0
 8003672:	6011      	str	r1, [r2, #0]
 8003674:	d1de      	bne.n	8003634 <_free_r+0x24>
 8003676:	6818      	ldr	r0, [r3, #0]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	4401      	add	r1, r0
 800367c:	6011      	str	r1, [r2, #0]
 800367e:	6053      	str	r3, [r2, #4]
 8003680:	e7d8      	b.n	8003634 <_free_r+0x24>
 8003682:	d902      	bls.n	800368a <_free_r+0x7a>
 8003684:	230c      	movs	r3, #12
 8003686:	602b      	str	r3, [r5, #0]
 8003688:	e7d4      	b.n	8003634 <_free_r+0x24>
 800368a:	6820      	ldr	r0, [r4, #0]
 800368c:	1821      	adds	r1, r4, r0
 800368e:	428b      	cmp	r3, r1
 8003690:	bf01      	itttt	eq
 8003692:	6819      	ldreq	r1, [r3, #0]
 8003694:	685b      	ldreq	r3, [r3, #4]
 8003696:	1809      	addeq	r1, r1, r0
 8003698:	6021      	streq	r1, [r4, #0]
 800369a:	6063      	str	r3, [r4, #4]
 800369c:	6054      	str	r4, [r2, #4]
 800369e:	e7c9      	b.n	8003634 <_free_r+0x24>
 80036a0:	bd38      	pop	{r3, r4, r5, pc}
 80036a2:	bf00      	nop
 80036a4:	200000dc 	.word	0x200000dc

080036a8 <_read_r>:
 80036a8:	b538      	push	{r3, r4, r5, lr}
 80036aa:	4604      	mov	r4, r0
 80036ac:	4608      	mov	r0, r1
 80036ae:	4611      	mov	r1, r2
 80036b0:	2200      	movs	r2, #0
 80036b2:	4d05      	ldr	r5, [pc, #20]	; (80036c8 <_read_r+0x20>)
 80036b4:	602a      	str	r2, [r5, #0]
 80036b6:	461a      	mov	r2, r3
 80036b8:	f7fe ffce 	bl	8002658 <_read>
 80036bc:	1c43      	adds	r3, r0, #1
 80036be:	d102      	bne.n	80036c6 <_read_r+0x1e>
 80036c0:	682b      	ldr	r3, [r5, #0]
 80036c2:	b103      	cbz	r3, 80036c6 <_read_r+0x1e>
 80036c4:	6023      	str	r3, [r4, #0]
 80036c6:	bd38      	pop	{r3, r4, r5, pc}
 80036c8:	20000100 	.word	0x20000100

080036cc <_fstat_r>:
 80036cc:	b538      	push	{r3, r4, r5, lr}
 80036ce:	2300      	movs	r3, #0
 80036d0:	4d06      	ldr	r5, [pc, #24]	; (80036ec <_fstat_r+0x20>)
 80036d2:	4604      	mov	r4, r0
 80036d4:	4608      	mov	r0, r1
 80036d6:	4611      	mov	r1, r2
 80036d8:	602b      	str	r3, [r5, #0]
 80036da:	f7ff f801 	bl	80026e0 <_fstat>
 80036de:	1c43      	adds	r3, r0, #1
 80036e0:	d102      	bne.n	80036e8 <_fstat_r+0x1c>
 80036e2:	682b      	ldr	r3, [r5, #0]
 80036e4:	b103      	cbz	r3, 80036e8 <_fstat_r+0x1c>
 80036e6:	6023      	str	r3, [r4, #0]
 80036e8:	bd38      	pop	{r3, r4, r5, pc}
 80036ea:	bf00      	nop
 80036ec:	20000100 	.word	0x20000100

080036f0 <_isatty_r>:
 80036f0:	b538      	push	{r3, r4, r5, lr}
 80036f2:	2300      	movs	r3, #0
 80036f4:	4d05      	ldr	r5, [pc, #20]	; (800370c <_isatty_r+0x1c>)
 80036f6:	4604      	mov	r4, r0
 80036f8:	4608      	mov	r0, r1
 80036fa:	602b      	str	r3, [r5, #0]
 80036fc:	f7fe ffff 	bl	80026fe <_isatty>
 8003700:	1c43      	adds	r3, r0, #1
 8003702:	d102      	bne.n	800370a <_isatty_r+0x1a>
 8003704:	682b      	ldr	r3, [r5, #0]
 8003706:	b103      	cbz	r3, 800370a <_isatty_r+0x1a>
 8003708:	6023      	str	r3, [r4, #0]
 800370a:	bd38      	pop	{r3, r4, r5, pc}
 800370c:	20000100 	.word	0x20000100

08003710 <_init>:
 8003710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003712:	bf00      	nop
 8003714:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003716:	bc08      	pop	{r3}
 8003718:	469e      	mov	lr, r3
 800371a:	4770      	bx	lr

0800371c <_fini>:
 800371c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800371e:	bf00      	nop
 8003720:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003722:	bc08      	pop	{r3}
 8003724:	469e      	mov	lr, r3
 8003726:	4770      	bx	lr
